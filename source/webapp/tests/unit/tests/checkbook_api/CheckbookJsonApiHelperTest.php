<?php

include_once CUSTOM_MODULES_DIR . '/checkbook_api/json_api/CheckBookJsonApiHelper.php';

use PHPUnit\Framework\TestCase;
use \checkbook_json_api\CheckBookJsonApiHelper;

/**
 * Class CheckbookJsonApiHelperTest
 */
class CheckbookJsonApiHelperTest extends TestCase
{
    /**
     * @var
     */
    public $api;

    /**
     * @var CheckBookJsonApiHelper
     */
    public $helper;

    /**
     *
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->api = new CheckBookJsonApiStub();
        $this->api->Model = new CheckBookJsonModelStub();
        $this->helper = new CheckBookJsonApiHelper($this->api);
    }

    /**
     *
     */
    public function test_validate_year_empty()
    {
        $year = $this->helper->validate_year([]);
        $this->assertEquals(date('Y'), $year);
        $this->assertTrue($this->api->success);
        $this->assertEquals('', $this->api->message);
    }

    /**
     *
     */
    public function test_validate_year_invalid_string()
    {
        $year = $this->helper->validate_year(['', 'invalid']);
        $this->assertFalse($year);
        $this->assertFalse($this->api->success);
        $this->assertEquals('invalid year', $this->api->message);
    }

    /**
     *
     */
    public function test_validate_year_future()
    {
        $year = $this->helper->validate_year(['', date('Y') + 5]);
        $this->assertFalse($year);
        $this->assertFalse($this->api->success);
        $this->assertEquals('invalid year', $this->api->message);
    }

    /**
     *
     */
    public function test_validate_year_success()
    {
        $year = $this->helper->validate_year(['', 2013]);
        $this->assertEquals(2013, $year);
        $this->assertTrue($this->api->success);
        $this->assertEquals('', $this->api->message);
    }

    /**
     *
     */
    public function test_get_verbal_year_type()
    {
        $this->assertEquals('calendar', $this->helper->get_verbal_year_type('C'));
        $this->assertEquals('fiscal', $this->helper->get_verbal_year_type('F'));
        $this->assertEquals('fiscal', $this->helper->get_verbal_year_type('A'));
        $this->assertEquals('fiscal', $this->helper->get_verbal_year_type('4'));
        $this->assertEquals('fiscal', $this->helper->get_verbal_year_type('B'));
    }

    /**
     *
     */
    public function test_validate_year_type()
    {
        $this->assertEquals('B', $this->helper->validate_year_type([]));
        $this->assertEquals('C', $this->helper->validate_year_type([0, 0, 'C']));
        $this->assertEquals('C', $this->helper->validate_year_type([0, 0, 'cAlEnDaR']));
        $this->assertEquals('B', $this->helper->validate_year_type([0, 0, 'B']));
        $this->assertEquals('B', $this->helper->validate_year_type([0, 0, 'fIsCaL']));
        $this->assertEquals('B', $this->helper->validate_year_type([0, 0, 'weirdo']));
        $this->assertEquals('C', $this->helper->validate_year_type([0, 0, 'weirdo'], 'C'));
    }
}

/**
 * Class CheckBookJsonApiStub
 */
class CheckBookJsonApiStub
{
    /**
     * @var bool
     */
    public $success = True;
    /**
     * @var string
     */
    public $message = '';

    /**
     * @var
     */
    public $Model;
}

/**
 * Class CheckBookJsonModelStub
 */
class CheckBookJsonModelStub
{
    /**
     * @return array
     */
    function get_etl_status()
    {
        return [
            [
                'last_successful_run' => 'yesterday'
            ]
        ];
    }
}
