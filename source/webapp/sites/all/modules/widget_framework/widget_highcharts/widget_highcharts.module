<?php
/**
*	GNU AFFERO GENERAL PUBLIC LICENSE 
*	   Version 3, 19 November 2007
* This software is licensed under the GNU AGPL Version 3
* 	(see the file LICENSE for details)
*/


/*************************************************************************************/
/* Widget Hooks                                                                      */
/*************************************************************************************/

function widget_highcharts_widget_metadata() {
	return array(
    'highcharts' => array(
      'name' => t('Highcharts'),
      'module' => 'widget_highcharts',
      'description' => t("This widget type implements highcharts.")
	)
	);
}

function widget_highcharts_widget_validate(&$node) {
	if (!isset($node->widgetConfig->chartConfig)) {
		form_set_error('body', "Property 'chartConfig' is required for widget type highchart.");
	}

}

function widget_highcharts_widget_data(&$node) {
    $datasets = $node->widgetConfig->datasets;
    $isXAxisDate = false;
    $xAxisColumn = null;
    $chartTitle = null;  

    if (isset($node->widgetConfig->chartConfig->xAxis->categories->ds)) {
        foreach ($datasets as $ds) {
            if ($ds->name == $node->widgetConfig->chartConfig->xAxis->categories->ds) {
                $xAxisColumn = $ds->column;
                if ($ds->type == 'date') {
                    $isXAxisDate = true;            
                }
                break;                
            }
        }
    } else if (isset($node->widgetConfig->chartConfig->xAxisDataPoint->ds)) {
        foreach ($datasets as $ds) {
            if ($ds->name == $node->widgetConfig->chartConfig->xAxisDataPoint->ds) {
                $xAxisColumn = $ds->column;
                if ($ds->type == 'date') {
                    $isXAxisDate = true;            
                }
                break;                
            }
        }      
    } else{
    	
    }
    $results = array();
    if (is_array($node->data)) {
        foreach ($node->data as $row) {
            $xAxisDataPoint = $row[$xAxisColumn];
            if ($isXAxisDate) {                                
                if (($xAxisUTC = strtotime($xAxisDataPoint) * 1000) === false) {
                    continue;
                }
            } else {
                $xAxisUTC = $xAxisDataPoint;
            }   
          //  dsm($xAxisUTC);
            if(is_array($datasets))
            foreach ($datasets as $ds) {
            	                	                	                		 
                if (isset($ds->column) && $ds->column == $xAxisColumn) {
                    if (is_null($row[$ds->column])) {  
                        continue;
                    } 
                	$results[$ds->name][] = $xAxisUTC;//$row[$ds->column];
                	continue;
                }
                if ($ds->isArray == true) {

                	if ($ds->columns) {                		
                		foreach ($ds->columns as $col) {
                		    $allowNullValues = false;
						    if (isset($ds->allowNullValues)){
						    	$allowNullValues = $ds->allowNullValues;
						    }   
	                		if (($col->name == 'x' || $col->name =='y' || $col->name =='title') && is_null($row[$col->value]) && !$allowNullValues) {	                			
	                			unset($dataPoint);                      
		                    	break;
		                    }  
                			$dataPoint[$col->name] = $row[$col->value];
       
                			foreach($col as $colKey=>$value){                			  
                			  if($colKey !='x' && $colKey != 'y' && $colKey != 'name' && $colKey != 'value'){
                			    $dataPoint[$colKey] = $row[$col->$colKey];
                			  }                			  
                			}
                		}
                		
                		if ($dataPoint != null) {
                			$results[$ds->name][] = $dataPoint;
                			unset($dataPoint);
                		}                		
                	} else {               		
	                    //if allowNullValue is false or not set, then dont set the values.
	                    if (is_null($row[$ds->column]) && !$allowNullValues) {                      
	                    	continue;
	                    }
	                    //if allowNullValue flag is set, then set the Null values without casting. 
	                    if (is_null($row[$ds->column]) && $allowNullValues){
	                    	$results[$ds->name][] = array($xAxisUTC,$row[$ds->column]);
	                    	continue;
	                    }                
	                    if ($ds->type == 'float') {
	                            $results[$ds->name][] = array($xAxisUTC,(float)$row[$ds->column]);
	                    } else if ($ds->type == 'int') {
	                            $results[$ds->name][] = array($xAxisUTC,(int)$row[$ds->column]);
	                    } else {
	                        $results[$ds->name][] = array($xAxisUTC,$row[$ds->column]);
	                    }
                	}
                } else if (!isset($results[$ds->name])){
                    if ($ds->type == 'float') {                    
                        $results[$ds->name] = (float)$row[$ds->column];
                    } else if ($ds->type == 'int') {
                        $results[$ds->name] = (int)$row[$ds->column];
                    } else {
                        $results[$ds->name] = $row[$ds->column];
                    }                      
                }
            }
        }
    }


    if (isset($node->widgetConfig->chartConfig->title->text->ds)) {
    	$node->widgetConfig->chartConfig->title->text = $results[$node->widgetConfig->chartConfig->title->text->ds]; 
    } 
    
    //removed zoomtype
    if (!isset($node->widgetConfig->chartConfig->chart->zoomType)) {
        $node->widgetConfig->chartConfig->chart->zoomType = '';
    }    
    
    $categories = $results[$node->widgetConfig->chartConfig->xAxis->categories->ds];
    //$node->categories = $categories; 

    if (isset($node->widgetConfig->chartConfig->xAxis->categories->ds)) {
    if (!$isXAxisDate && isset($node->widgetConfig->chartConfig->xAxis->categories->ds)) {
        $categories = $results[$node->widgetConfig->chartConfig->xAxis->categories->ds];
        $node->widgetConfig->chartConfig->xAxis->categories = $categories;
    }else {
        unset($node->widgetConfig->chartConfig->xAxis->categories);
    }
    }

    if (isset($node->widgetConfig->chartConfig->xAxis->tickPositions->ds)) {
        $tickPositions = $results[$node->widgetConfig->chartConfig->xAxis->tickPositions->ds];
        $node->widgetConfig->chartConfig->xAxis->tickPositions = $tickPositions;

    }    
    
    if (isset($node->widgetConfig->chartConfig->series)) {
    	if (is_array($node->widgetConfig->chartConfig->series)) {
            foreach ($node->widgetConfig->chartConfig->series as $series) {
                if (isset($series->data->ds)) {
                   $series->data = $results[$series->data->ds] == null ? array() : $results[$series->data->ds];  
                } elseif (isset($series->ds)){
					$node->widgetConfig->chartConfig->series= $results[$series->ds];
                }

            }
        } else if (isset($node->widgetConfig->chartConfig->series->data->ds)) {
        	if (!$node->widgetConfig->chartConfig->series->additionalData) {
            	$node->widgetConfig->chartConfig->series->data = $results[$node->widgetConfig->chartConfig->series->data->ds] == null ? array() : $results[$node->widgetConfig->chartConfig->series->data->ds];
        	} else {
        		
        	}
        }
    }
    if (isset($node->widgetConfig->chartConfig->yAxis->title->text->ds)) {
        $node->widgetConfig->chartConfig->yAxis->title->text = $results[$node->widgetConfig->chartConfig->yAxis->title->text->ds];
    }
//    dsm($results);	
    $node->widgetConfig->chartConfig->chart->renderTo = 'node-chart-' . widget_unique_identifier($node);
    $node->widgetConfig->chartConfig->credits->enabled = false;

    log_debug(json_encode($node->widgetConfig->chartConfig));
}

function replaceDatasourceWithValues(&$chartConfig, $result) {
    foreach ($chartConfig as $key => $value) {
        if (is_array($value)) {
            replaceDatasourceWithValues($value, $result);
        } else {
            if ($key == 'ds') {
                $chartConfig = $result[$value];            
            }
        }
    }    
}

function widget_highcharts_add_datatable_js($node){

    $id  = widget_unique_identifier($node);

    $js = "
		    var oTable" . $id  .  ";
		    jQuery(document).ready(function() {
		        oTable" . $id  .  " = jQuery('#table_" . widget_unique_identifier($node) . "').dataTable(
		        " . $node->widgetConfig->gridConfig->dataTableOptions . "
		        );
        } );"

    ;

    echo "<script type='text/javascript'>" . $js . "</script>";
}

function widget_highcharts_widget_view(&$node) {

	switch ($node->widgetConfig->widgetSubType){
		case "highstock":
			drupal_add_js(drupal_get_path('module', 'widget_highcharts') .'/highstock/1.2.4/js/highstock.src.js',array('group'=>JS_LIBRARY,'weight'=>-1));
			drupal_add_js(drupal_get_path('module', 'widget_highcharts') .'/highcharts-globals.js',array('group'=>JS_LIBRARY,'weight'=>0));
			return theme('widget_highstocks_default_theme', array('node' => $node));
		break;
		default :
            if(isset($node->widgetConfig->displayType) && $node->widgetConfig->displayType == 'gridview'){
                return theme($node->widgetConfig->gridConfig->template, array('node'=> $node));
            }else{
                drupal_add_js(drupal_get_path('module', 'widget_highcharts') .'/highcharts/3.0.1/js/highcharts.src.js',array('group'=>JS_LIBRARY,'weight'=>-1));
                drupal_add_js(drupal_get_path('module', 'widget_highcharts') .'/highcharts-globals.js',array('group'=>JS_LIBRARY,'weight'=>0));
                return theme('widget_highcharts_default_theme', array('node' => $node));
            }
		break;

	}
}

function widget_highcharts_add_js_setting($node){
  $id = widget_unique_identifier($node);
  if ($node->widgetConfig->widgetSubType == 'highstock'){
    $type = 'highstock';
  } else {
    $type = 'highchart';
  }
  $chartConfig = widget_mergeJSFunctions($node, $node->widgetConfig->chartConfig);
  $options = array();
  $options['deferredRender'][]=array(
    'type'=>$type,
    'id'=>$id,
    'chartConfig'=>$chartConfig,
    'callback'=>$node->widgetConfig->callback
  );
  drupal_add_js($options, 'setting');
}

/*************************************************************************************/
/* Theme Hooks                                                                       */
/*************************************************************************************/

function widget_highcharts_theme($existing, $type, $theme, $path) {
	return array(
    'widget_highcharts_default_theme' => array(
	  'template' => 'highcharts',
      'arguments' => array('node' => NULL),
	),
	'widget_highstocks_default_theme' => array(
	  'template' => 'highstocks',
      'arguments' => array('node' => NULL),
	)	
	);
}


function widget_highcharts_get_color($key){

    $colors = array('#2BB673', '#EF4C77', '#FFDE15', '#78D1F1', '#FEC10E');
    return $colors[$key % 5];
	
}
