<?php
/**
*	GNU AFFERO GENERAL PUBLIC LICENSE 
*	   Version 3, 19 November 2007
* This software is licensed under the GNU AGPL Version 3
* 	(see the file LICENSE for details)
*/


/*************************************************************************************/
/* Widget Hooks                                                                      */
/*************************************************************************************/

function widget_data_tables_widget_metadata() {
	return array(
    'data_tables' => array(
      'name' => t('Table'),
      'module' => 'widget_data_tables',
      'description' => t("This widget type implements HTML table.")
	)
	);
}

/**
 * Implementation for hook widget validate (custom)
 * @param unknown_type $node
 */
function widget_data_tables_widget_validate(&$node) {

}

/**
 * Implementation for hook widget data ...
 * @param unknown_type $node
 */
function widget_data_tables_widget_data(&$node) {

}

/**
 * Implementation of hook_menu
 * @return multitype:string boolean multitype:number  
 */
function widget_data_tables_menu(){
    $items['dashboard_platform/data_tables/ajax_data/node/%node/%'] = array(
        'page callback' => '_widget_data_tables_ajaxdata',
        'page arguments' => array(4),
        'access callback' => true,
	    'type'=>MENU_CALLBACK
  	);
    $items['dashboard_platform/data_tables/ajax_data/node/%node'] = array(
        'page callback' => '_widget_data_tables_ajaxdata',
        'page arguments' => array(4),
        'access callback' => true,
	    'type'=>MENU_CALLBACK
  	);
    $items['dashboard_platform/data_tables_list/ajax_data/node/%node/%'] = array(
        'page callback' => '_widget_data_tables_list_ajaxdata',
        'page arguments' => array(4),
        'access callback' => true,
        'type'=>MENU_CALLBACK
    );
    $items['dashboard_platform/data_tables_list/ajax_data/node/%node'] = array(
        'page callback' => '_widget_data_tables_list_ajaxdata',
        'page arguments' => array(4),
        'access callback' => true,
        'type'=>MENU_CALLBACK
    );
    $items['dashboard_platform/data_tables_list_wt/ajax_data/node/%node'] = array(
        'page callback' => '_widget_data_tables_list_wt_ajaxdata',
        'page arguments' => array(4),
        'access callback' => true,
        'type'=>MENU_CALLBACK
    );
  	 	
  	return $items;
}


/**
 * supports ajax data callback for data table widget type..simpleAjax
 * @param $node
 */
function _widget_data_tables_ajaxdata($node){
  
    $node = widget_data_tables_get_data($node);
    _widget_add_padding_data($node);
    drupal_add_http_header('Content-Type','application/json; utf-8');
	echo _widget_data_tables_ajaxdata_json($node);
}



function _widget_add_padding_data($node){
  
  $index= 0;
  $paddings = array();
  foreach ($node->widgetConfig->table_columns as $row){
    $colDataTableOptions = $node->widgetConfig->dataTableOptions->aoColumns[$index];
    if(!isset($colDataTableOptions)){
      $colDataTableOptions->sClass = $row->type;
    }
    if(preg_match("/number/",$colDataTableOptions->sClass)){
      $label = (isset($row->labelAlias))? (WidgetUtil::generateLabelMapping($row->labelAlias)) : $row->label;
      $labelWords =  explode("<br/>",$label);
      $maxlength = 0;
      foreach($labelWords as $word){
        $maxlength = ($maxlength > strlen(strip_tags($word))) ? $maxlength : strlen(strip_tags($word));
      }
      $maxColumnDataLength =  0;
      foreach ($node->data as $datarow) {
        $maxColumnDataLength = ($maxColumnDataLength > strlen(strip_tags($datarow[$row->column]))) ? $maxColumnDataLength : strlen(strip_tags($datarow[$row->column]));
      }
      $paddings[$row->column] =  ( ($maxlength - $maxColumnDataLength )/2 > 0 ) ? ($maxlength - $maxColumnDataLength )/2 : 0;       
    }
    
    $index +=1;
  }
  $node->customDataPaddings =  $paddings;
}

/**
 * construct the json from data returned from data controller.This function is used for simple ajax data table widget . 
 * @param $node
 * @return   
 */
function _widget_data_tables_ajaxdata_json($node){
	$response['aaData'] = array();
    $response = array(
	    "sEcho"=> $_REQUEST['sEcho'],
    	"iTotalRecords"=> 10,
    	"iTotalDisplayRecords"=> 10);
	$response['aaData'] = array();
    if(is_array($node->data)){    
		foreach ($node->data as $datarow) {
			  $rowarray = array();
              if(is_array($node->widgetConfig->table_columns)){
                foreach ($node->widgetConfig->table_columns as $row){
                  if($node->customDataPaddings[$row->column] > 0){
                    $style = "style='margin-right:" . $node->customDataPaddings[$row->column] *8  . "px'";
                  }
                  else{
                    $style = "";
                  }
              	  $rowarray[] = '<div ' . $style . '>' . $datarow[$row->column] . '</div>';
                }
              }
			$response['aaData'][] = $rowarray;
		}
    }
	return json_encode($response);
}




/**
 * supports ajax data callback for data table widget type..dataTableWidgets...
 * @param $node
 */
function _widget_data_tables_list_wt_ajaxdata($node){
    drupal_add_http_header('Content-Type', 'application/json; utf-8');
	$node = widget_data_tables_get_data($node);	
    echo _widget_data_tables_list_wt_prepare_json($node);
}






/**
 * construct the json from data returned from data controller.This function is used for dataTableWidgets data table widget . 
 * @param $node
 * @return json representation of data
 */
function _widget_data_tables_list_wt_prepare_json($node){
	global $conf;
	$iTotalDisplayRecords =  (isset($conf['check_book']['datatables']['iTotalDisplayRecords']))?$conf['check_book']['datatables']['iTotalDisplayRecords']:$node->totalDataCount;
	$response = array(
        "sEcho"=> intval($_REQUEST['sEcho']),
        "iTotalRecords"=> $node->totalDataCount,
        "iTotalDisplayRecords"=>($node->totalDataCount > $iTotalDisplayRecords)? $iTotalDisplayRecords:$node->totalDataCount,	
        "iDisplayLength"=> (isset($node->widgetConfig->limit) ? $node->widgetConfig->limit : 10)
    );	
	$response['aaData'] = array();
    if($node->data){
        $i=0;
        $isGridView = ($node->widgetConfig->displayType == 'gridview');
        foreach ($node->data as $datarow) {
            $rowarray = array();
            foreach ($node->widgetConfig->table_columns as $row){
                if ($row->isWidget){              	
                    $widgetnode = node_load($row->widgetNid);
                    widget_set_uid($widgetnode,$i . '-' . uniqid());
                    $additionalParams = array();
                    foreach($row->columnParams as $paramColumn){
                        $additionalParams[$paramColumn] = $datarow[str_replace(".", "_",$paramColumn)];
                    }
                    widget_add_additional_parameters($widgetnode,$additionalParams);                    
                    $widgetChart = node_build_content($widgetnode);
                    if(!$isGridView){
                        $widgetChart = drupal_render($widgetnode->content);
                        $rowarray[] = $widgetChart;
                    }else{
                        $tempDataSets = $widgetnode->data;
                        if(is_array($tempDataSets)){
                            foreach($row->gridViewColumns as $gridViewColumn){
                                $value = '';
                                foreach($tempDataSets as $tempDataSet){
                                    if(isset($tempDataSet[$gridViewColumn->matchcolumn]) && $tempDataSet[$gridViewColumn->matchcolumn] == $gridViewColumn->matchvalue){
                                        $value = $tempDataSet[$gridViewColumn->dataColumn];
                                        break;
                                    }
                                }
                                $rowarray[]= $value;
                            }
                        }
                    }
                    $i++;
                } else {
                    $rowarray[] =  $datarow[$row->column];
                }
            }
            $response['aaData'][] = $rowarray;
            
        }
    }
    return json_encode($response);
}

/**
 * supports ajax data callback for data table widget type..dataTableList...
 * @param $node
 */
function _widget_data_tables_list_ajaxdata($node){
	$node = widget_data_tables_get_data($node);
	_widget_add_padding_data($node);
	
	global $conf;
    if(is_null($node->totalDataCount)){
        $iTotalRecords_dataTable = 0;
        $iTotalDisplayRecords_dataTable = 0;
    }else{
        $iTotalDisplayRecords =  isset($conf['check_book']['datatables']['iTotalDisplayRecords'])?$conf['check_book']['datatables']['iTotalDisplayRecords']:$node->totalDataCount;
        $iTotalRecords_dataTable = $node->totalDataCount;
        $iTotalDisplayRecords_dataTable = $node->totalDataCount > $iTotalDisplayRecords ? $iTotalDisplayRecords : $node->totalDataCount;
    }
	$response = array(
        "sEcho"=> intval($_REQUEST['sEcho']),
        "iTotalRecords"=> $iTotalRecords_dataTable,
        "iTotalDisplayRecords"=> $iTotalDisplayRecords_dataTable,
        "iDisplayLength"=> (isset($node->widgetConfig->limit) ? $node->widgetConfig->limit : 10)
    );
    $response['aaData'] = array();
    if($node->data){
        foreach ($node->data as $datarow) {
            $rowarray = array();
            foreach ($node->widgetConfig->table_columns as $row){
              if($node->customDataPaddings[$row->column] > 0){
                $style = "style='margin-right:" . $node->customDataPaddings[$row->column] *8  . "px'";
              }
              else{
                $style = "";
              }
              $rowarray[] = '<div ' . $style . '>' . $datarow[$row->column] . '</div>';
            }
            $response['aaData'][] = $rowarray;
        }
    }
    echo json_encode($response);
}



/**
 * gets the data from the data controller based 
 * @param  $node
 * @return updated node data
 */
function widget_data_tables_get_data($node){
	widget_config($node);

    //prepare anything we'll need before loading
    widget_prepare($node);

    //invoke widget specific prepare
    widget_invoke($node, 'widget_prepare');

    //load data
    widget_data($node);
    return $node;
}

/*
Modified the data controller query to add the right order by clause...
*/
function widget_data_tables_widget_prepare($node){
	//TODO
    /*if($node->widgetConfig->widgetSubType == "ajaxSimple"){
        $node->widgetConfig->noDataInitialLoad = false;
        $node->widgetConfig->dataTableOptions->bServerSide = false;
    }*/

    if(isset($node->widgetConfig->adjustDataTableOptions)){
        eval($node->widgetConfig->adjustDataTableOptions);
    }
    $count = 0 ;
    if(isset($node->widgetConfig->orderBy))
      $node->widgetConfig->orderBy = array($node->widgetConfig->orderBy);
    else
      $node->widgetConfig->orderBy = array();
    while($count < $_REQUEST['iSortingCols']){
	//if($_REQUEST['iSortCol_0'] != NULL){
	$index =  $count ;
		$sort_column = $node->widgetConfig->table_columns[$_REQUEST['iSortCol_' . $index ]]->column;		
		if(isset($node->widgetConfig->table_columns[$_REQUEST['iSortCol_' . $index ]]->sortSourceColumn)){
			$sort_actual_column = $node->widgetConfig->table_columns[$_REQUEST['iSortCol_' . $index ]]->sortSourceColumn;
		}
		else{
			foreach($node->widgetConfig->columns as $column)
				if($sort_column ==  str_replace('.', '_',$column) )
					$sort_actual_column = $column;
		}
		if($_REQUEST['sSortDir_' . $index] == 'desc')
			$node->widgetConfig->orderBy[]  = '-' . $sort_actual_column;
		else 
			$node->widgetConfig->orderBy[] =  $sort_actual_column ;		
	//}
		$count += 1;
    }

    $iDisplayStart = $_REQUEST['iDisplayStart'];
    if(is_numeric($iDisplayStart)){
    	//$node->widgetConfig->startWith = ((int)$iDisplayStart > 4990)? 4990:(int)$iDisplayStart ;
        $node->widgetConfig->startWith = (int)$iDisplayStart;
    }

    $iDisplayLength = (is_numeric($_REQUEST['iDisplayLength']) && ((int)$_REQUEST['iDisplayLength']) > 0) ? (int)$_REQUEST['iDisplayLength'] :
        (isset($node->widgetConfig->limit) ? $node->widgetConfig->limit : NULL);
    if(isset($iDisplayLength)){
        $node->widgetConfig->limit = $iDisplayLength;
    }
}

function widget_data_tables_library() {
  $options = array(
    'type' => 'file',
    'group'=> JS_LIBRARY,
    'every_page' => TRUE
  );
  $path = drupal_get_path('module','widget_data_tables');
  return array(
    'dataTables' => array(
      'title' => 'DataTables',
      'website' => 'http://www.datatables.net',
      'version' => '1.9.1',
      'js' => array(
        $path.'/data_tables/1.9.1/media/js/jquery.dataTables.js' => $options,
        $path.'/data_tables/1.9.1/extras/FixedColumns/media/js/FixedColumns.js' => $options,
        $path.'/data_tables/extensions/pagination.js' => $options,
        $path.'/data_tables/extensions/table_tools/2.1.4/media/js/ZeroClipboard.js' => $options,
        $path.'/data_tables/extensions/table_tools/2.1.4/media/js/TableTools.js' => $options
      ),
      'dependencies'=>array(
        array('system','jquery'),
        array('system','ui')
      )
    ),
    'dataTables_nightly'=>array(
      'title' => 'DataTables',
      'website' => 'http://www.datatables.net',
      'version' => 'nightly',
      'js'=> array(
        'http://www.datatables.net/download/build/jquery.dataTables.nightly.js'=>array('type'=>'external'),
        'http://www.datatables.net/download/build/FixedColumns.nightly.js'=>array('type'=>'external'),
        $path.'/data_tables/extensions/pagination.js' => $options,
      )
    )
  );
}

function widget_data_tables_init(){
  drupal_add_library('widget_data_tables','dataTables',TRUE);
}

/*

*/
function widget_data_tables_widget_view(&$node) {
 	switch ($node->widgetConfig->widgetSubType){
		case "template":
			return theme($node->widgetConfig->template, array('node'=> $node));
		break;
		case "ajaxCustomTemplate" :
		  $sAjaxSource =  $node->widgetConfig->ajaxCallBack . '/node/' .$node->nid  ;
		  if(is_array($node->widgetConfig->requestParams))  {
		    if(isset($node->widgetConfig->urlParamMap))
		    $urlParamMap = array_flip(get_object_vars($node->widgetConfig->urlParamMap));
		    foreach($node->widgetConfig->requestParams as $key=>$value) {
		      $key = isset($urlParamMap[$key]) ? $urlParamMap[$key] : $key;
		      $sAjaxSource .= "/$key/$value" ;
		    }
		  }
		  	
		  $node->widgetConfig->dataTableOptions->sAjaxSource =  escapeSpecialCharacters(html_entity_decode($sAjaxSource,ENT_QUOTES));
		  if (!isset($node->data) || count($node->data) == 0) {
		        return theme('widget_data_tables_no_results_theme', array('node'=> $node));

		  }
		  else {
                return theme($node->widgetConfig->template, array('node'=> $node));
		  }
		  break;		
		case "ajaxSimple" :
            $sAjaxSource = '/dashboard_platform/data_tables/ajax_data/node/' .$node->nid  ;
            if(is_array($node->widgetConfig->requestParams))  {
				if(isset($node->widgetConfig->urlParamMap))
				$urlParamMap = array_flip(get_object_vars($node->widgetConfig->urlParamMap));
		    	foreach($node->widgetConfig->requestParams as $key=>$value) {
		    		 $key = isset($urlParamMap[$key]) ? $urlParamMap[$key] : $key;
                     $sAjaxSource .= "/$key/$value" ;
	    		}
			}
			
			$node->widgetConfig->dataTableOptions->sAjaxSource =  escapeSpecialCharacters(html_entity_decode($sAjaxSource,ENT_QUOTES));
		/*	$node->widgetConfig->dataTableOptions->fnDrawCallback  =  "##function( oSettings ) {
			addPaddingToDataCells(this);
			}##";
*/
			
			$node->widgetConfig->dataTableOptions->fnServerData= "##function ( sSource, aoData, fnCallback ) {			
			aoData.push( {
			  'name': 'data_type', 'value': 'json' } );
			  jQuery.ajax( {
			    'dataType': 'json',
			    'type': 'GET',
			    'url': sSource,
			    'data': aoData,
			    'success': fnCallback
			  } );
			}##";			
			
			
			if (!isset($node->data) || count($node->data) == 0) {
				return theme('widget_data_tables_no_results_theme', array('node'=> $node));
			}
			else {
				return theme('widget_data_tables_by_rows_theme', array('node'=> $node));
			}	
		break;
        case "dataTableList" :
            $sAjaxSource = '/dashboard_platform/data_tables_list/ajax_data/node/' . $node->nid;

            if(is_array($node->widgetConfig->originalRequestParams)){
                foreach($node->widgetConfig->originalRequestParams as $key=>$value) {
                     $value = str_replace('/','__',$value);
                     $sAjaxSource .= "/$key/$value" ;
                }
            }

            if(is_array($node->widgetConfig->allowRequestParamValues)){
                foreach($node->widgetConfig->allowRequestParamValues as $paramKey=>$paramValue) {
                    $sAjaxSource .= "/$paramKey/$paramValue" ;
                }
            }

            $node->widgetConfig->dataTableOptions->sAjaxSource =  escapeSpecialCharacters(html_entity_decode($sAjaxSource,ENT_QUOTES));
            
            $node->widgetConfig->dataTableOptions->fnServerData= "##function ( sSource, aoData, fnCallback ) {
            aoData.push( {
            'name': 'data_type', 'value': 'json' } );
            jQuery.ajax( {
            'dataType': 'json',
            'type': 'GET',
            'url': sSource,
            'data': aoData,
            'success': fnCallback
            } );
            }##";
            	            

            if (!isset($node->data) || count($node->data) == 0) {
                return theme('widget_data_tables_no_results_theme', array('node'=> $node));
            }
            else {
                return theme('widget_data_tables_list_by_rows_theme', array('node'=> $node));
            }
        break;        
        case "dataTableWidgets" :
            $node->widgetConfig->dataTableOptions->sAjaxSource .= '/dashboard_platform/data_tables_list_wt/ajax_data/node/' .$node->nid;
			if(is_array($node->widgetConfig->requestParams))  { 
				if(isset($node->widgetConfig->urlParamMap))
				$urlParamMap = array_flip(get_object_vars($node->widgetConfig->urlParamMap));
		    	foreach($node->widgetConfig->requestParams as $key=>$value) {
		    		 $key = isset($urlParamMap[$key]) ? $urlParamMap[$key] : $key;	
					    $node->widgetConfig->dataTableOptions->sAjaxSource .= "/$key/$value" ;
	    		}
			}


            $isGridView = ($node->widgetConfig->displayType == 'gridview');
            if($isGridView){

                //adjust datatable aoColumns
                $updatedaoColumns = array();
                $tableColumns = $node->widgetConfig->table_columns;
                $cls = new stdClass();
                $cls->bSortable = false;
                foreach ($tableColumns as $tableColumn){
                    if(isset($tableColumn->isWidget) && $tableColumn->isWidget){
                        foreach($tableColumn->gridViewColumns as $gridViewColumn){
                            $updatedaoColumns[] = $cls;
                        }
                    }else{
                        $updatedaoColumns[] = $cls;
                    }
                }

                $node->widgetConfig->dataTableOptions->aoColumns = $updatedaoColumns;

                return theme('widget_data_tables_list_by_rows_wt_grid_theme', array('node'=> $node));
            }


            if (!isset($node->data) || count($node->data) == 0) {
                return theme('widget_data_tables_no_results_theme', array('node'=> $node));
            }
            else {
                return theme('widget_data_tables_list_by_rows_wt_theme', array('node'=> $node));
            }

        break;
        /*case "deferredRendering":
          $sAjaxSource = '/dashboard_platform/data_tables/ajax_data/node/' . $node->nid;
          if (is_array($node->widgetConfig->requestParams)) {
            if (isset($node->widgetConfig->urlParamMap)) {
              $urlParamMap = array_flip(get_object_vars($node->widgetConfig->urlParamMap));
            }
            foreach ($node->widgetConfig->requestParams as $key => $value) {
              $key = isset($urlParamMap[$key]) ? $urlParamMap[$key] : $key;
              $sAjaxSource .= "/$key/$value";
            }
          }
          $node->widgetConfig->dataTableOptions->sAjaxSource = $sAjaxSource;
          if (!isset($node->data) || count($node->data) == 0) {
            return theme('widget_data_tables_no_results_theme', array('node'=> $node));
          }
          else {
            return theme('widget_data_tables_by_rows_dr_theme', array('node'=> $node));
          }
        break;*/
		default :
			if (!isset($node->data) || count($node->data) == 0) {
				return theme('widget_data_tables_no_results_theme', array('node'=> $node));
			}
			else
			return theme('widget_data_tables_default_theme', array('node'=> $node));
		break;	
		
	}	
}


function widget_data_tables_add_js($node){
	require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/handler/PHP2Json.php');
	$theme_path =  drupal_get_path('theme',$GLOBALS['theme']);
	$node->widgetConfig->dataTableOptions->oLanguage =
	                 array("sProcessing"=>"<img src='/" . $theme_path . "/images/loading_large.gif' title='Processing...'/>",
	                     "sZeroRecords"=>"<div class='clearfix' id='no-records-datatable'><span>No Matching Records Found</span></div>");
	$dataTableOptions = json_encode($node->widgetConfig->dataTableOptions);
    $id  = "";
    if($node->widgetConfig->widgetSubType == "ajaxSimple" || $node->widgetConfig->widgetSubType == "ajaxCustomTemplate" ){
        $id = widget_unique_identifier($node);
    }
    $js = "
		    var oTable" . $id  .  ";
		    jQuery(document).ready(function() {
		        oTable" . $id  .  " = jQuery('#table_" . widget_unique_identifier($node) . "').dataTable(

		        " . stripcslashes(str_replace('##"','',str_replace('"##','',$dataTableOptions))) ."
		        );
		        oTable" . $id  .  ".node_id = " . $node->nid . " ;
		        oTable" . $id  .  ".initAjaxSource = '" . $node->widgetConfig->sAjaxSource . "' ;

	    		" . stripcslashes($node->widgetConfig->customJS) .
        "} );" .
        stripcslashes($node->widgetConfig->customExternalJS);
	
	if($node->widgetConfig->ajaxDataPopup || $_REQUEST['appendScripts']){
		echo "<script type='text/javascript'>" . $js . "</script>";
	}
	else{
		drupal_add_js($js,"inline");
	}
}

function widget_data_tables_add_js_setting($node){
  require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/handler/PHP2Json.php');
  $dataTableOptions = json_encode($node->widgetConfig->dataTableOptions);
  $dataTableOptions = str_replace('"##',"",$dataTableOptions);
  $dataTableOptions = str_replace('##"',"",$dataTableOptions);
  $id = widget_unique_identifier($node);
  $options = array();
  $options['deferredRender'][] = array(
    'type'=>'datatable',
    'id'=>$id,
    'dataTableOptions'=>$dataTableOptions,
    'nodeId'=>$node->nid,
    'initAjaxSource'=>$node->widgetConfig->sAjaxSource,
    'customJS'=>stripcslashes($node->widgetConfig->customJS),
    'customExternalJS'=>stripcslashes($node->widgetConfig->customExternalJS),
  );
  drupal_add_js($options, 'setting');
}
/*************************************************************************************/
/* Theme Hooks                                                                       */
/*************************************************************************************/

function widget_data_tables_theme($existing, $type, $theme, $path) {
	return array(
      'widget_data_tables_default_theme' => array(
	    'template' => 'table_by_rows',
        'arguments' => array('node' => NULL),
	  ),
	  'widget_data_tables_by_rows_theme' => array(
	    'template' => 'table_by_rows',
	    'arguments' => array('node' => NULL),
	  ),
      'widget_data_tables_list_by_rows_theme' => array(
         'template' => 'table_by_list',
         'arguments' => array('node' => NULL),
      ),
	  'widget_data_tables_no_results_theme' => array(
	    'template' => 'no_results',
	    'arguments' => array('node' => NULL),
	  ),
      'widget_data_tables_list_by_rows_wt_theme' => array(
        'template' => 'table_by_list_wt',
        'arguments' => array('node' => NULL),
      ),
      'widget_data_tables_list_by_rows_wt_grid_theme' => array(
        'template' => 'table_by_list_wt_grid',
        'arguments' => array('node' => NULL),
      ),
	);
}

function widget_data_tables_export_link($node) {
    $nid = widget_unique_identifier($node);
	return "<span class=export exportid={$nid}>Export</span>";
}

function escapeSpecialCharacters($string) {

    $string = str_replace("%", "%25", $string);
    $string = str_replace("\\", "%5C%5C", $string);
    $string = str_replace(" ", "%20", $string);
    $string = str_replace("#", "%23", $string);
    //$string = str_replace("/", "%2F", $string);
    $string = str_replace("&", "%26", $string);
    $string = str_replace("[", "\[", $string);
    $string = str_replace("]", "\]", $string);
    $string = str_replace(":", "\:", $string);
    $string = str_replace("'", "%27", $string);
    $string = str_replace("+", "\%2B", $string);
    $string = str_replace("?", "\%3F", $string);
    $string = str_replace("$", "\%24", $string);
    $string = str_replace("!", "\%21", $string);
    $string = str_replace("^", "\%5E", $string);
    $string = str_replace("|", "\%7C", $string);
    $string = str_replace("(", "\%28", $string);
    $string = str_replace(")", "\%29", $string);
    $string = str_replace("*", "\%2A", $string);
    $string = str_replace(".", "\%2E", $string);

  return $string;
}
