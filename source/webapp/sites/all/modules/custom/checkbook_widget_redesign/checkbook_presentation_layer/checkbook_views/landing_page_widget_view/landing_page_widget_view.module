<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
*
* Copyright (C) 2012, 2013 New York City
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


/*************************************************************************************/
/* Widget Hooks                                                                      */
/*************************************************************************************/

function landing_page_widget_view_widget_controller_metadata() {
	return array(
    'data_tables' => array(
      'name' => t('Table'),
      'module' => 'landing_page_widget_view',
      'description' => t("This widget type implements HTML table.")
	)
	);
}

/**
 * Implementation for hook widget validate (custom)
 * @param $node
 */
function landing_page_widget_view_widget_controller_validate(&$node) {

}

/**
 * Implementation for hook widget data ...
 * @param $node
 */
function landing_page_widget_view_widget_controller_data(&$node) {

}

/**
 * Implementation of hook_menu
 * @return multitype:string boolean multitype:number
 */
function landing_page_widget_view_menu(){
    $items['checkbook_views/data_tables/ajax_data/node/%widget_controller/%'] = array(
        'page callback' => '_landing_page_widget_view_ajaxdata',
        'page arguments' => array(4),
        'access callback' => true,
	    'type'=>MENU_CALLBACK
  	);
    $items['checkbook_views/data_tables/ajax_data/node/%widget_controller'] = array(
        'page callback' => '_landing_page_widget_view_ajaxdata',
        'page arguments' => array(4),
        'access callback' => true,
	    'type'=>MENU_CALLBACK
  	);

  	return $items;
}

/**
 * supports ajax data callback for data table widget type..simpleAjax
 * @param $node
 */
function _landing_page_widget_view_ajaxdata($node){

	if($node->nid ==  null){
		$node = _widget_controller_node_load_file($node);
	}
    $node = landing_page_widget_view_get_data($node);
    __landing_page_widget_add_padding_data($node);
    drupal_add_http_header('Content-Type','application/json; utf-8');
	echo _landing_page_widget_view_ajaxdata_json($node);
}

function __landing_page_widget_add_padding_data($node){
  if($node->widgetConfig->skipCustomPadding) return;
  $index= 0;
  $paddings = array();
  $columns_max_length = array();
  foreach ($node->widgetConfig->table_columns as $row){
      if(!isset($row->datasource) || (isset($row->datasource) && ($row->datasource == RequestUtilities::get('datasource')))){
          $colDataTableOptions = $node->widgetConfig->dataTableOptions->aoColumns[$index];
          if(!isset($colDataTableOptions)){
              $colDataTableOptions->sClass = $row->type;
          }
          if(preg_match("/number/",$colDataTableOptions->sClass)){
              $label = (isset($row->labelAlias))? (WidgetUtil::generateLabelMapping($row->labelAlias)) : $row->label;
              $labelWords =  explode("<br/>",$label);
              $maxlength = 0;
              foreach($labelWords as $word){
                  $maxlength = ($maxlength > strlen(strip_tags($word))) ? $maxlength : strlen(strip_tags($word));
              }
              $maxColumnDataLength =  0;
              foreach ($node->data as $datarow) {
                  $maxColumnDataLength = ($maxColumnDataLength > strlen(strip_tags($datarow[$row->column]))) ? $maxColumnDataLength : strlen(strip_tags($datarow[$row->column]));
              }
              $paddings[$row->column] =  ( ($maxlength - $maxColumnDataLength )/2 > 0 ) ? ($maxlength - $maxColumnDataLength )/2 : 0;
          }
          if(preg_match("/number-center/",$colDataTableOptions->sClass) || preg_match("/number-center-scroll/",$colDataTableOptions->sClass)){
              $label = (isset($row->labelAlias))? (WidgetUtil::generateLabelMapping($row->labelAlias)) : $row->label;
              $labelWords =  explode("<br/>",$label);
              $maxlength = 0;
              foreach($labelWords as $word){
                  $maxlength = ($maxlength > strlen(strip_tags($word))) ? $maxlength : strlen(strip_tags($word));
              }
              $maxColumnDataLength =  0;
              foreach ($node->data as $datarow) {
                  $maxColumnDataLength = ($maxColumnDataLength > strlen(strip_tags($datarow[$row->column]))) ? $maxColumnDataLength : strlen(strip_tags($datarow[$row->column]));
              }
              $columns_max_length[$row->column] =  $maxColumnDataLength;
          }

          $index +=1;
      }
  }
  $node->customDataPaddings =  $paddings;
  $node->maxColumnDataLength = $columns_max_length;
}

/**
 * construct the json from data returned from data controller.This function is used for simple ajax data table widget .
 * @param $node
 * @return false|string
 */
function _landing_page_widget_view_ajaxdata_json($node){
    $response['aaData'] = array();
    $response = array(
        "sEcho"=> $_REQUEST['sEcho'],
        "iTotalRecords"=> 5,
        "iTotalDisplayRecords"=> 5);
    $response['aaData'] = array();
    if(is_array($node->data)){
        foreach ($node->data as $datarow) {
            $rowarray = array();
            if(is_array($node->widgetConfig->table_columns)){
                foreach ($node->widgetConfig->table_columns as $row){
                    if(!isset($row->datasource) || (isset($row->datasource) && ($row->datasource == RequestUtilities::get('datasource')))){
                        if ($node->customDataPaddings[$row->column] > 0) {
                            $style = "style='margin-right:" . $node->customDataPaddings[$row->column] * 8 . "px'";
                        } else {
                            $style = "";
                        }
                        if ($node->maxColumnDataLength[$row->column] > 0) {
                            $style = "style='text-align: center;'";
                            $value = str_pad($datarow[$row->column], $node->maxColumnDataLength[$row->column], " ", STR_PAD_LEFT);
                            $value = str_replace(" ", "&nbsp;", $value);
                            $rowarray[] = '<div ' . $style . '>' . $value . '</div>';
                        } else {
                            $rowarray[] = '<div ' . $style . '>' . $datarow[$row->column] . '</div>';
                        }

                    }
                }
            }
            $response['aaData'][] = $rowarray;
        }
    }
    return json_encode($response);
}

/**
 * gets the data from the data controller based
 * @param  $node
 * @return updated node data
 */
function landing_page_widget_view_get_data($node){
    //merge default config settings into node config settings
    $node = widget_merge_default_settings($node);

    //make sure configuration is loaded
    widget_controller_config($node);

    //prepare anything we'll need before loading
    widget_controller_prepare($node);

    //invoke widget specific prepare
    widget_controller_invoke($node, 'widget_prepare');

    //load data
    widget_controller_data($node);
    return $node;
}

/*
Modified the data controller query to add the right order by clause...
*/
function landing_page_widget_view_widget_prepare($node){

    $sort_columns = array();
    foreach($node->widgetConfig->table_columns as $column) {
        array_push($sort_columns, $column);
    }

    if(isset($node->widgetConfig->dataTableOptions->aaSorting)) {
        $count = 0;
        if(isset($node->widgetConfig->orderBy))
            $node->widgetConfig->orderBy = array($node->widgetConfig->orderBy);
        else
            $node->widgetConfig->orderBy = array();

        while($count < $_REQUEST['iSortingCols']){
            $index =  $count ;

            $sort_column = $sort_columns[$_REQUEST['iSortCol_' . $index ]]->column;
            if($_REQUEST['sSortDir_' . $index] == 'desc')
                $node->widgetConfig->orderBy[]  = '-' . $sort_column;
            else
                $node->widgetConfig->orderBy[] =  $sort_column ;
            $count += 1;
        }
    }

    /**
     * uniqueSortColumn will allow the data to order properly by a secondary unique sort
     */
    $sortDir = $_REQUEST['sSortDir_' . $index];
    $uniqueSortColumn = $node->widgetConfig->uniqueSortColumn;
    if(isset($node->widgetConfig->orderBy) && !empty($node->widgetConfig->orderBy)) {
        if(isset($uniqueSortColumn)) {
            if(is_array($uniqueSortColumn)) {
                foreach($uniqueSortColumn as $value) {
                    if($sortDir == 'desc' && strpos($value, '-') !== 0)
                        $node->widgetConfig->orderBy[]  = '-' . $value;
                    else
                        $node->widgetConfig->orderBy[] =  (strpos($value, '-') === 0)? ltrim($value, '-') : $value;
                }
            }
            else {
                $node->widgetConfig->orderBy[] = ($sortDir == 'desc' && strpos($uniqueSortColumn, '-') !== 0) ? '-' . $uniqueSortColumn : ltrim($uniqueSortColumn, '-');
            }
        }
    }

    $iDisplayStart = $_REQUEST['iDisplayStart'];
    if(is_numeric($iDisplayStart)){
        $node->widgetConfig->startWith = (int)$iDisplayStart;
    }

    $iDisplayLength = (is_numeric($_REQUEST['iDisplayLength']) && ((int)$_REQUEST['iDisplayLength']) > 0) ?
        (int)$_REQUEST['iDisplayLength'] : (isset($node->widgetConfig->limit) ? $node->widgetConfig->limit : NULL);
    if(isset($iDisplayLength)){
        $node->widgetConfig->limit = $iDisplayLength;
    }
}

function landing_page_widget_view_init(){
  drupal_add_library('landing_page_widget_view','dataTables',TRUE);
}

/**
 * Function will create a url param string with values that exist
 * in both the list of validUrlParameters and the query string
 * @param $node
 * @return string
 */
function _get_url_parameter_string($node) {
    $urlParameterString = "";
    if (isset($node->widgetConfig->validUrlParameters)) {
        $urlParams = $node->widgetConfig->validUrlParameters;
        $urlPath = drupal_get_path_alias($_GET['q']);
        $pathParams = explode('/', $urlPath);
        for($i = 0; $i < count($pathParams); $i = $i + 1) {
            $key = $pathParams[$i];
            $value = $pathParams[$i+1];
            if(in_array($key,$urlParams)) {
                $urlParameterString .= "/$key/$value" ;
            }
        }
    }
    return $urlParameterString;
}

function landing_page_widget_view_widget_controller_view(&$node) {
 	switch ($node->widgetConfig->widgetSubType){
		case "template":
			return theme($node->widgetConfig->template, array('node'=> $node));
		break;
		case "ajaxSimple" :
            $sAjaxSource = '/checkbook_views/data_tables/ajax_data/node/' .$node->nid;
            $sAjaxSource .= isset($node->legacy_node_id) ? '/legacy_node_id/'.$node->legacy_node_id : "";
            $sAjaxSource .= _get_url_parameter_string($node);
            $sAjaxSource = $sAjaxSource._checkbook_append_url_params();
			$node->widgetConfig->dataTableOptions->sAjaxSource =  _escape_special_characters(html_entity_decode($sAjaxSource,ENT_QUOTES));
			$node->widgetConfig->dataTableOptions->fnServerData= "##function ( sSource, aoData, fnCallback ) {
			aoData.push( {
			  'name': 'data_type', 'value': 'json' } );
			  jQuery.ajax( {
			    'dataType': 'json',
			    'type': 'GET',
			    'url': sSource,
			    'data': aoData,
			    'success': fnCallback
			  } );
			}##";

				return theme('landing_page_widget_view_by_rows_theme', array('node'=> $node));

		break;
		default :
			return theme('landing_page_widget_view_default_theme', array('node'=> $node));
		break;

	}
}


/*************************************************************************************/
/* Theme Hooks                                                                       */
/*************************************************************************************/

function landing_page_widget_view_theme($existing, $type, $theme, $path) {
	return array(
      'landing_page_widget_view_default_theme' => array(
	    'template' => 'table_by_rows',
        'arguments' => array('node' => NULL),
	  ),
	  'landing_page_widget_view_by_rows_theme' => array(
	    'template' => 'table_by_rows',
	    'arguments' => array('node' => NULL),
	  ),

	);
}

function _escape_special_characters($string) {

    $string = str_replace("%", "%25", $string);
    $string = str_replace("\\", "%5C%5C", $string);
    $string = str_replace(" ", "%20", $string);
    $string = str_replace("#", "%23", $string);
    //$string = str_replace("/", "%2F", $string);
    $string = str_replace("&", "%26", $string);
    $string = str_replace("[", "\[", $string);
    $string = str_replace("]", "\]", $string);
    $string = str_replace(":", "\:", $string);
    $string = str_replace("'", "%27", $string);
    $string = str_replace("+", "\%2B", $string);
    $string = str_replace("?", "\%3F", $string);
    $string = str_replace("$", "\%24", $string);
    $string = str_replace("!", "\%21", $string);
    $string = str_replace("^", "\%5E", $string);
    $string = str_replace("|", "\%7C", $string);
    $string = str_replace("(", "\%28", $string);
    $string = str_replace(")", "\%29", $string);
    $string = str_replace("*", "\%2A", $string);
    $string = str_replace(".", "\%2E", $string);

  return $string;
}
