<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
* 
* Copyright (C) 2012, 2013 New York City
* 
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
* 
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/pattern/AbstractObject.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/object/comparator/Comparator.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/object/comparator/handler/AbstractComparator.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/object/comparator/handler/AbstractValueComparator.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/object/comparator/handler/PropertyBasedComparator.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/object/comparator/handler/DefaultPropertyBasedComparator.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/object/exception/UnsupportedOperationException.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/datasource/formatter/ResultFormatter.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/datasource/formatter/handler/SpecialCharacterResultFormatter.php');

require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/DataConverter.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/handler/AbstractDataConverter.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/handler/AbstractJson2PHP.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/handler/PHP2Json.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/handler/AbstractJson2PHP.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/handler/Json2PHP.php');

//
//// Remove these
//require_once(realpath(drupal_get_path('module', 'checkbook_infrastructure_layer')) .'/constants/SpendingConstants.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_infrastructure_layer')) .'/constants/ContractConstants.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_infrastructure_layer')) .'/constants/CommonConstants.php');
//
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/spending/SpendingUrlService.php');
//
//require_once(realpath(drupal_get_path('module', 'checkbook_domain')) .'/constants/SqlConfigPath.php');
//
//require_once(realpath(drupal_get_path('module', 'checkbook_domain')) .'/common/EntityFactory.php');
//
//require_once(realpath(drupal_get_path('module', 'checkbook_domain')) .'/sql/SqlDatasetFactory.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_domain')) .'/sql/SqlRecordCountFactory.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_domain')) .'/sql/ISqlEntityRepository.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_domain')) .'/sql/SqlEntityRepository.php');
//
//require_once(realpath(drupal_get_path('module', 'checkbook_domain')) .'/widget/IWidgetRepository.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_domain')) .'/widget/WidgetRepository.php');
//
//// checkbook_services
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/common/VendorService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/common/PrimeVendorService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/common/SubVendorService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/common/MinorityTypeService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/common/data/IDataService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/common/data/DataService.php');
//
//
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/widget/IWidgetService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/widget/WidgetService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/widget/WidgetDataService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/widget/WidgetSqlService.php');
//
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/spending/SpendingWidgetService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/spending/SpendingParameters.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/spending/SpendingUrlService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/spending/SpendingWidgetVisibilityService.php');
//
//
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/contracts/ContractsUrlService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/contracts/ContractsWidgetService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/contracts/ContractsWidgetVisibilityService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/contracts/ContractsParameters.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/contracts/data/IContractsDataService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/contracts/data/ContractsDataService.php');
//
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/revenue/RevenueDataService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/revenue/RevenueUrlService.php');
//require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/revenue/RevenueWidgetService.php');


/***************************************/
/* Implementation of Widget Node Type  */
/***************************************/

function widget_controller_menu(){
  $items['widget_controller_ajax_data/node/%widget_controller/%'] = array(
      'page callback' => 'widget_controller_ajax_get_node',
      'page arguments' => array(2),
      'access callback' => true,
      'type'=>MENU_CALLBACK
  );
  
  
  $items['widget_controller/%'] = array(
  		'page callback' => '_widget_controller_node_view_page',
  		'page arguments' => array(1),
  		'access callback' => true,
  		'type'=>MENU_CALLBACK
  );

  return $items;
}



function widget_controller_load($key){
	if($node == null){
		$node = _widget_controller_node_load_file($key);
	}
	
	return $node;
}

function widget_controller_node_info1() {
	return array(
    'widget' => array(
      'name' => t('Widget Controller'),
      'module' => 'widget controller',
      'description' => t("This content type implementing widgets."),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'has_body' => TRUE,
      'body_label' => t('Body'),
	)
	);
}

function widget_controller_access($op, $node, $account) {
	if ($op == 'create') {
		return user_access('create widget', $account);
	}

	if ($op == 'update') {
		if (user_access('edit any widget', $account) || (user_access('edit own widget', $account) && ($account->uid == $node->uid))) {
			return TRUE;
		}
	}

	if ($op == 'delete') {
		if (user_access('delete any widget', $account) || (user_access('delete own widget', $account) && ($account->uid == $node->uid))) {
			return TRUE;
		}
	}
}

function widget_controller_perm() {
	return array(
    'create widget',
    'delete own widget',
    'delete any widget',
    'edit own widget',
    'edit any widget',
	);
}

function _widget_controller_node_load($key, $type='node'){
    return _widget_controller_node_load_file($key);
}

/*
 * Custom hook for new widget controller
 */
function _widget_controller_node_view($key){
    $viewName = WidgetController::getInstance()->getWidgetViewConfigName($key);
    if(!isset($viewName)) return;
    $legacy_node_id = WidgetController::getInstance()->getWidgetLegacyNodeId($key);
    $node = _widget_controller_node_load_file($viewName);
    $node = widget_merge_default_settings($node);
    $node->legacy_node_id = $legacy_node_id;
    $node = widget_controller_node_view($node);
    echo $node->content['body']['#markup'];
}

function _widget_controller_node_view_page($key){
    $node = _widget_controller_node_load_file($key);
    $node = widget_merge_default_settings($node);
    $node = widget_controller_node_view($node);
    return $node->content['body']['#markup'];
}

function widget_merge_default_settings($node){
    $widgetConfig = widget_merge_default_settings_recursively($node,'default_settings');
    $node->widget_json = $widgetConfig->widget_json;
    return $node;
}

function widget_merge_default_settings_recursively($widgetConfig,$defaultConfigKey){

    if(isset($defaultConfigKey)) {
        $defaultWidgetConfig = _widget_controller_node_load_file($defaultConfigKey);
        $converter = new Json2PHPObject();
        $widgetJson =  $converter->convert($widgetConfig->widget_json);
        $defaultWidgetJson = $converter->convert($defaultWidgetConfig->widget_json);
        $mergedWidgetJson = drupal_array_merge_deep($defaultWidgetJson, $widgetJson);
        $widgetConfig->widget_json = json_encode($mergedWidgetJson);
        $defaultConfigKey = $mergedWidgetJson['defaultConfigKey'] == $defaultConfigKey ? null : $mergedWidgetJson['defaultConfigKey'];
        return widget_merge_default_settings_recursively($widgetConfig,$defaultConfigKey);
    }
    return $widgetConfig;
}

function _widget_controller_node_load_file($key){
	$node =  new stdClass();
	$node->type = "widget_controller";
    $files = file_scan_directory( drupal_get_path('module','checkbook_view_configs') , '/^'.$key.'\.json$/');
      if(count($files) > 0){
        $file_names = array_keys($files); 
        $json = file_get_contents($file_names[0]);
        $node->widget_json =  $json;
      }
    if($node->nid == null){
    	$node->nid = $key;
    }  
    return $node;  
}

function widget_controller_form(&$node) {
	// The site admin can decide if this node type has a title and body, and how
	// the fields should be labeled. We need to load these settings so we can
	// build the node form correctly.
	$type = node_get_types('type', $node);

	if ($type->has_title) {
		$form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5,
		);
	}

	if ($type->has_body) {
		// In Drupal 6, we can use node_body_field() to get the body and filter
		// elements. This replaces the old textarea + filter_form() method of
		// setting this up. It will also ensure the teaser splitter gets set up
		// properly.
		$form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
	}

	return $form;
}

function widget_controller_node_validate(&$node) {
	if($node->type != 'widget_controller')
		return ;

	widget_controller_config($node);
}

function widget_controller_node_view($node, $nodata = true) {

	if($node->type != 'widget_controller')
		return ;

	//make sure configuration is loaded
	widget_controller_config($node);

	//prepare anything we'll need before loading
	widget_controller_prepare($node);

	//invoke widget specific prepare
	widget_controller_invoke($node, 'widget_controller_prepare');
	
	//load data
	if(($node->widgetConfig->noDataInitialLoad == null || !$node->widgetConfig->noDataInitialLoad) || !$nodata ){
	    widget_controller_data($node);
	}

	if (isset($node->error)) {
		//dont call the specific module. Display generic error message and return
		//message needs to be set on the widget configuration. not hardcoded.
		$errorMsg = 'There was an error processing your request. Please try again in a few minutes.';
		$node->content['body'] = array(
                  '#value' => $errorMsg,
                  '#weight' => 0,
		);
		return $node;
	}

	//invoke widget specific post-load function
    widget_controller_invoke($node, 'widget_controller_data');

	if ($node->widgetConfig->dataOnly) {
		$node->content['body'] = array(
			'#value' => $node->data,
			'#weight' => 0,
		);
	}
	else {
		$val = widget_controller_invoke($node, 'widget_controller_view');
		$node->content['body'] = array(
			'#markup' => $val,
			'#weight' => 0,
		);
	}
	return $node;
}


function _widget_controller_ajax_wrapper($node){
  $urlPath = drupal_get_path_alias($_GET['q']);
  return '<div id="' . widget_controller_unique_identifier($node) . '">Loading Data</div>
  <script type="text/javascript">
  jQuery(document).ready(function() {

        var callBackURL = "/widget_controller_ajax_data/node/' .$node->nid . '/' . $urlPath . '";
         jQuery.ajax({
      	   url: callBackURL,
      	   success: function(data) {		            		   
      	     jQuery("#' . widget_controller_unique_identifier($node) . '").html(data);
      	   }
      	 });
    });
  </script>
  ';
}


function widget_controller_ajax_get_node($node){
  $node = widget_controller_node_view($node,false);
  echo $node->content['body']['#markup'];
 
}

/***************************************/
/* Introduction of Widget Hooks        */
/***************************************/

function widget_controller_hook(&$node, $hook) {
	$module = widget_controller_get_types('module', $node);
	if ($module == 'widget_controller') {
		$module = 'widget_controller_content'; // Avoid function name collisions.
	}
	return module_hook($module, $hook);
}

function widget_controller_invoke(&$node, $hook, $a2 = NULL, $a3 = NULL, $a4 = NULL) {
	if (widget_controller_hook($node, $hook)) {
		$module = widget_controller_get_types('module', $node);
		if ($module == 'widget controller') {
			$module = 'widget_controller_content'; // Avoid function name collisions.
		}
		$function = $module .'_'. $hook;
		return ($function($node, $a2, $a3, $a4));
	}
}

function widget_controller_get_types($op = 'types', $node = NULL, $reset = FALSE) {
	static $_widget_types, $_widget_names;

	if ($reset || (!isset($_widget_types) || empty($_widget_types))) {
		list($_widget_types, $_widget_names) = _widget_controller_types_build();
	}

	if ($node) {
		if (is_object($node)) {
			$type = $node->widgetConfig->widgetType;
		}

		if (!isset($_widget_types[$type])) {
			return FALSE;
		}
	}
	switch ($op) {
		case 'types':
			return $_widget_types;
		case 'type':
			return isset($_widget_types[$type]) ? $_widget_types[$type] : FALSE;
		case 'module':
			return isset($_widget_types[$type]->module) ? $_widget_types[$type]->module : FALSE;
		case 'names':
			return $_widget_names;
		case 'name':
			return isset($_widget_names[$type]) ? $_widget_names[$type] : FALSE;
	}
}

function _widget_controller_types_build() {
	$_widget_types = array();
	$_widget_names = array();

	$info_array = module_invoke_all('widget_controller_metadata');
	foreach ($info_array as $type => $info) {
		$info['type'] = $type;
		$_widget_types[$type] = (object) _widget_controller_type_set_defaults($info);
		$_widget_names[$type] = $info['name'];
	}

	asort($_widget_names);

	return array($_widget_types, $_widget_names);
}

function _widget_controller_type_set_defaults($info) {
	//currently we have no default values to set
	return $info;
}

/***************************************/
/* Default Implementation of Core      */
/***************************************/

function widget_controller_prepare(&$node) {
}

/**
 * Function will get the count used in the header text of the widget as well
 * as the total row count for the footer rendering.  By if no separate sql
 * specified for the header, the default total row count is used
 * @param $node
 */
function load_widget_controller_data_count($node) {

    //Prepare service
    $service = _widget_controller_load_data_service($node);

    //Prepare sql parameters
    $parameters = _prepare_input_parameters($node);

    //Adjust sql parameters
    $urlPath = $_GET['q'];
    $parameters = $service->adjustParameters($parameters, $urlPath);

    //Load widget total row count
    try {
        $node->totalDataCount = _load_widget_controller_row_count($service, $parameters);
    }
    catch(Exception $e) {
        log_error("Error getting total row count: \n" . $e->getMessage()/*, $e*/);
        $node->error = $e;
        return;
    }

    //Load widget header count
    try {
        $node->headerCount = _load_widget_controller_header_count($service, $parameters);
        if(!isset($node->headerCount))
            $node->headerCount = $node->totalDataCount;
    }
    catch(Exception $e) {
        log_error("Error getting header count: \n" . $e->getMessage()/*, $e*/);
        $node->error = $e;
        return;
    }
}

/**
 * Function to load the widget data
 * @param $node
 */
function widget_controller_data(&$node) {

    //Prepare service
    $service = _widget_controller_load_data_service($node);

    //Load widget data
    _load_widget_controller_data($node, $service);

    //Format widget data
    $node->data = _widget_controller_format_widget_data($node, $service);
}


/**
 * Returns the service used to fetch widget data
 *
 * @param $node
 * @return null
 */
function _widget_controller_load_data_service($node) {

    $service = null;
    if(isset($node->widgetConfig)) {
        //TODO: Use service factory
        $serviceName = $node->widgetConfig->serviceName;
        //todo: update existing widget configs
        $serviceName = !isset($serviceName) ? "ContractsWidgetService" : $serviceName;
        $service = new $serviceName($node->widgetConfig);
    }
    return $service;
}

/**
 * Function loads the widget data
 * @param $node
 * @param $service
 */
function _load_widget_controller_data($node, $service) {

    $results = null;
    $orderBy = _prepare_order_by($node);
    $limit = $node->widgetConfig->limit;
    $parameters = _prepare_input_parameters($node);

    //Adjust sql parameters
    $urlPath = $_SERVER['HTTP_REFERER'];
    $parameters = $service->adjustParameters($parameters, $urlPath);

    try {
        $results = $service->getWidgetData($parameters, $limit, $orderBy);
    }
    catch(Exception $e) {
        log_error("Error getting data from the controller: \n" . $e->getMessage()/*, $e*/);
        $node->error = $e;
        return;
    }
    $node->data = $results;
    $node->nodeAdjustedParamaterConfig = $parameters;
}

/**
 * Function set the the count for the widget header text
 * @param $service
 * @param $parameters
 */
function _load_widget_controller_header_count($service, $parameters) {
    $results = $service->getWidgetHeaderCount($parameters);
    return $results;
}

/**
 * Function gets actual widget data row count
 * @param $service
 * @param $parameters
 */
function _load_widget_controller_row_count($service, $parameters) {
    $results = $service->getWidgetDataCount($parameters);
    return $results;
}

/**
 * Loads the footer Url
 * @param $node
 * @return mixed
 */
function _widget_controller_footer_url($node) {
    $parameters = _prepare_input_parameters($node);
    $service = _widget_controller_load_data_service($node);
    $url = $service->getWidgetFooterUrl($parameters);
    return $url;
}

/**
 * Function will go through all columns in the table_columns config and apply all formatting to the data
 * @param $node
 * @param $service
 * @return mixed
 */
function _widget_controller_format_widget_data($node, $service){
    $formatColumns = array_filter($node->widgetConfig->table_columns,
        function($value) {
            return isset($value->format);
        });
    $tooltipColumns = array_filter($node->widgetConfig->table_columns,
        function($value) {
            return isset($value->tooltip);
        });
    $derivedColumns = array_filter($node->widgetConfig->table_columns,
        function($value) {
            return isset($value->derivedColumn);
        });

    if(count($formatColumns) > 0 || count($tooltipColumns) > 0 || count($derivedColumns) > 0) {
        foreach($node->data as $key=>$val) {
            //formatting
            foreach($formatColumns as $column) {
                switch($column->format) {
                    case "dollar":
                        $node->data[$key][$column->column] = custom_number_formatter_format($node->data[$key][$column->column],2,'$');
                        break;
                    case "date":
                        $node->data[$key][$column->column] = custom_date_format($node->data[$key][$column->column]);
                        break;
                    case "number":
                        $node->data[$key][$column->column] = number_format($node->data[$key][$column->column]);
                        break;
                    case "percent":
                        $node->data[$key][$column->column] = number_format($node->data[$key][$column->column],2) . '%';
                        break;
                }
            }
            //tooltip
            foreach($tooltipColumns as $column) {
                $node->data[$key][$column->column] = _get_tooltip_markup($node->data[$key][$column->column], $column->tooltip);
            }
            //derived
            $original_row = $node->data[$key];
            foreach($derivedColumns as $column) {
                $node->data[$key][$column->column] = $service->implementDerivedColumn($column->derivedColumn,$original_row);
            }
        }
    }
    return $node->data;
}

/**
 * Function will convert the order by to a SQL clause
 * @param $node
 * @return array
 */
function _prepare_order_by($node) {
    $orderBy = "";

    if (isset($node->widgetConfig->orderBy)) {
        foreach ($node->widgetConfig->orderBy as $value) {
            if(substr($value, 0, 1 ) == "-") {
                $value = ltrim($value, "-");
                $orderBy .= $orderBy == "" ? "{$value} DESC" : ",{$value} DESC";
            }
            else {
                $orderBy .= $orderBy == "" ? $value : ",{$value}";
            }
        }
    }
    return $orderBy;
}

/**
 * Function will populate the parameter array with values that
 * exist in both the list of validUrlParameters and the query string
 * @param $node
 * @return array
 */
function _prepare_input_parameters($node) {
    $parameters = array();

    if (isset($node->widgetConfig->defaultParameters)) {
        foreach ($node->widgetConfig->defaultParameters as $key => $value) {
            $values_array = explode('~',$value);
            $value = count($values_array) > 1 ? "(".implode(",", $values_array).")" : $value;
            $parameters[$key] = htmlspecialchars_decode(_replace_special_characters_decode($value));
        }
    }
    if (isset($node->widgetConfig->validUrlParameters)) {
        $urlParams = $node->widgetConfig->validUrlParameters;
        $urlPath = drupal_get_path_alias($_GET['q']);
        $pathParams = explode('/', $urlPath);
        for($i = 0; $i < count($pathParams); $i = $i + 1) {
            $key = $pathParams[$i];
            $value = $pathParams[$i+1];
            if(in_array($key,$urlParams)) {
                $values_array = explode('~',$value);
                $value = count($values_array) > 1 ? "(".implode(",", $values_array).")" : $value;
                $parameters[$key] = htmlspecialchars_decode(_replace_special_characters_decode($value));
            }
        }
    }
    return $parameters;
}

function widget_controller_config($node) {
	//save
	if (isset($node->widgetConfig->uid)) {
		$savedUid = $node->widgetConfig->uid;
	}
	$FUNCTION_START = '<function>';
	$FUNCTION_END = '</function>';
	$PLACEHOLDER_START = '"function":"';
	$PLACEHOLDER_END = '"';
	$FUNCTION_DELIMITER = '##';
	$FUNCTIONNAME_DELIMITER = '^^';

	$functionStart = strpos($node->widget_json,$FUNCTION_START);
	if ($functionStart != false) {
		$functionEnd = strpos($node->widget_json, $FUNCTION_END);
		$functions = substr($node->widget_json, $functionStart+ drupal_strlen($FUNCTION_START), $functionEnd - $functionStart - drupal_strlen($FUNCTION_START));
		$funcList = explode($FUNCTION_DELIMITER, $functions);
		$functionMap = array();
		foreach ($funcList as $jsFunction) {
			$keyVal = explode($FUNCTIONNAME_DELIMITER, $jsFunction);
			$functionMap[str_replace("\r\n", "", $keyVal[0])] = $keyVal[1];
		}
		unset($jsFunction);
		$node->jsFunctions = $functionMap;
		$json = str_replace($FUNCTION_START.$functions.$FUNCTION_END, '', $node->widget_json);

	} else {
		$json = $node->widget_json;
	}
	$converter = new Json2PHPObject();


	$node->widgetConfig = $converter->convert($json);

	//restore
	if (isset($savedUid)) {
		$node->widgetConfig->uid = $savedUid;
	}
    $node->widgetConfig->legacy_node_id = $node->legacy_node_id;
	return $node->widgetConfig;
}


/**
 * Returns JSON file after merging in the js functions
 */
function widget_controller_mergeJSFunctions($node, $phpArray) {
	$PLACEHOLDER_START = '"function":"';
	$PLACEHOLDER_END = '"';
	$json = json_encode($phpArray);
	if (isset($node->jsFunctions)) {
		foreach ($node->jsFunctions as $key => $value) {

			$replace = $PLACEHOLDER_START. trim($key) . $PLACEHOLDER_END;
			$json = str_replace($replace, $value, $json);
		}
	}
	return $json;
}
/***************************************/
/* Functions to support same widget    */
/* on the same page                    */
/***************************************/

function widget_controller_set_uid(&$node, $uid) {
	$node->widgetConfig->uid = $uid;
}

function widget_controller_add_additional_parameters(&$node, $parameters) {
	$node->widgetConfig->additionalParameters = $parameters;
}

/***************************************/
/* Common naming functions             */
/***************************************/

function widget_controller_unique_identifier($node) {
	$uid = $node->nid;
	if (isset($node->widgetConfig->uid)) {
		$uid .= "_" . $node->widgetConfig->uid;
	}
	return $uid;
}

function widget_controller_get_div_name($node) {
	return "widgetdiv" . widget_controller_unique_identifier($node);
}

function widget_controller_get_widget_event_function_name($node) {
	return "widget" . widget_controller_unique_identifier($node) . "Event";
}

function widget_controller_get_widget_callback_function_name($node) {
	return "widget" . widget_controller_unique_identifier($node) . "Callback";
}

function widget_controller_get_updated_data_function_name($node) {
	return "widget" . widget_controller_unique_identifier($node) . "UpdateData";
}

function widget_controller_get_widget_exclude_params_name($node) {
	return "widget" . widget_controller_unique_identifier($node) . "ExcludeParams";
}

function widget_controller_get_widget_additional_params_name($node) {
	return "widget" . widget_controller_unique_identifier($node) . "AdditionalParams";
}

/***************************************/
/* Content building utility functions  */
/***************************************/

function widget_controller_open_div($node) {
	$output  = "<div ";
	$output .= "id=\"" . widget_controller_get_div_name($node) . "\" ";
	$output .= "class=\"" . $node->widgetConfig->class . "\" ";
	$output .= "style=\"" . $node->widgetConfig->style . "\" ";
	if (isset($node->widgetConfig->title)) {
		$output .= "title='" . $node->widgetConfig->title . "' ";
	}
	$titleColumn = $node->widgetConfig->titleColumn;
	if (isset($node->widgetConfig->$titleColumn)) {
		if (isset($node->widgetConfig->$titleColumn)) {
			$output .= "title='" . $node->widgetConfig->$titleColumn . "' ";
		}
	}
	$output .= ">\n";
	return $output;
}

function widget_controller_close_div($node) {
	return "</div>\n";
}

function widget_controller_event_function($node) {
	$output  = "function " . widget_controller_get_widget_event_function_name($node) . "(val) {\n";
	$output .= "  widgetCoordinator.notify(new ParameterChangeEvent('" . $node->widgetConfig->clickParameterName . "', val));";
	$output .= $node->widgetConfig->customEventJavascript . "\n";
	$output .= "}\n";
	return $output;
}

function widget_controller_callback_function($node) {
	$output  = "function " . widget_controller_get_widget_callback_function_name($node) . "(event) {\n";
	$output .= widget_controller_get_updated_data_function_name($node) . "();\n";
	$output .= $node->widgetConfig->customCallbackJavascript . "\n";
	$output .= "}\n";
	return $output;
}

function widget_controller_attach_to_widget_controller($node) {
	$output = "widgetCoordinator.attach(" . widget_controller_get_widget_callback_function_name($node) . ");\n";
	return $output;
}

function widget_controller_define_exclude_params($node) {
	$output = "var " . widget_controller_get_widget_exclude_params_name($node) . " = [";
	if (isset($node->widgetConfig->excludeParams)) {
		$i = 0;
		foreach ($node->widgetConfig->excludeParams as $param) {
			if ($i != 0) {
				$output .= ", ";
			}
			$output .= "'" . $param . "'";
			$i++;
		}
	}
	$output .= "];\n";
	return $output;
}

function widget_controller_define_additional_params($node) {
	$output = "var " . widget_controller_get_widget_additional_params_name($node) . ";\n";
	if (isset($node->widgetConfig->additionalParameters)) {
		$output .= widget_controller_get_widget_additional_params_name($node) . " = jQuery.parseJSON('" . json_encode($node->widgetConfig->additionalParameters) . "');\n";
	}
	return $output;
}

function widget_controller_cleanurlparams_as_string($node) {
	$requestParams = '';
	if ($node->widgetConfig->cleanURLParameters && $node->widgetConfig->requestParams) {
		foreach ($node->widgetConfig->requestParams as $key => $value) {
			if (in_array($key, $node->widgetConfig->cleanURLParameters)) {
				$requestParams .= $key . "=" . $value . "&";
			}
		}
		$requestParams = substr($requestParams, 0, -1);
	}
	return $requestParams;
}

function _replace_special_characters_decode($string){
	$string = str_replace('__','/',$string);
    return str_replace('^^','.',$string);
}

function widget_controller_update_dataset_datasource($datasetName,$keepOriginalDatasource = false){
	if($keepOriginalDatasource == true){
		return $datasetName;
	}	
    $database = _getRequestParamValue('datasource');
    if(isset($database)){
        $database = str_replace("checkbook:", "checkbook_oge:",$datasetName);
    }else{
        $database = $datasetName;
    }
    return $database;
}

function widget_controller_update_node_data($data,$keepOriginalDatasource = false){
	if($keepOriginalDatasource == true){
		return $data;
	}	
    $returnData = array();
    foreach($data as $key=>$value){
         $arrayValues = array();
         foreach($value as $a=>$b){
             $a = str_replace('@checkbook_oge:',"@checkbook:",$a);
             $arrayValues[$a] = $b;
         }
        $returnData[$key] = $arrayValues;
     }

    return $returnData;
}

function widget_controller_update_columns_by_datasource($node_columns, $datasource_mapping = null, $keepOriginalDatasource= false){
	if($keepOriginalDatasource == true){
		return $node_columns;
	}
    $columns = array();
    $database = _getRequestParamValue('datasource');
    $datasource_mapping = ($datasource_mapping != null) ? get_object_vars($datasource_mapping) : null;
    foreach($node_columns as $column){
        if($datasource_mapping == null){
            array_push($columns, widget_controller_update_dataset_datasource($column));
        }else{
            if(!array_key_exists($column, $datasource_mapping)){
                array_push($columns, widget_controller_update_dataset_datasource($column));
            }
            else if(array_key_exists($column, $datasource_mapping) && $datasource_mapping[$column] == $database){
                array_push($columns, widget_controller_update_dataset_datasource($column));
            }
        }
    }
    return $columns;
}


function widget_controller_get_current_datasource(){
	$datasource = _getRequestParamValue('datasource');
	if(isset($datasource)){
		return $datasource;
	}else{
		return widget_controller_get_default_datasource();
	}
}


function widget_controller_get_default_datasource(){
	return "checkbook";
}



function _widget_controller_build_sql_condition($column, $value){

	$values_array = explode('~',$value);
	if(count($values_array) > 1){
		return  $column . ' in ' . '(\'' . implode('\',\'', $values_array) . '\')';
	}else{
		return  $column . '=' . '\'' . $value . '\'';
	}
	
}


function _widget_controller_join_merge_data($array1,$array2, $keys = array()){
	foreach($array1 as $row1_key=>$row1){
		foreach($array2 as $row2){
			$merge = true;
			foreach($keys as $key){
				if($row1[$key] != $row2[$key]) $merge = false;
			}
			if($merge){
				foreach($row2 as $row2_key=>$value){
					if(!in_array($row2_key,$keys)){
						$array1[$row1_key][$row2_key] += $value;
					}
				}
			}
			
		}
	}	
	return $array1;
	
}


