<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
*
* Copyright (C) 2012, 2013 New York City
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/pattern/AbstractObject.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/object/comparator/Comparator.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/object/comparator/handler/AbstractComparator.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/object/comparator/handler/AbstractValueComparator.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/object/comparator/handler/PropertyBasedComparator.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/object/comparator/handler/DefaultPropertyBasedComparator.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/common/object/exception/UnsupportedOperationException.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/datasource/formatter/ResultFormatter.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) . '/datasource/formatter/handler/SpecialCharacterResultFormatter.php');

require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/DataConverter.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/handler/AbstractDataConverter.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/handler/AbstractJson2PHP.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/handler/PHP2Json.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/handler/AbstractJson2PHP.php');
require_once(realpath(drupal_get_path('module', 'data_controller')) .'/common/object/converter/handler/Json2PHP.php');

require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/budget/BudgetUrlService.php');
require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/budget/BudgetWidgetService.php');
require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/budget/data/IBudgetDataService.php');
require_once(realpath(drupal_get_path('module', 'checkbook_services')) .'/budget/data/BudgetDataService.php');

/***************************************/
/* Implementation of Widget Node Type  */
/***************************************/

function widget_controller_menu(){
  $items['widget_controller_ajax_data/node/%widget_controller/%'] = array(
      'page callback' => 'widget_controller_ajax_get_node',
      'page arguments' => array(2),
      'access callback' => true,
      'type'=>MENU_CALLBACK
  );


  $items['widget_controller/%'] = array(
  		'page callback' => '_widget_controller_node_view_page',
  		'page arguments' => array(1),
  		'access callback' => true,
  		'type'=>MENU_CALLBACK
  );

  return $items;
}



function widget_controller_load($key){
	if($node == null){
		$node = _widget_controller_node_load_file($key);
	}

	return $node;
}


function _widget_controller_node_load($key, $type='node'){
    return _widget_controller_node_load_file($key);
}

/*
 * Custom hook for new widget controller
 */
function _widget_controller_node_view($key){
    $viewName = WidgetController::getInstance()->getWidgetViewConfigName($key);
    if(!isset($viewName)) return;
    $legacy_node_id = WidgetController::getInstance()->getWidgetLegacyNodeId($key);
    $param_config = WidgetController::getInstance()->getWidgetParamConfig($key);
    $node = _widget_controller_node_load_file($viewName);
    $node = widget_merge_default_settings($node);
    $node->legacy_node_id = $legacy_node_id;
    $node->param_config = $param_config;
    $node = widget_controller_node_view($node);
    echo $node->content['body']['#markup'];
}

function _widget_controller_node_view_page($key){
    $node = _widget_controller_node_load_file($key);
    $node = widget_merge_default_settings($node);
    $node = widget_controller_node_view($node);
    return $node->content['body']['#markup'];
}

function widget_merge_default_settings($node){
    $widgetConfig = widget_merge_default_settings_recursively($node,'default_settings');
    $node->widget_json = $widgetConfig->widget_json;
    return $node;
}

function widget_merge_default_settings_recursively($widgetConfig,$defaultConfigKey){

    if(isset($defaultConfigKey)) {
        $defaultWidgetConfig = _widget_controller_node_load_file($defaultConfigKey);
        $converter = new Json2PHPObject();
        $widgetJson =  $converter->convert($widgetConfig->widget_json);
        $defaultWidgetJson = $converter->convert($defaultWidgetConfig->widget_json);
        $mergedWidgetJson = drupal_array_merge_deep($defaultWidgetJson, $widgetJson);
        $widgetConfig->widget_json = json_encode($mergedWidgetJson);
        $defaultConfigKey = $mergedWidgetJson['defaultConfigKey'] == $defaultConfigKey ? null : $mergedWidgetJson['defaultConfigKey'];
        return widget_merge_default_settings_recursively($widgetConfig,$defaultConfigKey);
    }
    return $widgetConfig;
}

function _widget_controller_node_load_file($key){
	$node =  new stdClass();
	$node->type = "widget_controller";
    $files = file_scan_directory( drupal_get_path('module','checkbook_view_configs') , '/^'.$key.'\.json$/');
      if(count($files) > 0){
        $file_names = array_keys($files);
        $json = file_get_contents($file_names[0]);
        $node->widget_json =  $json;
      }
    if($node->nid == null){
    	$node->nid = $key;
    }
    return $node;
}

function widget_controller_node_validate(&$node) {
	if($node->type != 'widget_controller')
		return ;

	widget_controller_config($node);
}

function widget_controller_node_view($node, $nodata = true) {

	if($node->type != 'widget_controller')
		return ;

	//make sure configuration is loaded
	widget_controller_config($node);

	//prepare anything we'll need before loading
	widget_controller_prepare($node);

	//invoke widget specific prepare
	widget_controller_invoke($node, 'widget_controller_prepare');

	//load data
	if(($node->widgetConfig->noDataInitialLoad == null || !$node->widgetConfig->noDataInitialLoad) || !$nodata ){
	    widget_controller_data($node);
	}

	if (isset($node->error)) {
		//dont call the specific module. Display generic error message and return
		//message needs to be set on the widget configuration. not hardcoded.
		$errorMsg = 'There was an error processing your request. Please try again in a few minutes.';
		$node->content['body'] = array(
                  '#value' => $errorMsg,
                  '#weight' => 0,
		);
		return $node;
	}

	//invoke widget specific post-load function
    widget_controller_invoke($node, 'widget_controller_data');

	if ($node->widgetConfig->dataOnly) {
		$node->content['body'] = array(
			'#value' => $node->data,
			'#weight' => 0,
		);
	}
	else {
		$val = widget_controller_invoke($node, 'widget_controller_view');
		$node->content['body'] = array(
			'#markup' => $val,
			'#weight' => 0,
		);
	}
	return $node;
}

/***************************************/
/* Introduction of Widget Hooks        */
/***************************************/

function widget_controller_hook(&$node, $hook) {
	$module = widget_controller_get_types('module', $node);
	if ($module == 'widget_controller') {
		$module = 'widget_controller_content'; // Avoid function name collisions.
	}
	return module_hook($module, $hook);
}

function widget_controller_invoke(&$node, $hook, $a2 = NULL, $a3 = NULL, $a4 = NULL) {
	if (widget_controller_hook($node, $hook)) {
		$module = widget_controller_get_types('module', $node);
		if ($module == 'widget controller') {
			$module = 'widget_controller_content'; // Avoid function name collisions.
		}
		$function = $module .'_'. $hook;
		return ($function($node, $a2, $a3, $a4));
	}
}

function widget_controller_get_types($op = 'types', $node = NULL, $reset = FALSE) {
	static $_widget_types, $_widget_names;

	if ($reset || (!isset($_widget_types) || empty($_widget_types))) {
		list($_widget_types, $_widget_names) = _widget_controller_types_build();
	}

	if ($node) {
		if (is_object($node)) {
			$type = $node->widgetConfig->widgetType;
		}

		if (!isset($_widget_types[$type])) {
			return FALSE;
		}
	}
	switch ($op) {
		case 'types':
			return $_widget_types;
		case 'type':
			return isset($_widget_types[$type]) ? $_widget_types[$type] : FALSE;
		case 'module':
			return isset($_widget_types[$type]->module) ? $_widget_types[$type]->module : FALSE;
		case 'names':
			return $_widget_names;
		case 'name':
			return isset($_widget_names[$type]) ? $_widget_names[$type] : FALSE;
	}
}

function _widget_controller_types_build() {
	$_widget_types = array();
	$_widget_names = array();

	$info_array = module_invoke_all('widget_controller_metadata');
	foreach ($info_array as $type => $info) {
		$info['type'] = $type;
		$_widget_types[$type] = (object) _widget_controller_type_set_defaults($info);
		$_widget_names[$type] = $info['name'];
	}

	asort($_widget_names);

	return array($_widget_types, $_widget_names);
}

function _widget_controller_type_set_defaults($info) {
	//currently we have no default values to set
	return $info;
}

/***************************************/
/* Default Implementation of Core      */
/***************************************/

function widget_controller_prepare(&$node) {
}

/**
 * Function will get the count used in the header text of the widget as well
 * as the total row count for the footer rendering.  By if no separate sql
 * specified for the header, the default total row count is used
 * @param $node
 */
function load_widget_controller_data_count($node) {

    //Prepare service
    $service = _widget_controller_load_data_service($node);

    //Prepare sql parameters
    $parameters = _prepare_input_parameters($node);

    //Adjust sql parameters
    $urlPath = $_GET['q'];
    $parameters = $service->adjustParameters($parameters, $urlPath);

    //Load widget total row count
    try {
        $node->totalDataCount = _load_widget_controller_row_count($service, $parameters);
    }
    catch(Exception $e) {
        log_error("Error getting total row count: \n" . $e->getMessage()/*, $e*/);
        $node->error = $e;
        return;
    }

    //Load widget header count
    try {
        $node->headerCount = _load_widget_controller_header_count($service, $parameters);
        if(!isset($node->headerCount))
            $node->headerCount = $node->totalDataCount;
    }
    catch(Exception $e) {
        log_error("Error getting header count: \n" . $e->getMessage()/*, $e*/);
        $node->error = $e;
        return;
    }
}

/**
 * Function to load the widget data
 * @param $node
 */
function widget_controller_data(&$node) {

    //Prepare service
    $service = _widget_controller_load_data_service($node);

    //Load widget data
    _load_widget_controller_data($node, $service);

    //Format widget data
    $node->data = _widget_controller_format_widget_data($node, $service);
}


/**
 * Returns the service used to fetch widget data
 *
 * @param $node
 * @return null
 */
function _widget_controller_load_data_service($node) {

    $service = null;
    if(isset($node->widgetConfig)) {
        //TODO: Use service factory
        $serviceName = $node->widgetConfig->serviceName;
        //todo: update existing widget configs
        $serviceName = !isset($serviceName) ? "ContractsWidgetService" : $serviceName;
        $service = new $serviceName($node->widgetConfig);
    }
    return $service;
}

/**
 * Function loads the widget data
 * @param $node
 * @param $service
 */
function _load_widget_controller_data($node, $service) {

    $results = null;
    $orderBy = _prepare_order_by($node);
    $limit = $node->widgetConfig->limit;
    $parameters = _prepare_input_parameters($node);

    //Adjust sql parameters
    $urlPath = $_SERVER['HTTP_REFERER'];
    $parameters = $service->adjustParameters($parameters, $urlPath);

    try {
        $results = $service->getWidgetData($parameters, $limit, $orderBy);
    }
    catch(Exception $e) {
        log_error("Error getting data from the controller: \n" . $e->getMessage()/*, $e*/);
        $node->error = $e;
        return;
    }
    $node->data = $results;
    $node->nodeAdjustedParamaterConfig = $parameters;
}

/**
 * Function set the the count for the widget header text
 * @param $service
 * @param $parameters
 * @return mixed
 */
function _load_widget_controller_header_count($service, $parameters) {
    $results = $service->getWidgetHeaderCount($parameters);
    return $results;
}

/**
 * Function gets actual widget data row count
 * @param $service
 * @param $parameters
 * @return mixed
 */
function _load_widget_controller_row_count($service, $parameters) {
    $results = $service->getWidgetDataCount($parameters);
    return $results;
}

/**
 * Loads the footer Url
 * @param $node
 * @return mixed
 */
function _widget_controller_footer_url($node) {
    $parameters = _prepare_input_parameters($node);
    $service = _widget_controller_load_data_service($node);
    $url = $service->getWidgetFooterUrl($parameters);
    return $url;
}

/**
 * Function will go through all columns in the table_columns config and apply all formatting to the data
 * @param $node
 * @param $service
 * @return mixed
 * @throws Exception
 */
function _widget_controller_format_widget_data($node, $service){
    $formatColumns = array_filter($node->widgetConfig->table_columns,
        function($value) {
            return isset($value->format);
        });
    $tooltipColumns = array_filter($node->widgetConfig->table_columns,
        function($value) {
            return isset($value->tooltip);
        });
    $derivedColumns = array_filter($node->widgetConfig->table_columns,
        function($value) {
            return isset($value->derivedColumn);
        });

    if(count($formatColumns) > 0 || count($tooltipColumns) > 0 || count($derivedColumns) > 0) {
        foreach($node->data as $key=>&$columnArray) {

            //Handle special characters
            array_walk($columnArray, function (&$value) {
                $value = htmlentities($value);
            });
            //formatting
            foreach($formatColumns as $column) {
                switch($column->format) {
                    case "dollar":
                        $node->data[$key][$column->column] = custom_number_formatter_format($node->data[$key][$column->column],2,'$');
                        break;
                    case "date":
                        $node->data[$key][$column->column] = custom_date_format($node->data[$key][$column->column]);
                        break;
                    case "number":
                        $node->data[$key][$column->column] = number_format($node->data[$key][$column->column]);
                        break;
                    case "percent":
                        $node->data[$key][$column->column] = number_format($node->data[$key][$column->column],2) . '%';
                        break;
                }
            }
            //tooltip
            foreach($tooltipColumns as $column) {
                $node->data[$key][$column->column] = _get_tooltip_markup($node->data[$key][$column->column], $column->tooltip);
            }
            //derived
            $original_row = $node->data[$key];
            foreach($derivedColumns as $column) {
                $node->data[$key][$column->column] = $service->implementDerivedColumn($column->derivedColumn,$original_row);
            }
        }
    }
    return $node->data;
}

/**
 * Function will convert the order by to a SQL clause
 * @param $node
 * @return string
 */
function _prepare_order_by($node) {
    $orderBy = "";

    if (isset($node->widgetConfig->orderBy)) {
        foreach ($node->widgetConfig->orderBy as $value) {
            if(substr($value, 0, 1 ) == "-") {
                $value = ltrim($value, "-");
                $orderBy .= $orderBy == "" ? "{$value} DESC" : ",{$value} DESC";
            }
            else {
                $orderBy .= $orderBy == "" ? $value : ",{$value}";
            }
        }
    }
    return $orderBy;
}

/**
 * Function will populate the parameter array with values that
 * exist in both the list of validUrlParameters and the query string
 * @param $node
 * @return array
 */
function _prepare_input_parameters($node) {
    $parameters = array();

    if (isset($node->widgetConfig->defaultParameters)) {
        foreach ($node->widgetConfig->defaultParameters as $key => $value) {
            $values_array = explode('~',$value);
            $value = count($values_array) > 1 ? "(".implode(",", $values_array).")" : $value;
            $parameters[$key] = htmlspecialchars_decode(_replace_special_characters_decode($value));
        }
    }
    if (isset($node->widgetConfig->validUrlParameters)) {
        $urlParams = $node->widgetConfig->validUrlParameters;
        $urlPath = drupal_get_path_alias($_GET['q']);
        $pathParams = explode('/', $urlPath);
        for($i = 0; $i < count($pathParams); $i = $i + 1) {
            $key = $pathParams[$i];
            $value = $pathParams[$i+1];
            if(in_array($key,$urlParams)) {
                $values_array = explode('~',$value);
                $value = count($values_array) > 1 ? "(".implode(",", $values_array).")" : $value;
                $parameters[$key] = htmlspecialchars_decode(_replace_special_characters_decode($value));
            }
        }
    }
    return $parameters;
}

function widget_controller_config($node) {
	//save
	if (isset($node->widgetConfig->uid)) {
		$savedUid = $node->widgetConfig->uid;
	}
	$FUNCTION_START = '<function>';
	$FUNCTION_END = '</function>';
	$PLACEHOLDER_START = '"function":"';
	$PLACEHOLDER_END = '"';
	$FUNCTION_DELIMITER = '##';
	$FUNCTIONNAME_DELIMITER = '^^';

	$functionStart = strpos($node->widget_json,$FUNCTION_START);
	if ($functionStart != false) {
		$functionEnd = strpos($node->widget_json, $FUNCTION_END);
		$functions = substr($node->widget_json, $functionStart+ drupal_strlen($FUNCTION_START), $functionEnd - $functionStart - drupal_strlen($FUNCTION_START));
		$funcList = explode($FUNCTION_DELIMITER, $functions);
		$functionMap = array();
		foreach ($funcList as $jsFunction) {
			$keyVal = explode($FUNCTIONNAME_DELIMITER, $jsFunction);
			$functionMap[str_replace("\r\n", "", $keyVal[0])] = $keyVal[1];
		}
		unset($jsFunction);
		$node->jsFunctions = $functionMap;
		$json = str_replace($FUNCTION_START.$functions.$FUNCTION_END, '', $node->widget_json);

	} else {
		$json = $node->widget_json;
	}
	$converter = new Json2PHPObject();


	$node->widgetConfig = $converter->convert($json);

	//restore
	if (isset($savedUid)) {
		$node->widgetConfig->uid = $savedUid;
	}
    $node->widgetConfig->legacy_node_id = $node->legacy_node_id;
    $node->widgetConfig->param_config= $node->param_config;
	return $node->widgetConfig;
}

/***************************************/
/* Common naming functions             */
/***************************************/

function widget_controller_unique_identifier($node) {
	$uid = $node->nid;
	if (isset($node->widgetConfig->uid)) {
		$uid .= "_" . $node->widgetConfig->uid;
	}
	return $uid;
}

/***************************************/
/* Content building utility functions  */
/***************************************/

function _replace_special_characters_decode($string){
	$string = str_replace('__','/',$string);
    return str_replace('^^','.',$string);
}


