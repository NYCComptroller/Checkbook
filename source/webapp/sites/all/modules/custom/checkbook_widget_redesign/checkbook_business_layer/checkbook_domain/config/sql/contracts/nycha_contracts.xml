<statements>

  <!--GetNychaVendors-->

  <statement name="GetContractsByVendors" datasource="checkbook_nycha">
    <param name="year" required="true" type="int"/>
    <param name="vendor" type="int"/>
    <sql>
      SELECT
        vendor_name,
        vendor_id,
        SUM(purchase_order_count) AS purchase_order_count,
        SUM(spend_to_date) AS spend_to_date,
        SUM(total_amount) AS total_amount,
        SUM(original_amount) AS original_amount
      FROM contracts_fy_po_vendor_summary_vw c
      JOIN ref_year y ON c.start_year = y.year_value
      JOIN ref_year y1 ON c.end_year = y1.year_value
      <where>
        <exp op="AND">
          <exp op="BETWEEN" paramName="year" dbField="y.year_id, y1.year_id"/>
          <exp op="=" dbField="vendor_id" paramName="vendor"/>
        </exp>
      </where>
      GROUP BY vendor_id, vendor_name
    </sql>
  </statement>

  <!--GetNychaAwardMethods-->

  <statement name="GetContractsByAwardMethods" datasource="checkbook_nycha">
    <param name="year" required="true" type="int"/>
    <sql>
      SELECT
        award_method_id,
        award_method_name,
        SUM(purchase_order_count) AS purchase_order_count,
        SUM(total_amount) AS total_amount,
        SUM(original_amount) AS original_amount,
        SUM(spend_to_date) AS spend_to_date
      FROM contracts_fy_award_method_summary_vw c
      JOIN ref_year y ON c.start_year = y.year_value
      JOIN ref_year y1 ON c.end_year = y1.year_value
      <where>
        <exp op="AND">
          <exp op="BETWEEN" paramName="year" dbField="y.year_id, y1.year_id"/>
        </exp>
      </where>
      GROUP BY award_method_name, award_method_id
    </sql>
  </statement>

  <!--GetNychaPurchaseOrders-->

  <statement name="GetContractsByPurchaseOrders" datasource="checkbook_nycha">
    <param name="year" required="true" type="int"/>
    <param name="vendor" type="int"/>
    <sql>
      SELECT
        contract_id,
        purpose,
        vendor_name,
        SUM(release_line_total_amount) AS total_amount,
        SUM(release_line_original_amount) AS original_amount,
        SUM(release_line_spend_to_date) AS spend_to_date
      FROM all_agreement_transactions
      <where>
        <exp op="AND">
          <exp op="=" dbField="release_approved_year_id" paramName="year"/>
          <exp op="=" dbField="vendor_id" paramName="vendor"/>
          <exp op="=" dbField="agreement_type_code">'PO'</exp>
        </exp>
      </where>
      GROUP BY  contract_id, purpose, vendor_name
    </sql>
  </statement>

  <!-- GetContractsByBoroughs -->

  <statement name="GetContractsByBoroughs" datasource="checkbook_nycha">
    <param name="year" required="true" type="int"/>
    <param name="vendor" type="int"/>
    <sql>
      SELECT
        location_borough_name,
        SUM(purchase_order_count) AS purchase_order_count,
        SUM(total_amount) AS total_amount,
        SUM(original_amount) AS original_amount,
        SUM(spend_to_date) AS spend_to_date
      FROM contracts_fy_borough_summary_vw
      <where>
        <exp op="AND">
          <exp op="BETWEEN" paramName="year" dbField="start_year, end_year"/>
          <exp op="=" dbField="vendor_id" paramName="vendor"/>
        </exp>
      </where>
      GROUP BY location_borough_name
    </sql>
  </statement>

  <!-- GetGrants -->

  <statement name="GetContractsByGrants" datasource="checkbook_nycha">
    <param name="year" required="true" type="int"/>
    <param name="vendor" type="int"/>
    <sql>
      SELECT
        grant_id,
        grant_name,
        SUM(purchase_order_count) AS purchase_order_count,
        SUM(total_amount) AS total_amount,
        SUM(original_amount) AS original_amount,
        SUM(spend_to_date) AS spend_to_date
      FROM contracts_fy_grant_summary_vw
      <where>
        <exp op="AND">
          <exp op="BETWEEN" paramName="year" dbField="start_year, end_year"/>
          <exp op="=" dbField="vendor_id" paramName="vendor"/>
        </exp>
      </where>
      GROUP BY grant_id, grant_name
    </sql>
  </statement>

  <!--GetNychaBlanketAgreements-->

  <statement name="GetContractsBlanketAgreements" datasource="checkbook_nycha">
    <param name="year" required="true"/>
    <param name="vendor" type="int"/>
    <param name="is_modification" type="bool"/>
    <sql>
      SELECT
        contract_id,
        purpose,
        vendor_name,
        SUM(total_amount) AS total_amount,
        SUM(original_amount) AS original_amount,
        SUM(spend_to_date) AS spend_to_date,
        SUM(amount_difference) AS dollar_difference,
        AVG(percent_difference) AS percent_difference
      FROM contract_agreements_fy_vendor c
      JOIN ref_year y ON c.start_year = y.year_value
      JOIN ref_year y1 ON c.end_year = y1.year_value
      <where>
        <exp op="AND">
          <!--WHERE  '2016' BETWEEN start_year AND end_year-->
          <exp op="BETWEEN" paramName="year" dbField="y.year_id, y1.year_id"/>
          <exp op="=" dbField="agreement_type_code">'BA'</exp>
          <exp op="=" dbField="vendor_id" paramName="vendor"/>
        </exp>
      </where>
      <exp op="IF" condition="=" paramName="is_modification" compareValue="true">
        AND amount_difference != 0
      </exp>
      GROUP BY  contract_id, purpose, vendor_name
    </sql>
  </statement>

  <!--GetNychaPlannedAgreements-->

  <statement name="GetContractsPlannedAgreements" datasource="checkbook_nycha">
    <param name="year" required="true"/>
    <param name="vendor" type="int"/>
    <param name="is_modification" type="bool"/>
    <sql>
      SELECT
        contract_id,
        purpose,
        vendor_name,
        SUM(total_amount) AS total_amount,
        SUM(original_amount) AS original_amount,
        SUM(spend_to_date) AS spend_to_date,
        SUM(amount_difference) AS dollar_difference,
        AVG(percent_difference) AS percent_difference
      FROM contract_agreements_fy_vendor c
      JOIN ref_year y ON c.start_year = y.year_value
      JOIN ref_year y1 ON c.end_year = y1.year_value
      <where>
        <exp op="AND">
          <!--WHERE  '2016' BETWEEN start_year AND end_year-->
          <exp op="BETWEEN" paramName="year" dbField="y.year_id, y1.year_id"/>
          <exp op="=" dbField="agreement_type_code">'PA'</exp>
          <exp op="=" dbField="vendor_id" paramName="vendor"/>
        </exp>
      </where>
      <exp op="IF" condition="=" paramName="is_modification" compareValue="true">
        AND amount_difference != 0
      </exp>
      GROUP BY  contract_id, purpose, vendor_name
    </sql>
  </statement>

  <!--GetDepartment-->

  <statement name="GetContractsByDepartments" datasource="checkbook_nycha">
    <param name="year" required="true" type="int"/>
    <sql>
      SELECT
        department_id,
        department_name,
        SUM(purchase_order_count) AS purchase_order_count,
        SUM(total_amount) AS total_amount,
        SUM(original_amount) AS original_amount,
        SUM(spend_to_date) AS spend_to_date
      FROM contracts_fy_department_summary_vw  c
      JOIN ref_year y ON c.start_year = y.year_value
      JOIN ref_year y1 ON c.end_year = y1.year_value
      <where>
        <exp op="AND">
          <exp op="BETWEEN" paramName="year" dbField="y.year_id, y1.year_id"/>
        </exp>
      </where>
      GROUP BY department_id, department_name
    </sql>
  </statement>

  <!-- GetContractsByIndustries -->

  <statement name="GetContractsByIndustries" datasource="checkbook_nycha">
    <param name="year" required="true" type="int"/>
    <param name="vendor" type="int"/>
    <sql>
      SELECT
        industry_type_name,
        industry_type_id,
        SUM(purchase_order_count) AS purchase_order_count,
        SUM(total_amount) AS total_amount,
        SUM(original_amount) AS original_amount,
        SUM(spend_to_date) AS spend_to_date
      FROM contracts_fy_industry_summary_vw c
      JOIN ref_year y ON c.start_year = y.year_value
      JOIN ref_year y1 ON c.end_year = y1.year_value
      <where>
        <exp op="AND">
          <exp op="BETWEEN" paramName="year" dbField="y.year_id, y1.year_id"/>
        </exp>
      </where>
      GROUP BY industry_type_id,industry_type_name
    </sql>
  </statement>

  <!-- GetCountContracts -->

  <statement name="GetCountContracts" datasource="checkbook_nycha">
    <param name="year" required="true" type="int"/>
    <sql>
      SELECT DISTINCT contract_id FROM all_agreement_transactions
      <where>
        <exp op="AND">
          <exp op="=" dbField="release_approved_year_id" paramName="year"/>
          <exp op="IN" dbField="transaction_status_name" paramName="transaction_status_name">('APPROVED','CLOSED','FINALLY CLOSED')</exp>
        </exp>
      </where>
    </sql>
  </statement>

  <!-- GetContractsBySize -->

  <statement name="GetContractsBySize" datasource="checkbook_nycha">
    <param name="year" required="true" type="int"/>
    <param name="vendor" type="int"/>
    <sql>
      SELECT
        award_size_name,
        SUM(purchase_order_count) AS po_count,
        SUM(total_amount) AS total_amount,
        SUM(original_amount) AS original_amount,
        SUM(spend_to_date) AS spend_to_date
      FROM contracts_fy_size_vw c
      JOIN ref_year y ON c.start_year = y.year_value
      JOIN ref_year y1 ON c.end_year = y1.year_value
      <where>
        <exp op="AND">
          <exp op="BETWEEN" paramName="year" dbField="y.year_id, y1.year_id"/>
        </exp>
      </where>
      GROUP BY award_size_name
    </sql>
  </statement>

  <!-- GetContractsByRespCenters -->

  <statement name="GetContractsByRespCenters" datasource="checkbook_nycha">
    <param name="year" required="true"/>
    <sql>
      SELECT
        agreement_type_code
        , transaction_category_name
        , release_approved_year
        , responsibility_center_code
        , responsibility_center_descr
        , SUM(purchase_order_count)         AS contract_count
        , SUM(total_amount)         AS total_amount
        , SUM(original_amount)     AS original_amount
        , SUM(spend_to_date)         AS spend_to_date
        , SUM(amount_difference)         AS delta_amount
      FROM contracts_fy_responsibility_centers
      <where>
        <exp op="AND">
          <exp op="IS NOT" dbField="responsibility_center_code">NULL</exp>
          <exp op="=" dbField="release_approved_year_id" paramName="year"/>
        </exp>
      </where>
      GROUP BY
        agreement_type_code
        , transaction_category_name
        , release_approved_year
        , responsibility_center_code
        , responsibility_center_descr
    </sql>
  </statement>

</statements>
