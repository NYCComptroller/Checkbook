<?php
/**
*	GNU AFFERO GENERAL PUBLIC LICENSE 
*	   Version 3, 19 November 2007
* This software is licensed under the GNU AGPL Version 3
* 	(see the file LICENSE for details)
*/


/**
 * Class to process jobs in Queue
 */
class QueueJob {

  private $jobDetails;

  private $logId;

  private $fileOutputDir;

  function __construct($jobDetails) {
    $this->jobDetails = $jobDetails;
  }

  function processJob() {

    $this->prepareFileOutputDir();
    $command = $this->getJobCommand();
    try {

      LogHelper::log_debug("{$this->logId}: Executing job command.");
      shell_exec($command);
      LogHelper::log_debug("{$this->logId}: Completed executing job command.");

      $generated_csv_file = $this->fileOutputDir . '/' . $this->getCSVFilename();

      /*if(!@chmod($generatedCSVFile,0644)){
      // TODO - check already db file is generated.
      throw new JobRecoveryException("{$this->logId}: Could not update permissions to 0644 to file $generatedCSVFile generated by db.");
      }*/

      if (!is_file($generated_csv_file) || !is_writable($generated_csv_file)) {
        $msg = "{$this->logId}: Generated CSV out put file '{$generated_csv_file}' either do not exist or not writable.";
        LogHelper::log_error($msg);
        throw new Exception($msg);
      }
      else {
        LogHelper::log_debug("{$this->logId}: Generated CSV out put file '{$generated_csv_file}'.");
      }

      $request_criteria = $this->jobDetails['request_criteria'];
      $response_format = $request_criteria['global']['response_format'];
      LogHelper::log_debug("{$this->logId}: Response file format is " . $response_format);
      $search_criteria = new SearchCriteria($request_criteria, $response_format);
      $configuration = ConfigUtil::getConfiguration($request_criteria['global']['type_of_data'], $search_criteria->getConfigKey());

      $configured_response_columns = get_object_vars($configuration->dataset->displayConfiguration->$response_format->elementsColumn);
      $response_columns = is_array($request_criteria['responseColumns']) ? $request_criteria['responseColumns'] : array_keys($configured_response_columns);

      if ($response_format == 'csv') {
        $csv_headers = '"' . implode('","', $response_columns) . '"';
        LogHelper::log_debug("{$this->logId}: csvHeaders '{$csv_headers}'.");

        $cmd = "sed -i 1i'" . $csv_headers . "' " . DRUPAL_ROOT . '/' . $generated_csv_file;
        LogHelper::log_debug("{$this->logId}: Adjusting CSV headers for file: " . $cmd);
        shell_exec($cmd);
        LogHelper::log_debug("{$this->logId}: Updated CSV headers for file.");
      }
      else {
        if ($response_format == 'xml') {
          LogHelper::log_debug("{$this->logId}: Started converting csv file : " . $generated_csv_file . ' to xml file.');
          $this->generateXMLData($generated_csv_file, $response_columns, $configuration);
          LogHelper::log_debug("{$this->logId}: Completed converting csv file : " . $generated_csv_file . ' to xml file.');
        }
      }

      // Compress output file.
      $this->generateCompressedFile($response_format);
    }
    catch (Exception $e) {
      LogHelper::log_error("{$this->logId}: Exception occured while processing job '{$this->jobDetails['job_id']}' Exception is: " . $e);
      throw new JobRecoveryException("{$this->logId}: Exception occured while processing job '{$this->jobDetails['job_id']}' Exception is :" . $e->getMessage(), $e->getCode(), $e);
    }
  }

  /**
   * @return string
   */
  private function getJobCommand() {
    global $conf;

    $file = DRUPAL_ROOT . '/' . $this->fileOutputDir . '/' . $this->prepareFileName() . '.csv';
    $command = $conf['check_book']['data_feeds']['command']
      . " -c \"\\\\COPY (" . $this->jobDetails['data_command'] . ") TO '"
      . $file
      . "'  WITH DELIMITER ',' CSV QUOTE '\\\"' ESCAPE '\\\"' \" ";

    LogHelper::log_debug("{$this->logId}: Command for job {$this->jobDetails['job_id']}:'" . $command . "'");

    return $command;
  }

  /**
   * @param $csv_file_path
   * @param $response_columns
   * @param $configuration
   * @throws JobRecoveryException
   */
  private function generateXMLData($csv_file_path, $response_columns, $configuration) {
    global $conf;

    $csv_file_handle = @fopen($csv_file_path, 'r');
    if (!$csv_file_handle) {
      $msg = "{$this->logId}: Could not get read handle to file '{$csv_file_path}' while converting to xml.";
      LogHelper::log_error($msg);
      throw new JobRecoveryException($msg);
    }

    if (ob_get_level() == 0) {
      ob_start();
    }

    $xml_file = $this->fileOutputDir . '/' . $this->getXMLFilename();
    $xml_file_handle = @fopen($xml_file, 'w');

    if (!$xml_file_handle) {
      $msg = "{$this->logId}: Could not get write handle to file '{$xml_file}' while converting to xml.";
      LogHelper::log_error($msg);
      throw new JobRecoveryException($msg);
    }

    $root_element = $configuration->dataset->displayConfiguration->xml->rootElement;
    $record_count = 0;
    // TODO - check to avoid this.
    while (($data1 = fgetcsv($csv_file_handle, 10000, ',')) !== FALSE) {
      $record_count++;
    }
    fclose($csv_file_handle);
    LogHelper::log_debug("{$this->logId}: Total Records in '{$csv_file_path}' file: {$record_count}.");

    // Write headers:
    fwrite($xml_file_handle, '<?xml version="1.0"?><response><status><result>success</result></status>');

    // Start results:
    fwrite($xml_file_handle, '<result_records><record_count>' . $record_count . '</record_count><' . $root_element . '>');

    // Write records:
    $data_records = array();
    $record_buffer_count = 0;
    $saved_buffered_records = FALSE;
    $csv_file_handle = @fopen($csv_file_path, 'r');

    $xml_configuration = $configuration->dataset->displayConfiguration->xml;
    $xml_elements_configuration = $xml_configuration->elementsColumn;

    while (($row_data = fgetcsv($csv_file_handle, 10000, ',')) !== FALSE) {
      if ($saved_buffered_records) {
        $saved_buffered_records = FALSE;
      }

      $record = array();
      $i = 0;
      foreach ($response_columns as $response_column) {
        $record[$xml_elements_configuration->$response_column] = $row_data[$i];
        $i++;
      }

      $data_records[] = $record;
      $record_buffer_count++;

      if ($record_buffer_count == 5000) {
        LogHelper::log_debug("{$this->logId}: Writing 5000 records to file.");
        $this->saveXMLData($xml_file_handle, $data_records, $response_columns, $xml_configuration);
        $saved_buffered_records = TRUE;
        $record_buffer_count = 0;
        $data_records = array();

        sleep(1);
        ob_flush();
      }
    }

    // Save any unsaved data:
    if (!$saved_buffered_records) {
      LogHelper::log_debug("{$this->logId}: Writing rest of last $record_buffer_count records to file.");
      $this->saveXMLData($xml_file_handle, $data_records, $response_columns, $xml_configuration);
    }

    // Close document:
    fwrite($xml_file_handle, '</' . $root_element . '></result_records></response>');

    fclose($csv_file_handle);
    fclose($xml_file_handle);

    ob_end_flush();

    /*if(!@chmod($xmlFile,0644)){
      LogHelper::log_error("{$this->logId}: Could not update permissions to 0644 to file $xmlFile generated by db.");
    }*/
  }

  /**
   * @param $response_format
   */
  private function generateCompressedFile($response_format) {

    $output_file = DRUPAL_ROOT . '/' . $this->fileOutputDir . '/' . $this->prepareFileName() . '.' . $response_format;
    $compress_file = $output_file . '.zip';

    $cmd = "zip -j $compress_file $output_file ";
    LogHelper::log_debug("{$this->logId}: Started compressing output file: " . $cmd);
    shell_exec($cmd);
    if (!is_file($compress_file)) {
      LogHelper::log_error("{$this->logId}: Could not generate compress file $compress_file");
    }
    /*else if(!@chmod($compressFile,0644)){
      LogHelper::log_error("{$this->logId}: Could not update permissions to 0644 to file $compressFile");
    }*/
    else {
      LogHelper::log_debug("{$this->logId}: Completed compressing output file.");
    }
  }

  /**
   * @param $xml_file_handle
   * @param $data_records
   * @param $response_columns
   * @param $xml_configuration
   */
  private function saveXMLData($xml_file_handle, $data_records, $response_columns, $xml_configuration) {
    // Save records:
    $xml_formatter = new XMLFormatter($data_records, $response_columns, $xml_configuration);
    $formatted_data = $xml_formatter->formatData();

    fwrite($xml_file_handle, $formatted_data);
  }

  /**
   * @return string
   */
  function getFilename() {
    static $app_file_name = NULL;
    if (!isset($app_file_name)) {
      $request_criteria = $this->jobDetails['request_criteria'];
      $response_format = $request_criteria['global']['response_format'];
      $app_file_name = $this->prepareFilePath() . '/' . $this->prepareFileName() . '.' . $response_format;
    }

    return $app_file_name;
  }

  /**
   * @return string
   */
  private function getCSVFilename() {
    return $db_file_name = $this->prepareFileName() . '.csv';
  }

  /**
   * @return string
   */
  private function getXMLFilename() {
    return $db_file_name = $this->prepareFileName() . '.xml';
  }

  /**
   *
   */
  private function prepareFileOutputDir() {
    global $conf;

    if (isset($this->fileOutputDir)) {
      return;
    }

    $dir = variable_get('file_public_path', 'sites/default/files')
      . '/' . $conf['check_book']['data_feeds']['output_file_dir'];

    $this->prepareDirectory($dir);

    $paths = explode('/', $this->prepareFilePath());
    foreach ($paths as $path) {
      $dir .= '/' . $path;
      $this->prepareDirectory($dir);
    }

    $this->fileOutputDir = $dir;
  }

  /**
   * @param $dir
   * @throws JobRecoveryException
   */
  private function prepareDirectory($dir) {
    if (!file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
      throw new JobRecoveryException("{$this->logId}: Could not prepare file output directory $dir.Should check if this directory is writable.");
    }

    /*if(!is_link($dir) && !@chmod($dir,0777)){
      throw new JobRecoveryException("{$this->logId}: Could not update permissions to 0777 for $dir.");
    }*/
  }

  /**
   * @return string
   */
  private function prepareFilePath() {
    static $file_path = NULL;
    if (!isset($file_path)) {
      $file_path = $this->jobDetails['name'] . '/' . date('Y-m-d');
    }

    return $file_path;
  }

  /**
   * @return string
   */
  private function prepareFileName() {
    static $file_name = NULL;
    if (!isset($file_name)) {
      $file_name = $this->jobDetails['name'] . '_' . $this->jobDetails['job_id'] . '_' . date('mdY_His');
    }

    return $file_name;
  }

  /**
   * @param $log_id
   */
  function setLogId($log_id) {
    $this->logId = $log_id;
  }


}

class JobRecoveryException extends Exception {
}
