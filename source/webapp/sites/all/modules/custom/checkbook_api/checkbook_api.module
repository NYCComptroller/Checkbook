<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
*
* Copyright (C) 2012, 2013 New York City
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


module_load_include('php', 'checkbook_api', 'api/CheckbookAPI');
module_load_include('php', 'checkbook_api', 'api/CheckbookAPIEntity');
module_load_include('php', 'checkbook_api', 'api/CheckbookAPIRepository');
module_load_include('php', 'checkbook_api', 'api/CheckbookAPIService');
module_load_include('php', 'checkbook_api', 'json_api/CheckBookJsonApi');
module_load_include('php', 'checkbook_api', 'json_api/CheckBookJsonApiModel');
module_load_include('php', 'checkbook_api', 'json_api/CheckBookJsonApiHelper');

use checkbook_api\CheckbookAPIService as CheckbookAPIService;
use checkbook_api\ResponseStatus as ResponseStatus;
use checkbook_json_api\CheckBookJsonApi as CheckBookJsonApi;

function checkbook_api_cron()
{
  if(defined('CHECKBOOK_DEV')) {
    module_load_include('php', 'checkbook_api', 'script/processQueueJob');
  }
}

/**
 * Implements hook_menu().
 */
function checkbook_api_menu() {

  $items['json_api'] = array(
    'title' => 'Checkbook json API',
    'page callback' => 'checkbook_json_api',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['api'] = array(
    'title' => 'Checkbook API',
    'page callback' => 'checkbook_api',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function checkbook_json_api()
{
  header('Content-Type: application/json');
  try {
    $args = func_get_args();
    $endpoint = isset($args[0]) ? $args[0] : 'index';
    $json_api = new CheckBookJsonApi($args);

    if ('index' == $endpoint) {
      $methods = get_class_methods($json_api);
      array_shift($methods);
//      foreach ($methods as &$method) {
//        $method = '/json_api/'.$method.'/';
//      }
      echo json_encode($methods);
      return;
    }

    if (method_exists($json_api, $endpoint)) {
      echo json_encode($json_api->$endpoint());
    } else {
      throw new Exception('not implemented');
    }
  } catch (Exception $exception) {
    echo json_encode([
      'success' => false,
      'message' => $exception->getMessage()
    ]);
  }
}

/**
 *
 */
function checkbook_api() {

    $document = new DOMDocument();
    $document->preserveWhiteSpace = FALSE;
    $document->load('php://input');

    $search_criteria = new XMLSearchCriteria($document);
    $domain = $search_criteria->getTypeOfData();
    $request_xml = $document->saveXML();
    $client_ip = $_SERVER['HTTP_X_FORWARDED_FOR'] ?? ($_SERVER['REMOTE_ADDR'] ?? null);
    $client_location = checkbook_api_get_ip_info($client_ip, "Location");
    $checkbook_api_service = new CheckbookAPIService();
    $api = $checkbook_api_service->createCheckbookAPI($domain,$request_xml,$client_ip,$client_location);
    $response_status = ResponseStatus::$SUCCEEDED;
    $response_log = null;

    try {
        $checkbook_api = new CheckBookAPI($search_criteria);

        drupal_add_http_header("Content-Type", "application/xml");

        if (isset($checkbook_api)) {
            if ($checkbook_api->validateRequest()) {
                $data = $checkbook_api->getData();
                $response_status = ResponseStatus::$SUCCEEDED;
                $response_log = "Request validated and response succeeded";
                $results = $data;
            }
            else {
                $error = $checkbook_api->getErrorResponse();
                $response_status = ResponseStatus::$INVALID;
                $response_log = "Response failed due to invalid request with error: ".$error;
                $results = $error;
            }
        }
    }
    catch (Exception $e) {
        $error = $e->getMessage();
        $response_status = ResponseStatus::$FAILED;
        $response_log = "Response failed with error: ".$error;
        $results = $error;
    }

    $checkbook_api_service->logStatus($api->api_id,$response_status,$response_log);
    echo $results;
}

/**
 * Using the IP address, returns location details
 *
 * @param null $ip
 * @param string $purpose
 * @param bool $deep_detect
 * @return array|null|string
 */
function checkbook_api_get_ip_info($ip = NULL, $purpose = "location", $deep_detect = TRUE) {
    $output = NULL;
    $ip = str_replace(array("\n", "\r"), '', $ip);
    if (filter_var($ip, FILTER_VALIDATE_IP) === FALSE) {
        $ip = $_SERVER["REMOTE_ADDR"];
        if ($deep_detect) {
            if (filter_var(@$_SERVER['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP))
                $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
            if (filter_var(@$_SERVER['HTTP_CLIENT_IP'], FILTER_VALIDATE_IP))
                $ip = $_SERVER['HTTP_CLIENT_IP'];
        }
    }
    $purpose    = str_replace(array("name", "\n", "\t", " ", "-", "_"), NULL, strtolower(trim($purpose)));
    $support    = array("country", "countrycode", "state", "region", "city", "location", "address");
    $continents = array(
        "AF" => "Africa",
        "AN" => "Antarctica",
        "AS" => "Asia",
        "EU" => "Europe",
        "OC" => "Australia (Oceania)",
        "NA" => "North America",
        "SA" => "South America"
    );
    if (filter_var($ip, FILTER_VALIDATE_IP) && in_array($purpose, $support)) {
        $ipdat = @json_decode(file_get_contents("http://www.geoplugin.net/json.gp?ip=" . $ip));
        if (@strlen(trim($ipdat->geoplugin_countryCode)) == 2) {
            switch ($purpose) {
                case "location":
                    $output = array(
                        "city"           => @$ipdat->geoplugin_city,
                        "state"          => @$ipdat->geoplugin_regionName,
                        "country"        => @$ipdat->geoplugin_countryName,
                        "country_code"   => @$ipdat->geoplugin_countryCode,
                        "continent"      => @$continents[strtoupper($ipdat->geoplugin_continentCode)],
                        "continent_code" => @$ipdat->geoplugin_continentCode
                    );
                    break;
                case "address":
                    $address = array($ipdat->geoplugin_countryName);
                    if (@strlen($ipdat->geoplugin_regionName) >= 1)
                        $address[] = $ipdat->geoplugin_regionName;
                    if (@strlen($ipdat->geoplugin_city) >= 1)
                        $address[] = $ipdat->geoplugin_city;
                    $output = implode(", ", array_reverse($address));
                    break;
                case "city":
                    $output = @$ipdat->geoplugin_city;
                    break;
              case "region":
              case "state":
                    $output = @$ipdat->geoplugin_regionName;
                    break;
              case "country":
                    $output = @$ipdat->geoplugin_countryName;
                    break;
                case "countrycode":
                    $output = @$ipdat->geoplugin_countryCode;
                    break;
            }
        }
    }
    return $output;
}

/**
 * Hook to load custom API specific utility functions during bootstrap..
 */
function checkbook_api_init(){
  require_once(drupal_get_path("module","checkbook_api") . "/includes/revenue.inc");
  require_once(drupal_get_path("module","checkbook_api") . "/includes/budget.inc");
  require_once(drupal_get_path("module","checkbook_api") . "/includes/contracts.inc");
  require_once(drupal_get_path("module","checkbook_api") . "/includes/spending.inc");
  require_once(drupal_get_path("module","checkbook_api") . "/includes/payroll.inc");
}

