<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
* 
* Copyright (C) 2012, 2013 New York City
* 
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
* 
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


module_load_include('php', 'checkbook_api', 'api/CheckbookAPI');
module_load_include('php', 'checkbook_api', 'api/CheckbookAPIEntity');
module_load_include('php', 'checkbook_api', 'api/CheckbookAPIRepository');
module_load_include('php', 'checkbook_api', 'api/CheckbookAPIService');

use checkbook_api\CheckbookAPIService as CheckbookAPIService;
use checkbook_api\ResponseStatus as ResponseStatus;

/**
 * Implements hook_menu().
 */
function checkbook_api_menu() {
  $items['api'] = array(
    'title' => 'Checkbook API',
    'page callback' => 'checkbook_api',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['generate_ref_data'] = array(
    'title' => 'Generate Reference Data',
    'page callback' => 'checkbook_api_generate_ref_data',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ref_code_list/%'] = array(
    'title' => 'Load Reference Data',
    'page callback' => 'checkbook_api_load_ref_data',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 *
 */
function checkbook_api() {

    $document = new DOMDocument();
    $document->preserveWhiteSpace = FALSE;
    $document->load('php://input');

    $search_criteria = new XMLSearchCriteria($document);
    $domain = $search_criteria->getTypeOfData();
    $request_xml = $document->saveXML();
    $client_ip = get_public_ip_address();
    $client_location = checkbook_api_get_ip_info($client_ip, "Location");
    $checkbook_api_service = new CheckbookAPIService();
    $api = $checkbook_api_service->createCheckbookAPI($domain,$request_xml,$client_ip,$client_location);
    $response_status = ResponseStatus::$SUCCEEDED;
    $response_log = null;

    try {
        $checkbook_api = new CheckBookAPI($search_criteria);

        drupal_add_http_header("Content-Type", "application/xml");

        if (isset($checkbook_api)) {
            if ($checkbook_api->validateRequest()) {
                $data = $checkbook_api->getData();
                $response_status = ResponseStatus::$SUCCEEDED;
                $response_log = "Request validated and response succeeded";
                $results = $data;
            }
            else {
                $error = $checkbook_api->getErrorResponse();
                $response_status = ResponseStatus::$INVALID;
                $response_log = "Response failed due to invalid request with error: ".$error;
                $results = $error;
            }
        }
    }
    catch (Exception $e) {
        $error = $e->getMessage();
        $response_status = ResponseStatus::$FAILED;
        $response_log = "Response failed with error: ".$error;
        $results = $error;
    }

    $checkbook_api_service->logStatus($api->api_id,$response_status,$response_log);
    echo $results;
}
/**
 * @param $code_list_name
 */
function checkbook_api_load_ref_data($code_list_name) {
  global $conf;

  $file_name = $code_list_name . '_code_list.csv';
  $file = variable_get('file_public_path', 'sites/default/files') . '/' . $conf['check_book']['data_feeds']['output_file_dir'] . '/' . $conf['check_book']['ref_data_dir'] . '/' . $file_name;

  drupal_add_http_header("Content-Type", "text/csv");
  drupal_add_http_header("Content-Disposition", "attachment; filename=$file_name");
  drupal_add_http_header("Pragma", "cache");
  drupal_add_http_header("Expires", "-1");

  if (is_file($file)) {
    $data = file_get_contents($file);
    drupal_add_http_header("Content-Length", strlen($data));
    echo $data;
  }
  else {
    echo "Data is not generated. Please contact support team.";
  }
}

/**
 *
 */
function checkbook_api_generate_ref_data() {
  include_once 'script/generateRefData.php';
}

/**
 * @param $data_set
 * @param $parameters
 * @param $criteria
 * @param null $datasource
 */
function checkbook_api_adjustBudgetParameterFilters(&$data_set, &$parameters, $criteria,$datasource = null) {
    $data_controller_instance = data_controller_get_operator_factory_instance();
    if(!isset($parameters['budget_code']) && isset($parameters['budget_code_name'])) {
        $logicalOrColumns[] = array("budget_code","budget_code_name");
        $parameters['budget_code'] = $data_controller_instance->initiateHandler(EqualOperatorHandler::$OPERATOR__NAME, $parameters['budget_code_name']);
        $parameters['budget_code_name'] = $data_controller_instance->initiateHandler(WildcardOperatorHandler::$OPERATOR__NAME, array($parameters['budget_code_name'], false, true));
    }else if(isset($parameters['budget_code_name'])){
        $parameters['budget_code_name'] = $data_controller_instance->initiateHandler(WildcardOperatorHandler::$OPERATOR__NAME, array($parameters['budget_code_name'], false, true));
    }
    
    if(count($logicalOrColumns) > 0) {
        $parameters['logicalOrColumns'] = $logicalOrColumns;
    }
}

/**
 * @param $data_set
 * @param $parameters
 * @param $criteria
 * @param null $datasource
 */
function checkbook_api_adjustContractParameterFilters(&$data_set, &$parameters, $criteria,$datasource = null) {
  $contract_status = $criteria['value']['status'];
  $category = $criteria['value']['category'];
  $type_of_data = ($datasource == 'checkbook_oge') ? "contracts_oge":"";

    //For Active/Registered Expense Contracts
    if(($category == "expense" || $category == "all") && ($contract_status == "active" || $contract_status == "registered")) {
        checkbook_api_adjust_expense_contracts_params($parameters, $criteria, $contract_status, $category);
    }
    else {
        switch ($contract_status) {
            case "registered":
            case "active":
                $data_controller_instance = data_controller_get_operator_factory_instance();

                // Either Fiscal or Calendar year is provided:
                $fy = checkbook_api_change_datasource($datasource,$parameters['fiscal_year@checkbook:all_contracts_coa_aggregates']);
                if (isset($fy)) {
                    if(strtolower($type_of_data) == 'contracts_oge')
                        $parameters[checkbook_api_change_datasource($datasource,'type_of_year')] = 'B';
                    else
                        $parameters[checkbook_api_change_datasource($datasource,'type_of_year@checkbook:all_contracts_coa_aggregates')] = 'B';


                    if ($contract_status == 'registered') {
                        if(strtolower($type_of_data) == 'contracts_oge')
                            $parameters[checkbook_api_change_datasource($datasource,'status_flag')] = 'R';
                        else
                            $parameters[checkbook_api_change_datasource($datasource,'status_flag@checkbook:all_contracts_coa_aggregates')] = 'R';
                    }
                    else {
                        if ($contract_status == 'active') {
                            if(strtolower($type_of_data) == 'contracts_oge')
                                $parameters[checkbook_api_change_datasource($datasource,'status_flag')] = 'A';
                            else
                                $parameters[checkbook_api_change_datasource($datasource,'status_flag@checkbook:all_contracts_coa_aggregates')] = 'A';
                        }
                    }

                    // Adjust year:
                    if(strtolower($type_of_data) == 'contracts_oge'){
                        $req_year = $parameters[checkbook_api_change_datasource($datasource,'fiscal_year')];
                        $req_years = _checkbook_project_querydataset('checkbook_oge:year',array('year_id','year_value'),array('year_value'=>$req_year));
                        $req_year = $req_years[0]['year_id'];
                    }
                    else{
                        $req_year = $parameters[checkbook_api_change_datasource($datasource,'fiscal_year@checkbook:all_contracts_coa_aggregates')];
                    }
                    if (isset($req_year)) {
                        $ge_condition = $data_controller_instance->initiateHandler(GreaterOrEqualOperatorHandler::$OPERATOR__NAME, $req_year);
                        $le_condition = $data_controller_instance->initiateHandler(LessOrEqualOperatorHandler::$OPERATOR__NAME, $req_year);
                        if(strtolower($type_of_data) == 'contracts_oge'){
                            $parameters['starting_year_id'] = $le_condition;
                            $parameters['ending_year_id'] = $ge_condition;
                        }else{
                            $parameters['starting_year'] = $le_condition;
                            $parameters['ending_year'] = $ge_condition;
                        }
                        if ($contract_status == 'registered') {
                            if(strtolower($type_of_data) == 'contracts_oge')
                                $parameters['registered_year_id'] = $req_year;
                            else
                                $parameters['registered_year'] = $req_year;
                        }
                        else {
                            if ($contract_status == 'active') {
                                if(strtolower($type_of_data) == 'contracts_oge'){
                                    $parameters['effective_begin_year_id'] = $le_condition;
                                    $parameters['effective_end_year_id'] = $ge_condition;
                                }
                                else{
                                    $parameters['effective_begin_year'] = $le_condition;
                                    $parameters['effective_end_year'] = $ge_condition;
                                }
                            }
                        }
                    }
                }
                else {
                    // All years:
                    $parameters['latest_flag'] = 'Y';
                }
                break;

            case "pending":
                break;

            default:
                break;
        }
        if( $category == 'all') {
            $parameters[checkbook_api_change_datasource($datasource,'document_code@checkbook:ref_document_code')] = array(
                "MMA1",
                "MA1",
                "CT1",
                "DO1",
                "CTA1",
                "MAR",
                "CTR",
                "RCT1",
            );
        }
        else if ($category == 'revenue') {
            $parameters[checkbook_api_change_datasource($datasource,'document_code@checkbook:ref_document_code')] = 'RCT1';
        }
        else {
            if ($category == 'expense') {
                $parameters[checkbook_api_change_datasource($datasource,'document_code@checkbook:ref_document_code')] = array(
                    "MMA1",
                    "MA1",
                    "CT1",
                    "DO1",
                    "CTA1",
                    "MAR",
                    "CTR",
                );
            }
        }
        if(isset($parameters['minority_type_id']))
            $parameters['minority_type_id'] = explode('~',$parameters['minority_type_id']);
    }
}

/**
 * Updates the parameters for Active/Registered Expense Contracts
 * @param $parameters
 * @param $contract_status
 * @param $category
 */
function checkbook_api_adjust_expense_contracts_params(&$parameters, $criteria, $contract_status, $category) {

    $data_controller_instance = data_controller_get_operator_factory_instance();

    $req_year = $criteria['value']['fiscal_year'];
    $req_years = _checkbook_project_querydataset('checkbook:year',array('year_id','year_value'),array('year_value'=>$req_year));
    $req_year = $req_years[0]['year_id'];

    if(isset($req_year)){
        $parameters['type_of_year@checkbook:contracts_coa_aggregates_datafeeds'] = 'B';
        $geCondition = $data_controller_instance->initiateHandler(GreaterOrEqualOperatorHandler::$OPERATOR__NAME, array($req_year));
        $leCondition = $data_controller_instance->initiateHandler(LessOrEqualOperatorHandler::$OPERATOR__NAME, array($req_year));
        $parameters['starting_year_id']= $leCondition;
        $parameters['ending_year_id']= $geCondition;

        switch($contract_status) {
            case "active":
                $parameters['status_flag@checkbook:contracts_coa_aggregates_datafeeds'] = 'A';
                $parameters['effective_begin_year_id']= $leCondition;
                $parameters['effective_end_year_id']= $geCondition;
                break;
            case "registered":
                $parameters['status_flag@checkbook:contracts_coa_aggregates_datafeeds'] = 'R';
                $parameters['registered_year_id']= array($req_year);
                break;
        }
        //unset($parameters['year']);
    }
    else {
        $parameters['latest_flag'] = 'Y';
    }

    //Document Code
    switch($category) {
        case "expense":
            $parameters['document_code'] = array(
                "MMA1",
                "MA1",
                "CT1",
                "DO1",
                "CTA1",
                "MAR",
                "CTR",
            );
            break;
        case "all":
            $parameters['document_code'] = array(
                "MMA1",
                "MA1",
                "CT1",
                "DO1",
                "CTA1",
                "MAR",
                "CTR",
                "RCT1",
            );
            break;
    }
    //Update columns which will be applied as an OR condition
    $logicalOrColumns = array();

    //Vendor
    if(isset($parameters['vendor_code'])) {
        $logicalOrColumns[] = array("prime_vendor_code","sub_vendor_code");
        $parameters['prime_vendor_code'] = $parameters['vendor_code'];
        $parameters['sub_vendor_code'] = $parameters['vendor_code'];
        unset($parameters['vendor_code']);
    }
    //Purpose
    if(isset($parameters['purpose'])) {
        $logicalOrColumns[] = array("prime_purpose","sub_purpose");
      $parameters['prime_purpose'] = $parameters['purpose'];
        $parameters['sub_purpose'] = $parameters['purpose'];
        unset($parameters['purpose']);
    }
    //M/WBE Category
    if(isset($parameters['minority_type_id'])) {
        $logicalOrColumns[] = array("prime_mwbe_adv_search_id","sub_minority_type_id");
        $minority_type_id = explode('~',$parameters['minority_type_id']);
        $condition = $data_controller_instance->initiateHandler(EqualOperatorHandler::$OPERATOR__NAME, array($minority_type_id));
        $parameters['prime_mwbe_adv_search_id'] = $condition;
        $parameters['sub_minority_type_id'] = $condition;
        unset($parameters['minority_type_id']);
    }
    //Current Amount
    if(isset($parameters['amount_id'])) {
        $logicalOrColumns[] = array("prime_maximum_contract_amount","sub_maximum_contract_amount");
        $parameters['prime_maximum_contract_amount'] = $parameters['amount_id'];
        $parameters['sub_maximum_contract_amount'] = $parameters['amount_id'];
        unset($parameters['amount_id']);
    }

//    //Industry type
//        if(isset($parameters['industry_type_id'])) {
//                $logicalOrColumns[] = array("prime_industry_type_id","sub_industry_type_id");
//               $industry_type_id = explode('~',$parameters['industry_type_id']);
//                $condition = $data_controller_instance->initiateHandler(EqualOperatorHandler::$OPERATOR__NAME, array($industry_type_id));
//                $parameters['prime_industry_type_id'] = $condition;
//                $parameters['sub_industry_type_id'] = $condition;
//                unset($parameters['industry_type_id']);
//      }

    //if(isset($parameters['scntrc_status_name']))

    if(count($logicalOrColumns) > 0) {
        $parameters['logicalOrColumns'] = $logicalOrColumns;
    }
}

/**
 * Used to adjust columns in the data set after sql call.  This is to handle derived columns
 * @param $data_records
 */
function checkbook_api_adjustContractDataSetResults(&$data_records) {

    foreach($data_records as $key => $data_record) {
        //Derive minority category from minority_type_id
        if(isset($data_record['minority_type_name'])) {
            $data_records[$key]['minority_type_name'] = MappingUtil::getMinorityCategoryByName($data_record['minority_type_name']);
        }
        
        //Derive sub vendor column from vendor type
        if(isset($data_record['vendor_type'])) {
            $data_records[$key]['vendor_type'] = (preg_match('/S/', $data_record['vendor_type'])) ? 'Yes' : 'No';
            //If Sub vendor field = "Yes" following should be "N/A": Expense Category
            if($data_records[$key]['vendor_type'] == 'Yes') {
                $data_records[$key]['expenditure_object_name'] = 'N/A';
            }
            else { //If Sub vendor field = "No" following should be "N/A": Associated Prime Vendor
                $data_records[$key]['prime_vendor_name'] = 'N/A';
            }
        }
        if($data_record['scntrc_status_name'] == null){
            $data_records[$key]['scntrc_status_name'] =  'N/A';
        }
    }
}

/**
 * Function to adjust the parameters before for the api sql call for payroll
 *
 * @param $data_set
 * @param $parameters
 * @param $criteria
 */
function checkbook_api_adjustPayrollParameterFilters(&$data_set, &$parameters, $criteria) {
    if(isset($parameters['civil_service_title_exact'])) {
        $parameters['civil_service_title'] = data_controller_get_operator_factory_instance()->initiateHandler(WildcardOperatorHandler::$OPERATOR__NAME, array($parameters['civil_service_title_exact'],FALSE,FALSE,));
        unset($parameters['civil_service_title_exact']);
    }
}

/**
 * Used to adjust columns in the data set after sql call.  This is to handle derived columns
 * @param $data_records
 */
function checkbook_api_adjustPayrollDataSetResults(&$data_records) {

    foreach($data_records as $key => $data_record) {
        //Derive payroll type from amount_basis_id
        if(isset($data_record['amount_basis_id'])) {
            $data_records[$key]['amount_basis_id'] = PayrollUtil::getEmploymentTypeByAmountBasisId($data_record['amount_basis_id']);
        }
    }
}

/**
 * Function to adjust the parameters before for the api sql call for spending
 *
 * @param $data_set
 * @param $parameters
 * @param $criteria
 */
function checkbook_api_adjustSpendingParameterFilters(&$data_set, &$parameters, $criteria) {
    if(isset($parameters['minority_type_id']))
        $parameters['minority_type_id'] = explode('~',$parameters['minority_type_id']);
}
/**
 * Used to adjust columns in the data set after sql call.
 * This is to handle derived columns
 *
 * @param $data_records
 */
function checkbook_api_adjustSpendingDataSetResults(&$data_records) {
    //Derive minority category from minority_type_id
    foreach($data_records as $key => $data_record) {
        //Derive minority category
        if(isset($data_record['minority_type_name'])) {
            $data_records[$key]['minority_type_name'] = MappingUtil::getMinorityCategoryByName($data_record['minority_type_name']);
        }

        //Derive sub vendor column from vendor type
        if(isset($data_record['vendor_type'])) {
            $data_records[$key]['vendor_type'] = (preg_match('/S/', $data_record['vendor_type'])) ? 'Yes' : 'No';
            //If Sub vendor field = "Yes" following should be "N/A": Capital Project,Department,Document ID,Expense Category, Associated Prime Vendor
            if($data_records[$key]['vendor_type'] == 'Yes') {
                $data_records[$key]['reporting_code'] = 'N/A';
                $data_records[$key]['department_name'] = 'N/A';
                $data_records[$key]['disbursement_number'] = 'N/A';
                $data_records[$key]['expenditure_object_name'] = 'N/A';
            }
            else { //If Sub vendor field = "No" following should be "N/A": Associated Prime Vendor
                $data_records[$key]['prime_vendor_name'] = 'N/A';
            }
        }
    }

}

function checkbook_api_adjustSpendingSql(&$sql_query) {
    if (strpos($sql_query,'l1.') !== false) {
        $sql_query =  str_replace("l1.prime_vendor_name", "CASE WHEN l1.is_prime_or_sub = 'S' THEN l1.prime_vendor_name ELSE 'N/A' END AS prime_vendor_name",$sql_query);
        $sql_query =  str_replace("l1.vendor_type", "CASE WHEN l1.is_prime_or_sub = 'P' THEN 'No' ELSE 'Yes' END AS vendor_type",$sql_query);
        $sql_query =  str_replace("l1.reporting_code", "CASE WHEN l1.is_prime_or_sub = 'P' THEN l1.reporting_code ELSE 'N/A' END AS reporting_code",$sql_query);
        $sql_query =  str_replace("l1.department_name", "CASE WHEN l1.is_prime_or_sub = 'P' THEN l1.department_name ELSE 'N/A' END AS department_name",$sql_query);
        $sql_query =  str_replace("l1.disbursement_number", "CASE WHEN l1.is_prime_or_sub = 'P' THEN l1.disbursement_number ELSE 'N/A' END AS disbursement_number",$sql_query);
        $sql_query =  str_replace("l1.expenditure_object_name", "CASE WHEN l1.is_prime_or_sub = 'P' THEN l1.expenditure_object_name ELSE 'N/A' END AS expenditure_object_name",$sql_query);
    }
    else {
        $sql_query =  str_replace("prime_vendor_name", "CASE WHEN is_prime_or_sub = 'S' THEN prime_vendor_name ELSE 'N/A' END AS prime_vendor_name",$sql_query);
        $sql_query =  str_replace("vendor_type", "CASE WHEN is_prime_or_sub = 'P' THEN 'No' ELSE 'Yes' END AS vendor_type",$sql_query);
        $sql_query =  str_replace("reporting_code", "CASE WHEN is_prime_or_sub = 'P' THEN reporting_code ELSE 'N/A' END AS reporting_code",$sql_query);
        $sql_query =  str_replace("department_name", "CASE WHEN is_prime_or_sub = 'P' THEN department_name ELSE 'N/A' END AS department_name",$sql_query);
        $sql_query =  str_replace("disbursement_number", "CASE WHEN is_prime_or_sub = 'P' THEN disbursement_number ELSE 'N/A' END AS disbursement_number",$sql_query);
        $sql_query =  str_replace("expenditure_object_name", "CASE WHEN is_prime_or_sub = 'P' THEN expenditure_object_name ELSE 'N/A' END AS expenditure_object_name",$sql_query);
    }
}

function checkbook_api_adjustContractSql(&$sql_query) {
    if (strpos($sql_query,'l1.') !== false) {
        $sql_query =  str_replace("l1.prime_vendor_name", "CASE WHEN l1.is_prime_or_sub = 'S' THEN l1.prime_vendor_name ELSE 'N/A' END AS prime_vendor_name",$sql_query);
        $sql_query =  str_replace("l1.vendor_type", "CASE WHEN l1.is_prime_or_sub = 'P' THEN 'No' ELSE 'Yes' END AS vendor_type",$sql_query);
        $sql_query =  str_replace("l1.expenditure_object_names", "CASE WHEN l1.is_prime_or_sub = 'P' THEN l1.expenditure_object_names ELSE 'N/A' END AS expenditure_object_name",$sql_query);
    }
    else if (strpos($sql_query,'l4.') !== false) {
        $sql_query =  str_replace("l4.prime_vendor_name", "CASE WHEN l4.is_prime_or_sub = 'S' THEN l4.prime_vendor_name ELSE 'N/A' END AS prime_vendor_name",$sql_query);
        $sql_query =  str_replace("l4.vendor_type", "CASE WHEN l4.is_prime_or_sub = 'P' THEN 'No' ELSE 'Yes' END AS vendor_type",$sql_query);
        $sql_query =  str_replace("l4.expenditure_object_names", "CASE WHEN l4.is_prime_or_sub = 'P' THEN l4.expenditure_object_names ELSE 'N/A' END AS expenditure_object_name",$sql_query);
    }
    else {
        $sql_query =  str_replace("prime_vendor_name", "CASE WHEN is_prime_or_sub = 'S' THEN prime_vendor_name ELSE 'N/A' END AS prime_vendor_name",$sql_query);
        $sql_query =  str_replace("vendor_type", "CASE WHEN is_prime_or_sub = 'P' THEN 'No' ELSE 'Yes' END AS vendor_type",$sql_query);
        $sql_query =  str_replace("expenditure_object_names", "CASE WHEN is_prime_or_sub = 'P' THEN expenditure_object_names ELSE 'N/A' END AS expenditure_object_name",$sql_query);
    }
}

function checkbook_api_adjustPayrollSql(&$sql_query) {
    $sql_parts = explode("FROM", $sql_query);
    $select_part = $sql_parts[0];
    $from_part = $sql_parts[1];
    $select_part =  str_replace("amount_basis_id", "CASE WHEN amount_basis_id = 1 THEN 'SALARIED' ELSE 'NON-SALARIED' END AS payroll_type",$select_part);
    $sql_query = $select_part."FROM".$from_part;
}

function checkbook_api_change_datasource($datasource,$param){
	if($datasource != null){
		return str_replace("checkbook:", $datasource . ":",$param);
	}else{
		return $param;
	}
}

/**
 * Using the IP address, returns location details
 *
 * @param null $ip
 * @param string $purpose
 * @param bool $deep_detect
 * @return array|null|string
 */
function checkbook_api_get_ip_info($ip = NULL, $purpose = "location", $deep_detect = TRUE) {
    $output = NULL;
    $ip = str_replace(array("\n", "\r"), '', $ip);
    if (filter_var($ip, FILTER_VALIDATE_IP) === FALSE) {
        $ip = $_SERVER["REMOTE_ADDR"];
        if ($deep_detect) {
            if (filter_var(@$_SERVER['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP))
                $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
            if (filter_var(@$_SERVER['HTTP_CLIENT_IP'], FILTER_VALIDATE_IP))
                $ip = $_SERVER['HTTP_CLIENT_IP'];
        }
    }
    $purpose    = str_replace(array("name", "\n", "\t", " ", "-", "_"), NULL, strtolower(trim($purpose)));
    $support    = array("country", "countrycode", "state", "region", "city", "location", "address");
    $continents = array(
        "AF" => "Africa",
        "AN" => "Antarctica",
        "AS" => "Asia",
        "EU" => "Europe",
        "OC" => "Australia (Oceania)",
        "NA" => "North America",
        "SA" => "South America"
    );
    if (filter_var($ip, FILTER_VALIDATE_IP) && in_array($purpose, $support)) {
        $ipdat = @json_decode(file_get_contents("http://www.geoplugin.net/json.gp?ip=" . $ip));
        if (@strlen(trim($ipdat->geoplugin_countryCode)) == 2) {
            switch ($purpose) {
                case "location":
                    $output = array(
                        "city"           => @$ipdat->geoplugin_city,
                        "state"          => @$ipdat->geoplugin_regionName,
                        "country"        => @$ipdat->geoplugin_countryName,
                        "country_code"   => @$ipdat->geoplugin_countryCode,
                        "continent"      => @$continents[strtoupper($ipdat->geoplugin_continentCode)],
                        "continent_code" => @$ipdat->geoplugin_continentCode
                    );
                    break;
                case "address":
                    $address = array($ipdat->geoplugin_countryName);
                    if (@strlen($ipdat->geoplugin_regionName) >= 1)
                        $address[] = $ipdat->geoplugin_regionName;
                    if (@strlen($ipdat->geoplugin_city) >= 1)
                        $address[] = $ipdat->geoplugin_city;
                    $output = implode(", ", array_reverse($address));
                    break;
                case "city":
                    $output = @$ipdat->geoplugin_city;
                    break;
                case "state":
                    $output = @$ipdat->geoplugin_regionName;
                    break;
                case "region":
                    $output = @$ipdat->geoplugin_regionName;
                    break;
                case "country":
                    $output = @$ipdat->geoplugin_countryName;
                    break;
                case "countrycode":
                    $output = @$ipdat->geoplugin_countryCode;
                    break;
            }
        }
    }
    return $output;
}

/**
 * Get the IP address used for public internet-facing applications.
 *
 * @author     Dotan Cohen
 * @version    2013-06-09
 *
 * @return string
 */
function get_public_ip_address()
{
    // TODO: Add a fallback to http://httpbin.org/ip
    // TODO: Add a fallback to http://169.254.169.254/latest/meta-data/public-ipv4
    $url="simplesniff.com/ip";
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
    $data = curl_exec($ch);
    curl_close($ch);
    return $data;
}
