<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
* 
* Copyright (C) 2012, 2013 New York City
* 
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
* 
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

 
/**
 * formats the number for display purposes, eg:1000000 will be displayed as 1M
 * @param int,float $number
 * @param int $decimal_digits
 * @param string $prefix
 * @param string $suffix
 * @return string formattedNumber
 */
function custom_number_formatter_format($number, $decimal_digits = 0, $prefix = '', $suffix = '') {
	$thousands = 1000;
	$millions = $thousands * 1000;
	$billions = $millions * 1000;
	$trillions = $billions * 1000;
    $formattedNumber = '';
	if($number < 0) {
	  $formattedNumber =  '-';
	}	
	
	if(abs($number) >= $trillions) {
	  $formattedNumber = $formattedNumber . $prefix . number_format((abs($number)/$trillions), $decimal_digits, '.', ',') . 'T' . $suffix;
	}
	else if(abs($number) >= $billions) {
	  $formattedNumber = $formattedNumber . $prefix . number_format((abs($number)/$billions), $decimal_digits, '.', ',') . 'B' . $suffix;
	}
	else if(abs($number) >= $millions) {
	  $formattedNumber = $formattedNumber . $prefix . number_format((abs($number)/$millions), $decimal_digits, '.', ',') . 'M' . $suffix;
	}
	else if(abs($number) >= $thousands) {
	  $formattedNumber = $formattedNumber . $prefix . number_format((abs($number)/$thousands), $decimal_digits, '.', ',') . 'K' . $suffix;
	}
	else {
	  $formattedNumber = $formattedNumber . $prefix . number_format(abs($number), $decimal_digits, '.', ',') . $suffix;
	}	
	return $formattedNumber;
}

/**
 * formats the number for display purposes, eg:1000000 will be displayed as 1M
 * @param int,float $number
 * @param int $decimal_digits
 * @param string $prefix
 * @param string $suffix
 * @return string formattedNumber
 */
function custom_number_formatter_homepage_format($number, $decimal_digits = 0, $prefix = '', $suffix = '') {
	$thousands = 1000;
	$millions = $thousands * 1000;
    $formattedNumber = '';
	if($number < 0) {
	  $formattedNumber =  '-';
	}	
	
	if(abs($number) >= $millions) {
	  $formattedNumber = $formattedNumber . $prefix . number_format((abs($number)/$millions), $decimal_digits, '.', ',') . 'M' . $suffix;
	}
	else if(abs($number) >= $thousands) {
	  $formattedNumber = $formattedNumber . $prefix . number_format((abs($number)/$thousands), $decimal_digits, '.', ',') . 'K' . $suffix;
	}
	else {
	  $formattedNumber = $formattedNumber . $prefix . number_format(abs($number), $decimal_digits, '.', ',') . $suffix;
	}	
	return $formattedNumber;
}

/**
 * formats the number for display purposes, eg:1000000 will be displayed as 1M
 * @param int,float $number
 * @param int $decimal_digits
 * @param string $prefix
 * @param string $suffix
 * @return string formattedNumber
 */
function custom_number_formatter_basic_format($number, $decimal_digits = 2, $prefix = '$') {
    if($number == null){
      $number = 0;
    }
    if(!is_numeric($number)){
        return $number;
    }
  
    $formattedNumber = NULL;
    if($number < 0) {
        $formattedNumber =  '-';
    }

    $formattedNumber .= $prefix . number_format(abs($number),$decimal_digits);

    return $formattedNumber;
}
