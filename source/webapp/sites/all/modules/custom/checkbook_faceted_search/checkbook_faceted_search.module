<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
* 
* Copyright (C) 2012, 2013 New York City
* 
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
* 
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/



/**
 * Implements hook_menu()
 */

function checkbook_faceted_search_menu() {
  return array(
    'faceted-search/ajax/node' => array(
      'type' => MENU_CALLBACK,
      'page callback' => '_checkbook_faceted_search_node_ajax',
      'page arguments' => array(3),
      'access callback' => TRUE
    ),
    'faceted-search/ajax/pagination' => array(
      'type' => MENU_CALLBACK,
      'page callback' => '_checkbook_faceted_search_node_pagination',
      'page arguments' => array(3),
      'access callback' => TRUE
    ),
    'faceted-search/ajax/autocomplete' => array(
      'type' => MENU_CALLBACK,
      'page callback' => '_checkbook_faceted_search_node_autocomplete',
      'access callback' => TRUE
    )
  );
}

/**
 * Implements hook_theme()
 */

function checkbook_faceted_search_theme($existing, $type, $theme, $path) {
  return array(
    'smart_search_filter' => array(
      'template' => 'smart-search-filter',
      'arguments' => array('facets' => NULL, 'active_contracts' => NULL)
    ),
    'individual_filter' => array(
      'template' => 'individual-filter',
      'arguments' => array('node'=>NULL)
    ),
    'pagination' => array(
      'template' => 'pagination',
      'arguments' => array('node'=>NULL)
    )     
  );
}

function _checkbook_faceted_search_node_ajax($nid) {
  $node = node_load($nid);
  widget_config($node);
  widget_prepare($node);
  widget_invoke($node, 'widget_prepare');
  widget_data($node);
  print theme('individual_filter', array('node' => $node));
}

function _checkbook_faceted_search_node_pagination($nid){
  $node = node_load($nid);
  widget_config($node);
  widget_prepare($node);
  widget_invoke($node, 'widget_prepare');
  widget_data($node);
  print theme('pagination', array('node' => $node));
  return;
}

function _checkbook_faceted_search_node_autocomplete(){
  $nid = _getRequestParamValue('node');
  $node = node_load($nid);
  widget_config($node);
  widget_prepare($node);
  widget_invoke($node, 'widget_prepare');
  $node->widgetConfig->limit = 10;
  widget_data($node);
  $node->data = _checkbook_faceted_search_update_data($node);
  if(count($node->data['unchecked']) == 0) {
    return drupal_json_output(array("No Matches Found"));
  }
  $output = array();
  
  foreach( $node->data['unchecked'] as $row ){
    if(isset($row[1]))
      $output[] =  array("value"=>urlencode(html_entity_decode($row[0],ENT_QUOTES)), 'label'=>html_entity_decode($row[1],ENT_QUOTES) . " (" . $row[2] . ")" );
  }  

  return drupal_json_output($output);
}


function _checkbook_faceted_search_update_data($node){
  $data = $node->data;
  $output = array();
  $output['filter_name'] = $node->widgetConfig->filterName;
  $params = explode('~', _getRequestParamValue($node->widgetConfig->urlParameterName));
  if ($params[0]) {
    foreach ($params as $param) {
      try {        
        $dataController = data_controller_get_instance();
        $parameters = $node->nodeAdjustedParamaterConfig;
        $urlParamMap = ( array ) $node->widgetConfig->urlParamMap;
        if(isset($node->widgetConfig->urlParameterNameType)){  
          $paramValues =  explode('~', $param);
          $patterns = array();
          foreach($paramValues as $value){
            $value = _replaceSlash($value);
            $patterns[] = "(^" . _checkbook_regex_replace_pattern($value) . "$)";
          }          
          $parameters[$urlParamMap[$node->widgetConfig->urlParameterName]] = array(data_controller_get_operator_factory_instance()->initiateHandler(RegularExpressionOperatorHandler::$OPERATOR__NAME, implode($patterns,"|")));          
        }else{
          $parameters[$urlParamMap[$node->widgetConfig->urlParameterName]] = array(data_controller_get_operator_factory_instance()->initiateHandler(EqualOperatorHandler::$OPERATOR__NAME, $param));
        }
        $resultFormatter = new SpecialCharacterResultFormatter(NULL,new ArrayResultFormatter());
        $checked_items = $dataController->queryCube(_update_dataset_datasource($node->widgetConfig->dataset), $node->widgetConfig->columns, $parameters,null, null, null, $resultFormatter);
      } catch (Exception $e) {
        log_error($e->getMessage());
      }
      if($checked_items[0]['txcount']){
        if(count($checked_items[0]) == 2){
          $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                                  ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                                  ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]);
        }else{        
          $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                                  ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]
                                  ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[2])]);
        }
      }
    }
  }
  
  foreach ($data as $row) {    
    if(count($row) == 2){
      $output['unchecked'][] = array($row[str_replace('.','_',$node->widgetConfig->columns[0])]
          ,$row[str_replace('.','_',$node->widgetConfig->columns[0])]
          ,$row[str_replace('.','_',$node->widgetConfig->columns[1])]);  
    }    
    else{
      $output['unchecked'][] = array($row[str_replace('.','_',$node->widgetConfig->columns[0])]
          ,$row[str_replace('.','_',$node->widgetConfig->columns[1])]
          ,$row[str_replace('.','_',$node->widgetConfig->columns[2])]);      
    }
  }
  $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
  $output['autocomplete_field_name'] = $node->widgetConfig->urlParameterName;
  $output['autocomplete_param_name'] = $node->widgetConfig->autocompleteParamName;
  return $output;
}

function _checkbook_faceted_search_update_data_range_filter($node){
    $data = $node->data;
    $output = array();
    $output['filter_name'] = $node->widgetConfig->filterName;
    $params = explode('~',_getRequestParamValue($node->widgetConfig->urlParameterName));
    if(!is_array($data[0])){
      $data = array(0=>array());
    }    
    $initial[0] = array(6, 'Greater than $100M', $data[0]['g100m_count']);
    $initial[1] = array(5, '$51M - $100M', $data[0]['g50m_le100m_count']);
    $initial[2] = array(4, '$26M - $50M', $data[0]['g25m_le50m_count']);
    $initial[3] = array(3, '$11M - $25M', $data[0]['g10m_le25m_count']);
    $initial[4] = array(2, '$1M - $10M', $data[0]['ge1m_le10m_count']);
    $initial[5] = array(1, 'Less than $1M', $data[0]['less1m_count']);
    for ($i = 0; $i < 6; $i++){
      $checked = false;
      foreach ($params as $param){
        if ($param == $initial[$i][0]){
          $checked = true;
        }
      }
      if ($checked){
        $output['checked'][] = $initial[$i];
      } else {
        if($initial[$i][2] > 0){
          $output['unchecked'][] = $initial[$i];
        }
      }
    }
    $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
    return $output;
}

function _checkbook_faceted_search_update_data_range2_filter($node){
  $data = $node->data;
  $output = array();
  $output['filter_name'] = $node->widgetConfig->filterName;
  $params = explode('~',_getRequestParamValue($node->widgetConfig->urlParameterName));
  if(!is_array($data[0])){
    $data = array(0=>array());
  }
  
  $initial[0] = array(6, 'Greater than $5B', $data[0]['g5b_count']);
  $initial[1] = array(5, '$4B - $5B', $data[0]['g4b_le5b_count']);
  $initial[2] = array(4, '$3B - $4B', $data[0]['g3b_le4b_count']);
  $initial[3] = array(3, '$2B - $3B', $data[0]['g2b_le3b_count']);
  $initial[4] = array(2, '$1B - $2B', $data[0]['g1b_le2b_count']);
  $initial[5] = array(1, 'Less than $1B', $data[0]['less1b_count']);
for ($i = 0; $i < 6; $i++){
    $checked = false;
    foreach ($params as $param){
      if ($param == $initial[$i][0]){
        $checked = true;
      }
    }
    if ($checked){
      $output['checked'][] = $initial[$i];
    } else {
      if($initial[$i][2] > 0){
        $output['unchecked'][] = $initial[$i];
      }
    }
  }
  $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
  return $output;
}


function checkbook_faceted_search_adjust_param($node){
  if ($_REQUEST['page']){
    $page = $_REQUEST['page'];
    $limit = $node->widgetConfig->limit;
    if ($page > 0){
      $node->widgetConfig->limit = 2 * $limit;
      $node->widgetConfig->startWith = ( $page - 1 ) * $limit;
    }
  }
}

/**
 * Preprocess function for individual_filter.tpl.php
 *
 * @param $variables
 */

function checkbook_faceted_search_preprocess_individual_filter(&$variables){
  $node = $variables['node'];
  $paramTypeConfig =(array)  $node->widgetConfig->paramTypeConfig;
  if($node->widgetConfig->urlParameterType=="rangeid"){
    $data = _checkbook_faceted_search_update_data_range_filter($node);
  }elseif($node->widgetConfig->urlParameterType=="rangeid2"){
    $data = _checkbook_faceted_search_update_data_range2_filter($node);
  }else{
    $data = _checkbook_faceted_search_update_data($node);
  }
  $variables['filter_name'] = $data['filter_name'];
  $variables['checked'] = $data['checked'];
  $variables['unchecked'] = $data['unchecked'];
  $variables['autocomplete_id'] = $data['autocomplete_id'];
  $variables['autocomplete_field_name'] = $data['autocomplete_field_name'];
  $variables['autocomplete_param_name'] = $data['autocomplete_param_name'];
  if(($node->nid == 518 || $node->nid == 540 || $node->nid == 566 )&& !preg_match("/\/agency\//",$_GET['q'])){
    $variables['hide_filter'] = ' style="display:none" ';
  }else{
    $variables['hide_filter'] = "";
  }
  
  
}

function checkbook_faceted_search_preprocess_pagination(&$variables){
  $node = $variables['node'];
  $paramTypeConfig =(array)  $node->widgetConfig->paramTypeConfig;
  if($node->widgetConfig->urlParameterType=="rangeid"){
    $data = _checkbook_faceted_search_update_data_range_filter($node);
  }elseif($node->widgetConfig->urlParameterType=="rangeid2"){
    $data = _checkbook_faceted_search_update_data_range2_filter($node);
  }else{
    $data = _checkbook_faceted_search_update_data($node);
  }
  
  $variables['filter_name'] = $data['filter_name'];
  $variables['checked'] = $data['checked'];
  $variables['unchecked'] = $data['unchecked'];
  $variables['autocomplete_id'] = $data['autocomplete_id'];
}

/**
 * Preprocess function for smart_search_filter.tpl.php
 *
 * @param $variables
 */

function checkbook_faceted_search_preprocess_smart_search_filter(&$variables) {
  $facets = $variables['facets'];
  $selected_filters = $variables['selected_facet_results'];
  $output = NULL;

    $facetDisplayNames = array(
       'domain' => 'Type of Data',
       'agency_name' =>  'Citywide Agency',
       'oge_agency_name' => 'Other Government Entity',
       'vendor_name' => 'Vendor',
       'expenditure_object_name' => 'Expense Category',
       'fiscal_year' => 'Fiscal Year',
       'spending' => 'Spending Category',
       'contracts' => 'Category'
    );

    $facetNames = array(
        'domain' => 'fdomainName',
        'agency_name' =>  'fagencyName',
        'oge_agency_name' => 'fogeName',
        'vendor_name' => 'fvendorName',
        'expenditure_object_name' => 'fexpenseCategoryName',
        'fiscal_year' => 'fyear',
        'spending' => 'fspendingCatName',
        'contracts' => 'fcontractCatName',
        'contracts_status' => 'fcontractStatus'
    );
    $Categories = array(
        'spending' => array('all' => $facets['spending_category_name']['spending_category_name'],
                            'selected' => $selected_filters['spending_category_name']
         ),
        'contracts' => array('all' => $facets['contract_category_name']['contract_category_name'],
                             'selected' => $selected_filters['contract_category_name'],
                             'selected_status' => $selected_filters['contract_status'],
                             'status' => $facets['contract_status']['contract_status']

        ),
    );

    $subCat = array();

    foreach($facets as $key=>$value)
    {
        if(!array_key_exists($key,$facetDisplayNames)) continue; // we only want certain facets shown
        if($key == 'fiscal_year')
            krsort($value[$key]);
        foreach($value[$key] as $name=>$count)
        {
            if($name == '') continue; // No oge data shown in agency facet please :)
            if($key == 'domain' && $count > 0)
            {
                $checked = in_array($name, array_values_recursive($selected_filters[$key])) ? 'checked' : '';
                if($checked){
                    foreach($Categories[$name]['all'] as $subcat=>$subcount) // list types of data
                    {
                        $subChecked = in_array($subcat, array_values_recursive($Categories[$name]['selected'])) ? 'checked' : '';
                        $subCat[$name][$facetDisplayNames[$name]][] = array($subcat, $subcat, $subcount, $subChecked);
                        $subCat[$name][$facetDisplayNames[$name]]['name'] = $facetNames[$name];
                    }
                    foreach($Categories[$name]['status'] as $subcat=>$subcount) // list sub category of data
                    {
                        $subChecked = in_array($subcat, array_values_recursive($Categories[$name]['selected_status'])) ? 'checked' : '';
                        $subCat[$name]['Status'][] = array($subcat, $subcat, $subcount, $subChecked);
                        $subCat[$name]['Status']['name'] = 'fcontractStatus';
                        if (strtolower($subcat) == 'registered')  //Now add the active number right under  registered
                            $subCat[$name]['Status'][] = array('', 'Active', $variables['active_contracts']['response']['numFound']);
                    }
                }
                $output['Type of Data'][] = array($name, $name, $count, $checked);
            }
            else if($count > 0)
            {
                $checked = in_array($name, array_values_recursive($selected_filters[$key]));
                if ($checked) {
                    foreach($selected_filters[$key] as $k=>$va) // remove all values we check from the selected array
                        if($va['name'] == $name);
                            unset($selected_filters[$key][$k]);
                    $output[$facetDisplayNames[$key]]['checked'][] = array(urlencode($name), $name, $count);
                }
                else {
                    $output[$facetDisplayNames[$key]]['unchecked'][] = array(urlencode($name), $name, $count);
                }
            }
        }
        if($output[$facetDisplayNames[$key]])
            $output[$facetDisplayNames[$key]]['name'] = $facetNames[$key];
        //Now we must check any remaining selected facets (yes, yes, they do exist)
        foreach($selected_filters[$key] as $v)
            if($v['count'] > 0)
                $output[$facetDisplayNames[$key]]['checked'][] = array(urlencode($v['name']), $v['name'], $v['count']);
    }


  $variables['render_array'] = $output;
  $variables['sub_cat_array'] = $subCat;
}

function array_values_recursive($ary)
{
   $lst = array();
   foreach( array_keys($ary) as $k ){
      $v = $ary[$k];
      if (is_scalar($v)) {
         $lst[] = $v;
      } elseif (is_array($v)) {
         $lst = array_merge( $lst,
            array_values_recursive($v)
         );
      }
   }
   return $lst;
}
