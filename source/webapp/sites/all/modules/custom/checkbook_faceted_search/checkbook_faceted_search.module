<?php
/**
 * This file is part of the Checkbook NYC financial transparency software.
 *
 * Copyright (C) 2012, 2013 New York City
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implements hook_menu()
 */

function checkbook_faceted_search_menu()
{
  return array(
    'faceted-search/ajax/node' => array(
      'type' => MENU_CALLBACK,
      'page callback' => '_checkbook_faceted_search_node_ajax',
      'page arguments' => array(3),
      'access callback' => TRUE
    ),
    'faceted-search/ajax/pagination' => array(
      'type' => MENU_CALLBACK,
      'page callback' => '_checkbook_faceted_search_node_pagination',
      'page arguments' => array(3),
      'access callback' => TRUE
    ),
    'faceted-search/ajax/autocomplete' => array(
      'type' => MENU_CALLBACK,
      'page callback' => '_checkbook_faceted_search_node_autocomplete',
      'access callback' => TRUE
    )
  );
}

/**
 * Implements hook_theme()
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */

function checkbook_faceted_search_theme($existing, $type, $theme, $path)
{
  return array(
    'smart_search_filter' => array(
      'template' => 'smart_search_filter',
      'arguments' => array('facets' => NULL, 'active_contracts' => NULL, 'registered_contracts' => NULL)
    ),
    'individual_filter' => array(
      'template' => 'individual-filter',
      'arguments' => array('node' => NULL)
    ),
    'pagination' => array(
      'template' => 'pagination',
      'arguments' => array('node' => NULL)
    )
  );
}

/**
 * @param $nid
 * @throws Exception
 */
function _checkbook_faceted_search_node_ajax($nid)
{
  $node = node_load($nid);
  widget_config($node);
  widget_prepare($node);
  widget_invoke($node, 'widget_prepare');
  widget_data($node);
  print theme('individual_filter', array('node' => $node));
}

/**
 * @param $nid
 * @throws Exception
 */
function _checkbook_faceted_search_node_pagination($nid)
{
  $node = node_load($nid);
  widget_config($node);
  widget_prepare($node);
  widget_invoke($node, 'widget_prepare');
  widget_data($node);
  print theme('pagination', array('node' => $node));
  return;
}

/**
 *
 */
function _checkbook_faceted_search_node_autocomplete()
{
  $nid = RequestUtilities::get('node');
  $node = node_load($nid);
  widget_config($node);
  widget_prepare($node);
  widget_invoke($node, 'widget_prepare');
  $node->widgetConfig->limit = 10;
  widget_data($node);
  $node->data = _checkbook_faceted_search_update_data($node);
  if (count($node->data['unchecked']) == 0) {
    return drupal_json_output(array("No Matches Found"));
  }
  $output = array();

  foreach ($node->data['unchecked'] as $row) {
    // Show 'n/a' in autocompletes for budget type and name (NYHCA)
    if($nid == '1044' || $nid == '1043' || $nid == '1059' || $nid == '1060'){
      if(isset($row[2]) && $row[1] == null)
      {
        $row[1] = $row[0] = 'N/A';
      }
    }
    if (isset($row[1]))
      $output[] = array("value" => urlencode(html_entity_decode($row[0], ENT_QUOTES)), 'label' => html_entity_decode($row[1], ENT_QUOTES) . " (" . $row[2] . ")");
  }
  return drupal_json_output($output);
}

/**
 * @param $node
 * @return array
 */
function _checkbook_faceted_search_update_data($node)
{
  $data = $node->data;
  $output = array();
  $output['filter_name'] = $node->widgetConfig->filterName;
  $params = explode('~', RequestUtilities::get($node->widgetConfig->urlParameterName));

  //The value in this facet can be 0
  if ($node->widgetConfig->allowZeroValue == true) {
    $filter = $params[0] != "";
  } else {
    $filter = $params[0];
  }
  if ($filter) {
    foreach ($params as $param) {
      try {
        if (isset($node->widgetConfig->widgetDataFilterLoader)) {
          $node->param = $param;
          eval($node->widgetConfig->widgetDataFilterLoader);
          $checked_items = $node->checked_items;
        } else {
          $dataController = data_controller_get_instance();
          $parameters = $node->nodeAdjustedParamaterConfig;
          $urlParamMap = ( array )$node->widgetConfig->urlParamMap;
          if (isset($node->widgetConfig->urlParameterNameType)) {
            $paramValues = explode('~', $param);
            switch($node->widgetConfig->urlParameterNameType){
              case 'capitalize':
                $values = [];
                foreach ($paramValues as $value){
                  $values[] = strtoupper($value);
                }
                $parameters[$urlParamMap[$node->widgetConfig->urlParameterName]] = array(data_controller_get_operator_factory_instance()->initiateHandler(EqualOperatorHandler::$OPERATOR__NAME, $values));
                break;
              case 'eqtext':
              default:
                $patterns = array();
                foreach ($paramValues as $value) {
                  $value = checkbook_faceted_search_replaceSlash($value);
                  $value = pg_escape_string(htmlspecialchars_decode($value));
                  $patterns[] = "(^" . _checkbook_regex_replace_pattern($value) . "$)";
                }
                $parameters[$urlParamMap[$node->widgetConfig->urlParameterName]] = array(data_controller_get_operator_factory_instance()->initiateHandler(RegularExpressionOperatorHandler::$OPERATOR__NAME, implode($patterns, "|")));
                break;
            }
          } else {
            $param = checkbook_faceted_search_replaceSlash($param);
            $param = pg_escape_string(htmlspecialchars_decode($param));
            $parameters[$urlParamMap[$node->widgetConfig->urlParameterName]] = array(data_controller_get_operator_factory_instance()->initiateHandler(EqualOperatorHandler::$OPERATOR__NAME, $param));
          }
          $resultFormatter = new SpecialCharacterResultFormatter(NULL, new ArrayResultFormatter());
          $checked_items = $dataController->queryCube(_update_dataset_datasource($node->widgetConfig->dataset), $node->widgetConfig->columns, $parameters, null, null, null, $resultFormatter);
        }
      } catch (Exception $e) {
        log_error($e->getMessage());
      }
      if ($checked_items[0]['txcount']) {
        if (count($checked_items[0]) == 2) {
          $output['checked'][] = array($checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[1])]);
        } else {
          $output['checked'][] = array($checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[1])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[2])]);
        }
      }
      if ($checked_items[0]['count_vendorcode']) {
        if (count($checked_items[0]) == 2) {
          $output['checked'][] = array($checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[1])]);
        } else {
          $output['checked'][] = array($checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[1])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[2])]);
        }

      }
      if ($checked_items[0]['title_count']) {
        if (count($checked_items[0]) == 2) {
          $output['checked'][] = array($checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[1])]);
        } else {
          $output['checked'][] = array($checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[1])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[2])]);
        }
      }
      if ($checked_items[0]['agency_count']) {
        if (count($checked_items[0]) == 2) {
          $output['checked'][] = array($checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[1])]);
        } else {
          $output['checked'][] = array($checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[1])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[2])]);
        }
      }
      if ($checked_items[0]['emp_count']) {
        if (count($checked_items[0]) == 2) {
          $output['checked'][] = array($checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[1])]);
        } else {
          $output['checked'][] = array($checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[1])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[2])]);
        }
      }
      $custom_count = $checked_items[0]['count_prime_mwbe'] || $checked_items[0]['count_sub_mwbe'];
      $custom_count = $custom_count || $checked_items[0]['count_prime_records'] || $checked_items[0]['count_sub_records'];
      if ($custom_count) {
        if (count($checked_items[0]) == 2) {
          $output['checked'][] = array($checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[1])]);
        } else {
          $output['checked'][] = array($checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[0])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[1])]
          , $checked_items[0][str_replace('.', '_', $node->widgetConfig->columns[2])]);
        }
      }
    }
  }

  // Facet preselection for NYCHA amount links
  $setAutoDeselect= RequestUtil::isNychaAmountLinks();
  $pagetype = PageType::getCurrent();

  //Facets that have Url parameters that match the current Url will be disabled and show only the default checked items
  //$disableFacet = isset($node->widgetConfig->allowFacetDeselect) ? $node->widgetConfig->allowFacetDeselect : false;
  if (($pagetype != 'advanced_search_page') && (!(isset($node->widgetConfig->allowFacetDeselect)) || ($setAutoDeselect == 1))){
    $disableFacet = true;
  }

  if ($disableFacet) { //only URL parameters count and can be disabled
      $url_ref = $_SERVER['HTTP_REFERER'];
      $disableFacet = preg_match('"/' . $node->widgetConfig->urlParameterName . '/"', $url_ref);
  }

  if ($disableFacet) {
    $output['unchecked'] = null;
  } else {
    foreach ($data as $row) {
      if (count($row) == 2) {
        $output['unchecked'][] = array($row[str_replace('.', '_', $node->widgetConfig->columns[0])]
        , $row[str_replace('.', '_', $node->widgetConfig->columns[0])]
        , $row[str_replace('.', '_', $node->widgetConfig->columns[1])]);
      } else {
        $output['unchecked'][] = array($row[str_replace('.', '_', $node->widgetConfig->columns[0])]
        , $row[str_replace('.', '_', $node->widgetConfig->columns[1])]
        , $row[str_replace('.', '_', $node->widgetConfig->columns[2])]);
      }
    }
  }
  $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
  $output['autocomplete_field_name'] = $node->widgetConfig->urlParameterName;
  $output['autocomplete_param_name'] = $node->widgetConfig->autocompleteParamName;
  return $output;
}

/**
 * @param $node
 * @return array
 */
function _checkbook_faceted_search_update_data_range_filter($node)
{
  $data = $node->data;
  $rangeColumnNameVariant = $node->widgetConfig->rangeColumnNameVariant;
  $output = array();
  $output['filter_name'] = $node->widgetConfig->filterName;
  $params = explode('~', RequestUtilities::get($node->widgetConfig->urlParameterName));
  if (!is_array($data[0])) {
    $data = array(0 => array());
  }
  switch ($node->widgetConfig->filterName) {
    case "Committed Expense Budget":
      if($node->nid == '1042') {
        $initial[0] = array(6, 'Greater than $100M', $data[0]['committed_g100m_' . $rangeColumnNameVariant . 'count']);
        $initial[1] = array(5, '$51M - $100M', $data[0]['committed_g50m_le100m_' . $rangeColumnNameVariant . 'count']);
        $initial[2] = array(4, '$26M - $50M', $data[0]['committed_g25m_le50m_' . $rangeColumnNameVariant . 'count']);
        $initial[3] = array(3, '$11M - $25M', $data[0]['committed_g10m_le25m_' . $rangeColumnNameVariant . 'count']);
        $initial[4] = array(2, '$1M - $10M', $data[0]['committed_ge1m_le10m_' . $rangeColumnNameVariant . 'count']);
        $initial[5] = array(1, 'Less than $1M', $data[0]['committed_less1m_' . $rangeColumnNameVariant . 'count']);
      }
      break;
    default :
      $initial[0] = array(6, 'Greater than $100M', $data[0]['g100m_' . $rangeColumnNameVariant . 'count']);
      $initial[1] = array(5, '$51M - $100M', $data[0]['g50m_le100m_' . $rangeColumnNameVariant . 'count']);
      $initial[2] = array(4, '$26M - $50M', $data[0]['g25m_le50m_' . $rangeColumnNameVariant . 'count']);
      $initial[3] = array(3, '$11M - $25M', $data[0]['g10m_le25m_' . $rangeColumnNameVariant . 'count']);
      $initial[4] = array(2, '$1M - $10M', $data[0]['ge1m_le10m_' . $rangeColumnNameVariant . 'count']);
      $initial[5] = array(1, 'Less than $1M', $data[0]['less1m_' . $rangeColumnNameVariant . 'count']);
      break;
  }
  //sort
  /*usort($initial,
      function($a, $b)
      {
          if ($a[2] == $b[2]) {
              return 0;
          }
          return ($a[2] > $b[2]) ? -1 : 1;
      }
  );*/

  for ($i = 0; $i < 6; $i++) {
    $checked = false;
    foreach ($params as $param) {
      if ($param == $initial[$i][0]) {
        $checked = true;
      }
    }
    if ($checked) {
      $output['checked'][] = $initial[$i];
    } else {
      if ($initial[$i][2] > 0) {
        $output['unchecked'][] = $initial[$i];
      }
    }
  }
  $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
  return $output;
}

/**
 * @param $node
 * @return array
 */
function _checkbook_faceted_search_update_data_logical_or_filter($node)
{
  $data = $node->data;
  $output = array();
  $output['filter_name'] = $node->widgetConfig->filterName;
  $params = explode('~', RequestUtilities::get($node->widgetConfig->urlParameterName));
  if (!is_array($data[0])) {
    $data = array(0 => array());
  }
  $name = $id = $count = null;
  foreach ($data as $row) {
    if (count($row) == 2) {
      $id = str_replace('.', '_', $node->widgetConfig->columns[0]);
      $name = str_replace('.', '_', $node->widgetConfig->columns[0]);
      $count = str_replace('.', '_', $node->widgetConfig->columns[1]);
    } else {
      $id = str_replace('.', '_', $node->widgetConfig->columns[0]);
      $name = str_replace('.', '_', $node->widgetConfig->columns[1]);
      $count = str_replace('.', '_', $node->widgetConfig->columns[2]);
    }

    $id = $row[$id];
    $name = $row[$name];
    $count = $row[$count];

    if ($count > 0) {
      $ids = explode('~', $id);
      if (is_array($ids) && isset($ids[0])) {
        foreach ($ids as $id_split) {
          if (in_array($id_split, $params)) {
            //checked
            $output['checked'][] = array($id_split, $name, $count);
          } else {
            //unchecked
            $output['unchecked'][] = array($id_split, $name, $count);
          }
        }
      }
    }
  }
  $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
  return $output;
}

/**
 * @param $node
 * @return array
 */
function _checkbook_faceted_search_update_data_union_or_filter($node)
{
  $data = $node->data;
  $output = array();
  $output['filter_name'] = $node->widgetConfig->filterName;
  $params = explode('~', RequestUtilities::get($node->widgetConfig->urlParameterName));

  if (!is_array($data[0])) {
    $data = array(0 => array());
  }

  $checked = $unchecked = array();
  foreach ($data as $row) {

    $name = $id = $count = null;
    $series_index = 0;
    while (!isset($id)) {
      $id = $row[str_replace('.', '_', $node->widgetConfig->model->series[$series_index]->columns[0])];
      $name = $row[str_replace('.', '_', $node->widgetConfig->model->series[$series_index]->columns[1])];
      $count = $row[str_replace('.', '_', $node->widgetConfig->model->series[$series_index]->columns[2])];
      $series_index++;
    }

    if ($count > 0) {
      $ids = explode('~', $id);
      if (is_array($ids) && isset($ids[0])) {
        foreach ($ids as $id_split) {
          if (in_array($id_split, $params)) {
            //checked
            $blnFound = false;
            foreach ($checked as $key => $checked_item) {
              if ($checked_item[0] == $id_split) {
                $checked[$key][2] += $count;
                $blnFound = true;
              }
            }
            if (!$blnFound) {
              $checked[] = array($id_split, $name, $count);
            }
          } else {
            //unchecked
            $blnFound = false;
            foreach ($unchecked as $key => $unchecked_item) {
              if ($unchecked_item[0] == $id_split) {
                $unchecked[$key][2] += $count;
                $blnFound = true;
              }
            }
            if (!$blnFound) {
              $unchecked[] = array($id_split, $name, $count);
            }
          }
        }
      }
    }
  }

  $output['checked'] = $checked;
  $output['unchecked'] = $unchecked;
  $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
  return $output;
}

/**
 * @param $node
 * @return array
 */
function _checkbook_faceted_search_update_data_range2_filter($node)
{
  $data = $node->data;
  $output = array();
  $output['filter_name'] = $node->widgetConfig->filterName;
  $params = explode('~', RequestUtilities::get($node->widgetConfig->urlParameterName));
  if (!is_array($data[0])) {
    $data = array(0 => array());
  }

  $initial[0] = array(6, 'Greater than $5B', $data[0]['g5b_count']);
  $initial[1] = array(5, '$4B - $5B', $data[0]['g4b_le5b_count']);
  $initial[2] = array(4, '$3B - $4B', $data[0]['g3b_le4b_count']);
  $initial[3] = array(3, '$2B - $3B', $data[0]['g2b_le3b_count']);
  $initial[4] = array(2, '$1B - $2B', $data[0]['g1b_le2b_count']);
  $initial[5] = array(1, 'Less than $1B', $data[0]['less1b_count']);
  for ($i = 0; $i < 6; $i++) {
    $checked = false;
    foreach ($params as $param) {
      if ($param == $initial[$i][0]) {
        $checked = true;
      }
    }
    if ($checked) {
      $output['checked'][] = $initial[$i];
    } else {
      if ($initial[$i][2] > 0) {
        $output['unchecked'][] = $initial[$i];
      }
    }
  }
  $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
  return $output;
}

/**
 * @param $node
 * @return array
 */
function _checkbook_faceted_search_update_data_range3_filter($node)
{
  $data = $node->data;
  $output = array();
  $output['filter_name'] = $node->widgetConfig->filterName;
  $params = explode('~', RequestUtilities::get($node->widgetConfig->urlParameterName));
  if (!is_array($data[0])) {
    $data = array(0 => array());
  }
  switch ($node->widgetConfig->filterName) {
    case "Overtime Payment":
      switch ($node->nid) {
        case 889:
          $initial[0] = array(5, 'Greater than 250K', $data[0]['overtime_pay_g250k_count_title']);
          $initial[1] = array(4, '101K-250K', $data[0]['overtime_pay_g101k_le250k_count_title']);
          $initial[2] = array(3, '51K-100K', $data[0]['overtime_pay_g51k_le100k_count_title']);
          $initial[3] = array(2, '20K-50K', $data[0]['overtime_pay_ge20k_le50k_count_title']);
          $initial[4] = array(1, 'Less than 20K', $data[0]['overtime_pay_less20k_count_title']);
          break;
        default:
          $initial[0] = array(5, 'Greater than 250K', $data[0]['overtime_pay_g250k_count']);
          $initial[1] = array(4, '101K-250K', $data[0]['overtime_pay_g101k_le250k_count']);
          $initial[2] = array(3, '51K-100K', $data[0]['overtime_pay_g51k_le100k_count']);
          $initial[3] = array(2, '20K-50K', $data[0]['overtime_pay_ge20k_le50k_count']);
          $initial[4] = array(1, 'Less than 20K', $data[0]['overtime_pay_less20k_count']);
          break;
      }
      break;
    case "Annual Salary":
      switch ($node->nid) {
        case 888:
          $initial[0] = array(5, 'Greater than 250K', $data[0]['annual_salary_g250k_count_title']);
          $initial[1] = array(4, '101K-250K', $data[0]['annual_salary_g101k_le250k_count_title']);
          $initial[2] = array(3, '51K-100K', $data[0]['annual_salary_g51k_le100k_count_title']);
          $initial[3] = array(2, '20K-50K', $data[0]['annual_salary_ge20k_le50k_count_title']);
          $initial[4] = array(1, 'Less than 20K', $data[0]['annual_salary_less20k_count_title']);
          break;
        default:
          $initial[0] = array(5, 'Greater than 250K', $data[0]['annual_salary_g250k_count']);
          $initial[1] = array(4, '101K-250K', $data[0]['annual_salary_g101k_le250k_count']);
          $initial[2] = array(3, '51K-100K', $data[0]['annual_salary_g51k_le100k_count']);
          $initial[3] = array(2, '20K-50K', $data[0]['annual_salary_ge20k_le50k_count']);
          $initial[4] = array(1, 'Less than 20K', $data[0]['annual_salary_less20k_count']);
          break;
      }
      break;
    case "Gross Pay YTD":
      switch ($node->nid) {
        case 871:
        case 902:
          $initial[0] = array(5, 'Greater than 250K', $data[0]['gross_pay_ytd_g250k_count']);
          $initial[1] = array(4, '101K-250K', $data[0]['gross_pay_ytd_g101k_le250k_count']);
          $initial[2] = array(3, '51K-100K', $data[0]['gross_pay_ytd_g51k_le100k_count']);
          $initial[3] = array(2, '20K-50K', $data[0]['gross_pay_ytd_ge20k_le50k_count']);
          $initial[4] = array(1, 'Less than 20K', $data[0]['gross_pay_ytd_less20k_count']);
          break;
        case 877:
        case 909:
          $initial[0] = array(5, 'Greater than 250K', $data[0]['gross_pay_cytd_g250k_count']);
          $initial[1] = array(4, '101K-250K', $data[0]['gross_pay_cytd_g101k_le250k_count']);
          $initial[2] = array(3, '51K-100K', $data[0]['gross_pay_cytd_g51k_le100k_count']);
          $initial[3] = array(2, '20K-50K', $data[0]['gross_pay_cytd_ge20k_le50k_count']);
          $initial[4] = array(1, 'Less than 20K', $data[0]['gross_pay_cytd_less20k_count']);
          break;
        case 887:
          $initial[0] = array(5, 'Greater than 250K', $data[0]['gross_pay_g250k_count_title']);
          $initial[1] = array(4, '101K-250K', $data[0]['gross_pay_g101k_le250k_count_title']);
          $initial[2] = array(3, '51K-100K', $data[0]['gross_pay_g51k_le100k_count_title']);
          $initial[3] = array(2, '20K-50K', $data[0]['gross_pay_ge20k_le50k_count_title']);
          $initial[4] = array(1, 'Less than 20K', $data[0]['gross_pay_less20k_count_title']);
          break;
        /* case 902:
             $initial[0] = array(5, 'Greater than 250K', $data[0]['gross_pay_ytd_g250k_count']);
             $initial[1] = array(4, '101K-250K', $data[0]['gross_pay_ytd_g101k_le250k_count']);
             $initial[2] = array(3, '51K-100K', $data[0]['gross_pay_ytd_g51k_le100k_count']);
             $initial[3] = array(2, '20K-50K', $data[0]['gross_pay_ytd_ge20k_le50k_count']);
             $initial[4] = array(1, 'Less than 20K', $data[0]['gross_pay_ytd_less20k_count']);
             break;
        */
        /* case 909:
             $initial[0] = array(5, 'Greater than 250K', $data[0]['gross_pay_cytd_g250k_count']);
             $initial[1] = array(4, '101K-250K', $data[0]['gross_pay_cytd_g101k_le250k_count']);
             $initial[2] = array(3, '51K-100K', $data[0]['gross_pay_cytd_g51k_le100k_count']);
             $initial[3] = array(2, '20K-50K', $data[0]['gross_pay_cytd_ge20k_le50k_count']);
             $initial[4] = array(1, 'Less than 20K', $data[0]['gross_pay_cytd_less20k_count']);
             break;
        */
        default:
          $initial[0] = array(5, 'Greater than 250K', $data[0]['gross_pay_g250k_count']);
          $initial[1] = array(4, '101K-250K', $data[0]['gross_pay_g101k_le250k_count']);
          $initial[2] = array(3, '51K-100K', $data[0]['gross_pay_g51k_le100k_count']);
          $initial[3] = array(2, '20K-50K', $data[0]['gross_pay_ge20k_le50k_count']);
          $initial[4] = array(1, 'Less than 20K', $data[0]['gross_pay_less20k_count']);
          break;
      }
      break;
  }
  for ($i = 0; $i < 5; $i++) {
    $checked = false;
    foreach ($params as $param) {
      if ($param == $initial[$i][0] && $initial[$i][2] > 0) {
        $checked = true;
      }
    }
    if ($checked) {
      $output['checked'][] = $initial[$i];
    } else {
      if ($initial[$i][2] > 0) {
        $output['unchecked'][] = $initial[$i];
      }
    }
  }
  $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
  return $output;
}

/**
 * @param $node
 */
function checkbook_faceted_search_adjust_param($node)
{
  if ($_REQUEST['page']) {
    $page = $_REQUEST['page'];
    $limit = $node->widgetConfig->limit;
    if ($page > 0) {
      $node->widgetConfig->limit = 2 * $limit;
      $node->widgetConfig->startWith = ($page - 1) * $limit;
    }
  }
}

/**
 * Preprocess function for individual_filter.tpl.php
 *
 * @param $variables
 */
function checkbook_faceted_search_preprocess_individual_filter(&$variables)
{
  $node = $variables['node'];
  $logicalOrFacet = $node->widgetConfig->logicalOrFacet;
  $unionOrFacet = $node->widgetConfig->unionOrFacet;
  if ($node->widgetConfig->urlParameterType == "rangeid") {
    $data = _checkbook_faceted_search_update_data_range_filter($node);
  } elseif ($node->widgetConfig->urlParameterType == "rangeid2") {
    $data = _checkbook_faceted_search_update_data_range2_filter($node);
  } elseif ($node->widgetConfig->urlParameterType == "rangeid3") {
    $data = _checkbook_faceted_search_update_data_range3_filter($node);
  } elseif (isset($logicalOrFacet) && $logicalOrFacet) {
    $data = _checkbook_faceted_search_update_data_logical_or_filter($node);
  } elseif (isset($unionOrFacet) && $unionOrFacet) {
    $data = _checkbook_faceted_search_update_data_union_or_filter($node);
  } else {
    $data = _checkbook_faceted_search_update_data($node);
  }
  $variables['filter_name'] = $data['filter_name'];
  $variables['checked'] = $data['checked'];
  $variables['unchecked'] = $data['unchecked'];
  $variables['autocomplete_id'] = $data['autocomplete_id'];
  $variables['autocomplete_field_name'] = $data['autocomplete_field_name'];
  $variables['autocomplete_param_name'] = $data['autocomplete_param_name'];

  if (in_array($node->nid, [518, 540, 566, 709, 702, 768]) && !preg_match("/\/agency\//", $_GET['q'])) {
    $variables['hide_filter'] = ' style="display:none" ';
  } else {
    $variables['hide_filter'] = "";
  }

}

/**
 * @param $variables
 */
function checkbook_faceted_search_preprocess_pagination(&$variables)
{
  $node = $variables['node'];
  $logicalOrFacet = $node->widgetConfig->logicalOrFacet;
  $unionOrFacet = $node->widgetConfig->unionOrFacet;
  if ($node->widgetConfig->urlParameterType == "rangeid") {
    $data = _checkbook_faceted_search_update_data_range_filter($node);
  } elseif ($node->widgetConfig->urlParameterType == "rangeid2") {
    $data = _checkbook_faceted_search_update_data_range2_filter($node);
  } elseif ($node->widgetConfig->urlParameterType == "rangeid3") {
    $data = _checkbook_faceted_search_update_data_range3_filter($node);
  } elseif (isset($logicalOrFacet) && $logicalOrFacet) {
    $data = _checkbook_faceted_search_update_data_logical_or_filter($node);
  } elseif (isset($unionOrFacet) && $unionOrFacet) {
    $data = _checkbook_faceted_search_update_data_union_or_filter($node);
  } else {
    $data = _checkbook_faceted_search_update_data($node);
  }

  $variables['filter_name'] = $data['filter_name'];
  $variables['checked'] = $data['checked'];
  $variables['unchecked'] = $data['unchecked'];
  $variables['autocomplete_id'] = $data['autocomplete_id'];
  $variables['urlParameter'] = $node->widgetConfig->urlParameterName;
}

/**
 * Preprocess function for smart_search_filter.tpl.php
 *
 * @param $variables
 */

function checkbook_faceted_search_preprocess_smart_search_filter(&$variables)
{
  $solr_datasource = $variables['solr_datasource'];

  $facet_config = CheckbookSolr::getFacetConfigByDatasource($solr_datasource);

  $facets_render = [];

  foreach (array_merge($variables['facets']['facet_fields'] ?? [], $variables['facets']['facet_intervals'] ?? [])
           as $facet => $results) {
    if (!$results) {
      continue;
    }
    if (!isset($facet_config->$facet)) {
      LogHelper::log_warn("Facet {$facet} is undefined");
    }
    $facets_render[$facet] = $facet_config->$facet;
    // apply json config `prepare_results` function
    if ($prepare_fn = $facet_config->$facet->prepare_results) {
      $results = $prepare_fn($results);
    }
    $facets_render[$facet]->results = array_slice($results, 0, 100, true);
  }

  $selected = $variables['selected_facet_results'];
  if (sizeof($selected)) {
    foreach ($selected as $facet => $values) {
      $facets_render[$facet]->selected = $values;
    }
  }

  $variables['facets_render'] = $facets_render;
}

/**
 * @param $string
 * @return mixed
 */
function checkbook_faceted_search_replaceSlash($string)
{
  return str_replace('__', '/', $string);
}
