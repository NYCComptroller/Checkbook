<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
*
* Copyright (C) 2012, 2013 New York City
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * Implements hook_menu()
 */

function checkbook_faceted_search_menu() {
  return array(
    'faceted-search/ajax/node' => array(
      'type' => MENU_CALLBACK,
      'page callback' => '_checkbook_faceted_search_node_ajax',
      'page arguments' => array(3),
      'access callback' => TRUE
    ),
    'faceted-search/ajax/pagination' => array(
      'type' => MENU_CALLBACK,
      'page callback' => '_checkbook_faceted_search_node_pagination',
      'page arguments' => array(3),
      'access callback' => TRUE
    ),
    'faceted-search/ajax/autocomplete' => array(
      'type' => MENU_CALLBACK,
      'page callback' => '_checkbook_faceted_search_node_autocomplete',
      'access callback' => TRUE
    )
  );
}

/**
 * Implements hook_theme()
 */

function checkbook_faceted_search_theme($existing, $type, $theme, $path) {
  return array(
    'smart_search_filter' => array(
      'template' => 'smart-search-filter',
      'arguments' => array('facets' => NULL, 'active_contracts' => NULL, 'registered_contracts' => NULL)
    ),
    'individual_filter' => array(
      'template' => 'individual-filter',
      'arguments' => array('node'=>NULL)
    ),
    'pagination' => array(
      'template' => 'pagination',
      'arguments' => array('node'=>NULL)
    )
  );
}

function _checkbook_faceted_search_node_ajax($nid) {
  $node = node_load($nid);
  widget_config($node);
  widget_prepare($node);
  widget_invoke($node, 'widget_prepare');
  widget_data($node);
  print theme('individual_filter', array('node' => $node));
}

function _checkbook_faceted_search_node_pagination($nid){
  $node = node_load($nid);
  widget_config($node);
  widget_prepare($node);
  widget_invoke($node, 'widget_prepare');
  widget_data($node);
  print theme('pagination', array('node' => $node));
  return;
}

function _checkbook_faceted_search_node_autocomplete(){
  $nid = RequestUtilities::getRequestParamValue('node');
  $node = node_load($nid);
  widget_config($node);
  widget_prepare($node);
  widget_invoke($node, 'widget_prepare');
  $node->widgetConfig->limit = 10;
  widget_data($node);
  $node->data = _checkbook_faceted_search_update_data($node);
  if(count($node->data['unchecked']) == 0) {
    return drupal_json_output(array("No Matches Found"));
  }
  $output = array();

  foreach( $node->data['unchecked'] as $row ){
    if(isset($row[1]))
      $output[] =  array("value"=>urlencode(html_entity_decode($row[0],ENT_QUOTES)), 'label'=>html_entity_decode($row[1],ENT_QUOTES) . " (" . $row[2] . ")" );
  }
  return drupal_json_output($output);
}

function _checkbook_faceted_search_update_data($node) {
    $data = $node->data;
    $output = array();
    $output['filter_name'] = $node->widgetConfig->filterName;
    $params = explode('~', RequestUtilities::getRequestParamValue($node->widgetConfig->urlParameterName));

    //The value in this facet can be 0
    if($node->widgetConfig->allowZeroValue == true) {
        $filter = $params[0] != "";
    }
    else {
        $filter = $params[0];
    }
    if ($filter) {
        foreach ($params as $param) {
            try {
                if(isset($node->widgetConfig->widgetDataFilterLoader)){
                    $node->param = $param;
                    eval($node->widgetConfig->widgetDataFilterLoader);
                    $checked_items = $node->checked_items;
                }
                else {
                    $dataController = data_controller_get_instance();
                    $parameters = $node->nodeAdjustedParamaterConfig;
                    $urlParamMap = ( array ) $node->widgetConfig->urlParamMap;
                    if(isset($node->widgetConfig->urlParameterNameType)){
                        $paramValues =  explode('~', $param);
                        $patterns = array();
                        foreach($paramValues as $value){
                            $value = checkbook_faceted_search_replaceSlash($value);
                            $patterns[] = "(^" . _checkbook_regex_replace_pattern($value) . "$)";
                        }
                        $parameters[$urlParamMap[$node->widgetConfig->urlParameterName]] = array(data_controller_get_operator_factory_instance()->initiateHandler(RegularExpressionOperatorHandler::$OPERATOR__NAME, implode($patterns,"|")));
                    }else{
                        $param = checkbook_faceted_search_replaceSlash($param);
                        $parameters[$urlParamMap[$node->widgetConfig->urlParameterName]] = array(data_controller_get_operator_factory_instance()->initiateHandler(EqualOperatorHandler::$OPERATOR__NAME, $param));
                    }
                    $resultFormatter = new SpecialCharacterResultFormatter(NULL,new ArrayResultFormatter());
                    $checked_items = $dataController->queryCube(_update_dataset_datasource($node->widgetConfig->dataset), $node->widgetConfig->columns, $parameters,null, null, null, $resultFormatter);
                }
            } catch (Exception $e) {
                log_error($e->getMessage());
            }
            if($checked_items[0]['txcount']){
                if(count($checked_items[0]) == 2){
                    $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]);
                }else{
                    $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[2])]);
                }
            }
            if($checked_items[0]['title_count']){
                if(count($checked_items[0]) == 2){
                    $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]);
                }else{
                    $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[2])]);
                }
            }
            if($checked_items[0]['agency_count']){
                if(count($checked_items[0]) == 2){
                    $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]);
                }else{
                    $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[2])]);
                }
            }
            if($checked_items[0]['emp_count']){
                if(count($checked_items[0]) == 2){
                    $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]);
                }else{
                    $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[2])]);
                }
            }
            $custom_count = $checked_items[0]['count_prime_mwbe'] || $checked_items[0]['count_sub_mwbe'];
            $custom_count = $custom_count || $checked_items[0]['count_prime_records'] || $checked_items[0]['count_sub_records'];
            if($custom_count){
                if(count($checked_items[0]) == 2){
                    $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]);
                }else{
                    $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]
                    ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[2])]);
                }
            }
        }
    }

    //Facets that have Url parameters that match the current Url will be disabled and show only the default checked items
    $disableFacet = !(isset($node->widgetConfig->allowFacetDeselect) ? $node->widgetConfig->allowFacetDeselect : false);
    if($disableFacet) { //only URL parameters count and can be disabled
        $query_string = $_GET['q'];
        $is_new_window = preg_match('/newwindow/i',$query_string);
        $url_ref = $is_new_window ? $_GET['q'] : $_SERVER['HTTP_REFERER'];
        $disableFacet = preg_match('"/'.$node->widgetConfig->urlParameterName.'/"',$url_ref);
    }

    if($disableFacet) {
        $output['unchecked'] = null;
    }
    else {
        foreach ($data as $row) {
            if(count($row) == 2){
                $output['unchecked'][] = array($row[str_replace('.','_',$node->widgetConfig->columns[0])]
                ,$row[str_replace('.','_',$node->widgetConfig->columns[0])]
                ,$row[str_replace('.','_',$node->widgetConfig->columns[1])]);
            }
            else{
                $output['unchecked'][] = array($row[str_replace('.','_',$node->widgetConfig->columns[0])]
                ,$row[str_replace('.','_',$node->widgetConfig->columns[1])]
                ,$row[str_replace('.','_',$node->widgetConfig->columns[2])]);
            }
        }
    }
  $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
  $output['autocomplete_field_name'] = $node->widgetConfig->urlParameterName;
  $output['autocomplete_param_name'] = $node->widgetConfig->autocompleteParamName;
  return $output;
}

function _checkbook_faceted_search_update_data_range_filter($node){
    $data = $node->data;
    $rangeColumnNameVariant = $node->widgetConfig->rangeColumnNameVariant;
    $output = array();
    $output['filter_name'] = $node->widgetConfig->filterName;
    $params = explode('~',RequestUtilities::getRequestParamValue($node->widgetConfig->urlParameterName));
    if(!is_array($data[0])){
      $data = array(0=>array());
    }
    $initial[0] = array(6, 'Greater than $100M', $data[0]['g100m_'.$rangeColumnNameVariant.'count']);
    $initial[1] = array(5, '$51M - $100M', $data[0]['g50m_le100m_'.$rangeColumnNameVariant.'count']);
    $initial[2] = array(4, '$26M - $50M', $data[0]['g25m_le50m_'.$rangeColumnNameVariant.'count']);
    $initial[3] = array(3, '$11M - $25M', $data[0]['g10m_le25m_'.$rangeColumnNameVariant.'count']);
    $initial[4] = array(2, '$1M - $10M', $data[0]['ge1m_le10m_'.$rangeColumnNameVariant.'count']);
    $initial[5] = array(1, 'Less than $1M', $data[0]['less1m_'.$rangeColumnNameVariant.'count']);

    //sort
    /*usort($initial,
        function($a, $b)
        {
            if ($a[2] == $b[2]) {
                return 0;
            }
            return ($a[2] > $b[2]) ? -1 : 1;
        }
    );*/

    for ($i = 0; $i < 6; $i++){
      $checked = false;
      foreach ($params as $param){
        if ($param == $initial[$i][0]){
          $checked = true;
        }
      }
      if ($checked){
        $output['checked'][] = $initial[$i];
      } else {
        if($initial[$i][2] > 0){
          $output['unchecked'][] = $initial[$i];
        }
      }
    }
    $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
    return $output;
}

function _checkbook_faceted_search_update_data_logical_or_filter($node){
    $data = $node->data;
    $output = array();
    $output['filter_name'] = $node->widgetConfig->filterName;
    $params = explode('~',RequestUtilities::getRequestParamValue($node->widgetConfig->urlParameterName));
    if(!is_array($data[0])){
        $data = array(0=>array());
    }
    $name = $id = $count = null;
    foreach($data as $row) {
        if(count($row) == 2) {
            $id = str_replace('.','_',$node->widgetConfig->columns[0]);
            $name = str_replace('.','_',$node->widgetConfig->columns[0]);
            $count = str_replace('.','_',$node->widgetConfig->columns[1]);
        }
        else {
            $id = str_replace('.','_',$node->widgetConfig->columns[0]);
            $name = str_replace('.','_',$node->widgetConfig->columns[1]);
            $count = str_replace('.','_',$node->widgetConfig->columns[2]);
        }

        $id = $row[$id];
        $name = $row[$name];
        $count = $row[$count];

        if($count > 0) {
            $ids = explode('~',$id);
            if(is_array($ids) && isset($ids[0])) {
                foreach($ids as $id_split) {
                    if (in_array($id_split, $params)) {
                        //checked
                        $output['checked'][] = array($id_split,$name,$count);
                    }
                    else {
                        //unchecked
                        $output['unchecked'][] = array($id_split,$name,$count);
                    }
                }
            }
        }
    }
    $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
    return $output;
}

function _checkbook_faceted_search_update_data_union_or_filter($node){
    $data = $node->data;
    $output = array();
    $output['filter_name'] = $node->widgetConfig->filterName;
    $params = explode('~',RequestUtilities::getRequestParamValue($node->widgetConfig->urlParameterName));

    if(!is_array($data[0])){
        $data = array(0=>array());
    }

    $checked = $unchecked = array();
    foreach($data as $row) {

        $name = $id = $count = null;
        $series_index = 0;
        while(!isset($id)) {
            $id = $row[str_replace('.','_',$node->widgetConfig->model->series[$series_index]->columns[0])];
            $name = $row[str_replace('.','_',$node->widgetConfig->model->series[$series_index]->columns[1])];
            $count = $row[str_replace('.','_',$node->widgetConfig->model->series[$series_index]->columns[2])];
            $series_index++;
        }

        if($count > 0) {
            $ids = explode('~',$id);
            if(is_array($ids) && isset($ids[0])) {
                foreach($ids as $id_split) {
                    if (in_array($id_split, $params)) {
                        //checked
                        $blnFound = false;
                        foreach($checked as $key => $checked_item) {
                            if($checked_item[0] == $id_split) {
                                $checked[$key][2] += $count;
                                $blnFound = true;
                            }
                        }
                        if(!$blnFound) {
                            $checked[] = array($id_split,$name,$count);
                        }
                    }
                    else {
                        //unchecked
                        $blnFound = false;
                        foreach($unchecked as $key => $unchecked_item) {
                            if($unchecked_item[0] == $id_split) {
                                $unchecked[$key][2] += $count;
                                $blnFound = true;
                            }
                        }
                        if(!$blnFound) {
                            $unchecked[] = array($id_split,$name,$count);
                        }
                    }
                }
            }
        }
    }

    $output['checked'] = $checked;
    $output['unchecked'] = $unchecked;
    $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
    return $output;
}

function _checkbook_faceted_search_update_data_range2_filter($node){
  $data = $node->data;
  $output = array();
  $output['filter_name'] = $node->widgetConfig->filterName;
  $params = explode('~',RequestUtilities::getRequestParamValue($node->widgetConfig->urlParameterName));
  if(!is_array($data[0])){
    $data = array(0=>array());
  }

  $initial[0] = array(6, 'Greater than $5B', $data[0]['g5b_count']);
  $initial[1] = array(5, '$4B - $5B', $data[0]['g4b_le5b_count']);
  $initial[2] = array(4, '$3B - $4B', $data[0]['g3b_le4b_count']);
  $initial[3] = array(3, '$2B - $3B', $data[0]['g2b_le3b_count']);
  $initial[4] = array(2, '$1B - $2B', $data[0]['g1b_le2b_count']);
  $initial[5] = array(1, 'Less than $1B', $data[0]['less1b_count']);
for ($i = 0; $i < 6; $i++){
    $checked = false;
    foreach ($params as $param){
      if ($param == $initial[$i][0]){
        $checked = true;
      }
    }
    if ($checked){
      $output['checked'][] = $initial[$i];
    } else {
      if($initial[$i][2] > 0){
        $output['unchecked'][] = $initial[$i];
      }
    }
  }
  $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
  return $output;
}

function _checkbook_faceted_search_update_data_range3_filter($node){
    $data = $node->data;
    $output = array();
    $output['filter_name'] = $node->widgetConfig->filterName;
    $params = explode('~',RequestUtilities::getRequestParamValue($node->widgetConfig->urlParameterName));
    if(!is_array($data[0])){
        $data = array(0=>array());
    }
    switch($node->widgetConfig->filterName) {
        case "Overtime Payment":
            switch($node->nid){
                case 889:
                    $initial[0] = array(5, 'Greater than 250K', $data[0]['overtime_pay_g250k_count_title']);
                    $initial[1] = array(4, '101K-250K', $data[0]['overtime_pay_g101k_le250k_count_title']);
                    $initial[2] = array(3, '51K-100K', $data[0]['overtime_pay_g51k_le100k_count_title']);
                    $initial[3] = array(2, '20K-50K', $data[0]['overtime_pay_ge20k_le50k_count_title']);
                    $initial[4] = array(1, 'Less than 20K', $data[0]['overtime_pay_less20k_count_title']);
                    break;
                default:
                    $initial[0] = array(5, 'Greater than 250K', $data[0]['overtime_pay_g250k_count']);
                    $initial[1] = array(4, '101K-250K', $data[0]['overtime_pay_g101k_le250k_count']);
                    $initial[2] = array(3, '51K-100K', $data[0]['overtime_pay_g51k_le100k_count']);
                    $initial[3] = array(2, '20K-50K', $data[0]['overtime_pay_ge20k_le50k_count']);
                    $initial[4] = array(1, 'Less than 20K', $data[0]['overtime_pay_less20k_count']);
                    break;
            }
            break;
        case "Annual Salary":
            switch($node->nid){
                case 888:
                    $initial[0] = array(5, 'Greater than 250K', $data[0]['annual_salary_g250k_count_title']);
                    $initial[1] = array(4, '101K-250K', $data[0]['annual_salary_g101k_le250k_count_title']);
                    $initial[2] = array(3, '51K-100K', $data[0]['annual_salary_g51k_le100k_count_title']);
                    $initial[3] = array(2, '20K-50K', $data[0]['annual_salary_ge20k_le50k_count_title']);
                    $initial[4] = array(1, 'Less than 20K', $data[0]['annual_salary_less20k_count_title']);
                    break;
                default:
                    $initial[0] = array(5, 'Greater than 250K', $data[0]['annual_salary_g250k_count']);
                    $initial[1] = array(4, '101K-250K', $data[0]['annual_salary_g101k_le250k_count']);
                    $initial[2] = array(3, '51K-100K', $data[0]['annual_salary_g51k_le100k_count']);
                    $initial[3] = array(2, '20K-50K', $data[0]['annual_salary_ge20k_le50k_count']);
                    $initial[4] = array(1, 'Less than 20K', $data[0]['annual_salary_less20k_count']);
                    break;
            }
            break;
        case "Gross Pay YTD":
            switch($node->nid)
            {
                case 871:
                case 902:
                    $initial[0] = array(5, 'Greater than 250K', $data[0]['gross_pay_ytd_g250k_count']);
                    $initial[1] = array(4, '101K-250K', $data[0]['gross_pay_ytd_g101k_le250k_count']);
                    $initial[2] = array(3, '51K-100K', $data[0]['gross_pay_ytd_g51k_le100k_count']);
                    $initial[3] = array(2, '20K-50K', $data[0]['gross_pay_ytd_ge20k_le50k_count']);
                    $initial[4] = array(1, 'Less than 20K', $data[0]['gross_pay_ytd_less20k_count']);
                    break;
                case 877:
                case 909:
                    $initial[0] = array(5, 'Greater than 250K', $data[0]['gross_pay_cytd_g250k_count']);
                    $initial[1] = array(4, '101K-250K', $data[0]['gross_pay_cytd_g101k_le250k_count']);
                    $initial[2] = array(3, '51K-100K', $data[0]['gross_pay_cytd_g51k_le100k_count']);
                    $initial[3] = array(2, '20K-50K', $data[0]['gross_pay_cytd_ge20k_le50k_count']);
                    $initial[4] = array(1, 'Less than 20K', $data[0]['gross_pay_cytd_less20k_count']);
                    break;
                case 887:
                    $initial[0] = array(5, 'Greater than 250K', $data[0]['gross_pay_g250k_count_title']);
                    $initial[1] = array(4, '101K-250K', $data[0]['gross_pay_g101k_le250k_count_title']);
                    $initial[2] = array(3, '51K-100K', $data[0]['gross_pay_g51k_le100k_count_title']);
                    $initial[3] = array(2, '20K-50K', $data[0]['gross_pay_ge20k_le50k_count_title']);
                    $initial[4] = array(1, 'Less than 20K', $data[0]['gross_pay_less20k_count_title']);
                    break;
               /* case 902:
                    $initial[0] = array(5, 'Greater than 250K', $data[0]['gross_pay_ytd_g250k_count']);
                    $initial[1] = array(4, '101K-250K', $data[0]['gross_pay_ytd_g101k_le250k_count']);
                    $initial[2] = array(3, '51K-100K', $data[0]['gross_pay_ytd_g51k_le100k_count']);
                    $initial[3] = array(2, '20K-50K', $data[0]['gross_pay_ytd_ge20k_le50k_count']);
                    $initial[4] = array(1, 'Less than 20K', $data[0]['gross_pay_ytd_less20k_count']);
                    break;
               */
               /* case 909:
                    $initial[0] = array(5, 'Greater than 250K', $data[0]['gross_pay_cytd_g250k_count']);
                    $initial[1] = array(4, '101K-250K', $data[0]['gross_pay_cytd_g101k_le250k_count']);
                    $initial[2] = array(3, '51K-100K', $data[0]['gross_pay_cytd_g51k_le100k_count']);
                    $initial[3] = array(2, '20K-50K', $data[0]['gross_pay_cytd_ge20k_le50k_count']);
                    $initial[4] = array(1, 'Less than 20K', $data[0]['gross_pay_cytd_less20k_count']);
                    break;
               */
                default:
                    $initial[0] = array(5, 'Greater than 250K', $data[0]['gross_pay_g250k_count']);
                    $initial[1] = array(4, '101K-250K', $data[0]['gross_pay_g101k_le250k_count']);
                    $initial[2] = array(3, '51K-100K', $data[0]['gross_pay_g51k_le100k_count']);
                    $initial[3] = array(2, '20K-50K', $data[0]['gross_pay_ge20k_le50k_count']);
                    $initial[4] = array(1, 'Less than 20K', $data[0]['gross_pay_less20k_count']);
                    break;
            }
            break;
    }
    for ($i = 0; $i < 5; $i++){
        $checked = false;
        foreach ($params as $param){
            if ($param == $initial[$i][0] && $initial[$i][2] > 0){
                $checked = true;
            }
        }
        if ($checked){
            $output['checked'][] = $initial[$i];
        } else {
            if($initial[$i][2] > 0){
                $output['unchecked'][] = $initial[$i];
            }
        }
    }
    $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
    return $output;
}

function checkbook_faceted_search_adjust_param($node){
  if ($_REQUEST['page']){
    $page = $_REQUEST['page'];
    $limit = $node->widgetConfig->limit;
    if ($page > 0){
      $node->widgetConfig->limit = 2 * $limit;
      $node->widgetConfig->startWith = ( $page - 1 ) * $limit;
    }
  }
}

/**
 * Preprocess function for individual_filter.tpl.php
 *
 * @param $variables
 */
function checkbook_faceted_search_preprocess_individual_filter(&$variables){
    $node = $variables['node'];
    $logicalOrFacet = $node->widgetConfig->logicalOrFacet;
    $unionOrFacet = $node->widgetConfig->unionOrFacet;
    if($node->widgetConfig->urlParameterType=="rangeid"){
        $data = _checkbook_faceted_search_update_data_range_filter($node);
    }
    elseif($node->widgetConfig->urlParameterType=="rangeid2"){
        $data = _checkbook_faceted_search_update_data_range2_filter($node);
    }
    elseif($node->widgetConfig->urlParameterType=="rangeid3"){
        $data = _checkbook_faceted_search_update_data_range3_filter($node);
    }
    elseif(isset($logicalOrFacet) && $logicalOrFacet) {
        $data = _checkbook_faceted_search_update_data_logical_or_filter($node);
    }
    elseif(isset($unionOrFacet) && $unionOrFacet) {
        $data = _checkbook_faceted_search_update_data_union_or_filter($node);
    }
    else{
        $data = _checkbook_faceted_search_update_data($node);
    }
    $variables['filter_name'] = $data['filter_name'];
    $variables['checked'] = $data['checked'];
    $variables['unchecked'] = $data['unchecked'];
    $variables['autocomplete_id'] = $data['autocomplete_id'];
    $variables['autocomplete_field_name'] = $data['autocomplete_field_name'];
    $variables['autocomplete_param_name'] = $data['autocomplete_param_name'];
    if(($node->nid == 518 || $node->nid == 540 || $node->nid == 566 || $node->nid == 709 || $node->nid == 702 || $node->nid == 768)&& !preg_match("/\/agency\//",$_GET['q'])){
        $variables['hide_filter'] = ' style="display:none" ';
    }else{
        $variables['hide_filter'] = "";
    }

}

function checkbook_faceted_search_preprocess_pagination(&$variables){
    $node = $variables['node'];
    $logicalOrFacet = $node->widgetConfig->logicalOrFacet;
    $unionOrFacet = $node->widgetConfig->unionOrFacet;
    if($node->widgetConfig->urlParameterType=="rangeid") {
        $data = _checkbook_faceted_search_update_data_range_filter($node);
    }
    elseif($node->widgetConfig->urlParameterType=="rangeid2") {
        $data = _checkbook_faceted_search_update_data_range2_filter($node);
    }
    elseif($node->widgetConfig->urlParameterType=="rangeid3") {
        $data = _checkbook_faceted_search_update_data_range3_filter($node);
    }
    elseif(isset($logicalOrFacet) && $logicalOrFacet) {
        $data = _checkbook_faceted_search_update_data_logical_or_filter($node);
    }
    elseif(isset($unionOrFacet) && $unionOrFacet) {
        $data = _checkbook_faceted_search_update_data_union_or_filter($node);
    }
    else {
        $data = _checkbook_faceted_search_update_data($node);
    }

    $variables['filter_name'] = $data['filter_name'];
    $variables['checked'] = $data['checked'];
    $variables['unchecked'] = $data['unchecked'];
    $variables['autocomplete_id'] = $data['autocomplete_id'];
}

/**
 * Preprocess function for smart_search_filter.tpl.php
 *
 * @param $variables
 */

function checkbook_faceted_search_preprocess_smart_search_filter(&$variables) {
  $facets = $variables['facets'];
  $active_contracts = $variables['active_contracts'];
  $registered_contracts = $variables['registered_contracts'];
  $selected_filters = $variables['selected_facet_results'];
  $output = NULL;
  $ogeAgencies = $agencies = $vendors = $vendor_type = $expenseCategories = $revenueCategories = $fiscalYears = $regfiscalYears = $domains = $contractCategory = $contractStatus = $spendingCategory = $MWBECategory = $contractMWBECategory = $spendingMWBECategory = $industryType = $payrollType = array();
  $reqOGEAgencies = $reqAgencies = $reqFiscalYears = $regreqFiscalYears = $reqDomains = $reqVendors = $reqVendorType = $reqExpenseCategories = $reqRevenueCategories = $reqSpendCategories = $reqMWBECategory = $reqIndustryType = $reqpayrollType =  array();

  //arrays for the selected facet values from the URL
  foreach($selected_filters as $key => $value){
      switch ($key) {
          case 'agency_name':
            $reqAgencies[] = $value;
            break;
          case 'oge_agency_name':
            $reqOGEAgencies[] = $value;
            break;
          case 'fiscal_year':
            $reqFiscalYears[] = $value;
            break;
          case 'registered_fiscal_year':
            $regreqFiscalYears[] = $value;
            break;
          case 'domain':
            $reqDomains[] = $value;
            break;
          case 'vendor_name':
            $reqVendors[] = $value;
            break;
          case 'vendor_type':
            $reqVendorType[] = $value;
            break;
          case 'expenditure_object_name':
            $reqExpenseCategories[] = $value;
            break;
          case 'spending_category_name':
            $reqSpendCategories[] = $value;
            break;
          case 'contract_category_name':
            $reqContCategories[] = $value;
            break;
          case 'contract_status':
            $reqContStatus[] = $value;
            break;
          case 'mwbe_category':
            $reqMWBECategory[] = $value;
            break;
          case 'industry_type_name':
              $reqIndustryType[] = $value;
              break;
          case 'payroll_type':
              $reqpayrollType[] = $value;
              break;
      }
  }
    $search_terms = explode('*|*', $_REQUEST['search_term']); // array("Education", "domains=Payroll~Spending", "fiscal_years=2014~2013")
    foreach($search_terms as $id => $keyvaluepair){
        $keys = explode("=", $keyvaluepair);
        if($keys[1] == 'active'){
            $reqContStatus[0][0]['name'] = 'active';
            $reqContStatus[0][0]['count'] = $active_contracts['response']['numFound'];
        }
    }

  //arrays for the facet values
  foreach ($facets as $key => $value) {
    switch ($key) {
      case 'agency_name':
        $agencies[] = $value[$key];
        break;
      case 'oge_agency_name':
        $ogeAgencies[] = $value[$key];
        break;
      case 'fiscal_year':
        $fiscalYears[] = $value[$key];
        break;
      case 'registered_fiscal_year':
        $regfiscalYears[] = $value[$key];
        break;
      case 'domain':
        $domains[] = $value[$key];
        break;
      case 'vendor_name':
        $vendors[] = $value[$key];
        break;
      case 'vendor_type':
        $vendor_type[] = $value['vendor_type'];
        break;
      case 'expenditure_object_name':
        $expenseCategories[] = $value[$key];
        break;
      case 'spending_category_name':
        $spendingCategory[] = $value[$key];
        break;
      case 'contract_category_name':
        $contractCategory[] = $value[$key];
        break;
      case 'contract_status':
        $contractStatus[] = $value[$key];
        break;
      case 'mwbe_category':
        $MWBECategory[] = $value['minority_type_name'];
        break;
      case 'industry_type_name':
        $industryType[] = $value['industry_type_name'];
        break;
      case 'payroll_type':
        $payrollType[] = $value['payroll_type'];
        break;
    }
  }
    $contractStatus[0]['active'] = $active_contracts['response']['numFound'];

  if (count($domains) > 0) {
    foreach ($domains[0] as $domainName => $count) {
      if ($count > 0) {
        $checked = (in_array($domainName, array_values_recursive($reqDomains[0]))) ? 'checked' : '';
        $output['Type of Data'][] = array($domainName, $domainName, $count, $checked);
        $output['Type of Data']['name'] = 'fdomainName';
        if ($domainName == 'spending' && $checked == 'checked') {
          foreach ($spendingCategory[0] as $spendingName => $spendingCount) {
            if ($spendingCount > 0) {
              $spendingValue = urlencode($spendingName);
              $checked = (in_array($spendingName, array_values_recursive($reqSpendCategories[0]))) ? 'checked' : '';
              $subCat['spending']['Spending Category'][] = array($spendingValue, $spendingName, $spendingCount, $checked);
            }
            $subCat['spending']['Spending Category']['name'] = 'fspendingCatName';
          }
        }
        if ($domainName == 'contracts' && $checked == 'checked') {
          if (count($contractCategory[0]) > 0) {
            foreach ($contractCategory[0] as $catName => $catCount) {
              if ($catCount > 0) {
                $checked = (in_array($catName, array_values_recursive($reqContCategories[0]))) ? 'checked' : '';
                $subCat['contracts']['Category'][] = array($catName, $catName, $catCount, $checked);
              }
            }
            $subCat['contracts']['Category']['name'] = 'fcontractCatName';
          }
          if (count($contractStatus) > 0) {
            foreach ($contractStatus as $key => $value) {
              foreach ($value as $status => $statusCount) {
                $checked = (in_array($status, array_values_recursive($reqContStatus[0]))) ? 'checked' : '';
                //$subCat['contracts']['Status'][] = array($status, $status, $statusCount, $checked);
                if (strtolower($status) == 'registered') {
                    if($registered_contracts['response']['numFound'] > 0){
                        $subCat['contracts']['Status'][] = array('registered', 'Registered', $registered_contracts['response']['numFound'], $checked);
                    }
                }else if(strtolower($status) == 'active'){
                    if($active_contracts['response']['numFound'] > 0){
                        $subCat['contracts']['Status'][] = array('active', 'Active', $active_contracts['response']['numFound'], $checked);
                    }
                }else{
                    $subCat['contracts']['Status'][] = array($status, $status, $statusCount, $checked);
                }
              }
            }
            $subCat['contracts']['Status']['name'] = 'fcontractStatus';
          }
        }
      }
    }
  }
  if (count($agencies) > 0) {
    foreach ($agencies[0] as $agencyName => $count) {
      if ($count > 0) {
        $checked = in_array($agencyName, array_values_recursive($reqAgencies[0]));
        $agencyValue = urlencode($agencyName);
        if ($checked) {
          $output['Citywide Agency']['checked'][] = array($agencyValue, $agencyName, $count);
        }
        else {
            if(count($reqOGEAgencies) == 0 || strlen($agencyName) > 0)
                $output['Citywide Agency']['unchecked'][] = array($agencyValue, $agencyName, $count);
        }
      }
    }
    $output['Citywide Agency']['name'] = 'fagencyName';
    if (is_array($reqAgencies[0])) {
      foreach($reqAgencies[0] as $key => $value){
        if(!in_array($value['name'], array_values_recursive($output['Citywide Agency']['checked'])) && strlen($value['name']) > 0){
          $output['Citywide Agency']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
        }
      }
    }
  }
    if (count($ogeAgencies) > 0) {
        foreach ($ogeAgencies[0] as $agencyName => $count) {
          if ($count > 0) {
            $checked = in_array($agencyName, array_values_recursive($reqOGEAgencies[0]));
            $agencyValue = urlencode($agencyName);
            if ($checked) {
              $output['Other Government Entity']['checked'][] = array($agencyValue, $agencyName, $count);
            }
            else {
              $output['Other Government Entity']['unchecked'][] = array($agencyValue, $agencyName, $count);
            }
          }
        }
        $output['Other Government Entity']['name'] = 'fogeName';
        foreach($reqOGEAgencies[0] as $key => $value){
            if(!in_array($value['name'], array_values_recursive($output['Other Government Entity']['checked']))){
                $output['Other Government Entity']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
            }
        }
      }

  if (count($vendors) > 0) {
    foreach ($vendors[0] as $vendorName => $count) {
      if ($count > 0) {
        //use strict param=true search so that integer values don't get mistaken as strings.
        $checked = in_array($vendorName, array_values_recursive($reqVendors[0]), true);
        $vendorValue = urlencode($vendorName);
        if ($checked) {
          $output['Vendor']['checked'][] = array($vendorValue, $vendorName, $count);
        }
        else {
          $output['Vendor']['unchecked'][] = array($vendorValue, $vendorName, $count);
        }
      }
    }
    $output['Vendor']['name'] = 'fvendorName';
    if (isset($reqVendors[0])){
      foreach($reqVendors[0] as $key => $value){
        if(!in_array($value['name'], array_values_recursive($output['Vendor']['checked']))){
          $output['Vendor']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
        }
      }
    }
  }

  // Vendor type
   if (count($vendor_type) > 0) {
       foreach ($vendor_type[0] as $vendorTypeName => $count) {
           if ($count > 0) {
               $checked = in_array($vendorTypeName, array_values_recursive($reqVendorType[0]));
               $vendorTypeValue = urlencode($vendorTypeName);
               if ($checked) {
                   $output['Vendor Type']['checked'][] = array($vendorTypeValue, $vendorTypeName, $count);
               }
               else {
                   $output['Vendor Type']['unchecked'][] = array($vendorTypeValue, $vendorTypeName, $count);
               }
           }
       }
       $output['Vendor Type']['name'] = 'fvendorType';
       foreach($reqVendorType[0] as $key => $value){
           if(!in_array($value['name'], array_values_recursive($output['Vendor Type']['checked']))){
               $output['Vendor Type']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
           }
       }
  }

  if (count($expenseCategories) > 0) {
    foreach ($expenseCategories[0] as $expenseCategoryName => $count) {
      if ($count > 0) {
        $checked = in_array($expenseCategoryName, array_values_recursive($reqExpenseCategories[0]));
        $expenseCategoryValue = urlencode($expenseCategoryName);
        if ($checked) {
          $output['Expense Category']['checked'][] = array($expenseCategoryValue, $expenseCategoryName, $count);
        }
        else {
          $output['Expense Category']['unchecked'][] = array($expenseCategoryValue, $expenseCategoryName, $count);
        }
      }
    }
    $output['Expense Category']['name'] = 'fexpenseCategoryName';
    if (!empty($reqExpenseCategories[0])) {
      foreach($reqExpenseCategories[0] as $key => $value){
        if(!in_array($value['name'], array_values_recursive($output['Expense Category']['checked']))){
          $output['Expense Category']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
        }
      }
    }

  }
  if (count($revenueCategories) > 0) {
    foreach ($revenueCategories[0] as $revenueCategoryName => $count) {
      if ($count > 0) {
        $checked = in_array($revenueCategoryName, array_values_recursive($reqRevenueCategories[0]));
        $revenueCategoryValue = urlencode($revenueCategoryName);
        if ($checked) {
          $output['Revenue Category']['checked'][] = array($revenueCategoryValue, $revenueCategoryName, $count);
        }
        else {
          $output['Revenue Category']['unchecked'][] = array($revenueCategoryValue, $revenueCategoryName, $count);
        }
      }
    }
    $output['Revenue Category']['name'] = 'frevenueCategoryName';
    foreach($reqRevenueCategories[0] as $key => $value){
        if(!in_array($value['name'], array_values_recursive($output['Revenue Category']['checked']))){
            $output['Revenue Category']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
        }
    }
  }
 // Active fiscal year
  if (count($fiscalYears[0]) > 0) {
    krsort($fiscalYears[0]);
    foreach ($fiscalYears[0] as $fiscalYear => $count) {
      if ($count > 0) {
        $checked = in_array($fiscalYear, array_values_recursive($reqFiscalYears[0]));
        if ($checked) {
          $output['Fiscal Year']['checked'][] = array($fiscalYear, $fiscalYear, $count);
        }
        else {
          $output['Fiscal Year']['unchecked'][] = array($fiscalYear, $fiscalYear, $count);
        }
      }
    }
    $output['Fiscal Year']['name'] = 'fyear';
    if (!empty($reqFiscalYears[0])) {
      foreach($reqFiscalYears[0] as $key => $value){
        if(!in_array($value['name'], array_values_recursive($output['Fiscal Year']['checked']))){
          $output['Fiscal Year']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
        }
      }
    }
  }
    // Registered fiscal year
    if (!empty($regfiscalYears[0])) {
        krsort($regfiscalYears[0]);
        foreach ($regfiscalYears[0] as $fiscalYear => $count) {
            if ($count > 0) {
                $checked = in_array($fiscalYear, array_values_recursive($regreqFiscalYears[0]));
                if ($checked) {
                    $output['Fiscal Year']['checked'][] = array($fiscalYear, $fiscalYear, $count);
                }
                else {
                    $output['Fiscal Year']['unchecked'][] = array($fiscalYear, $fiscalYear, $count);
                }
            }
        }
        $output['Fiscal Year']['name'] = 'regfyear';
        foreach($regreqFiscalYears[0] as $key => $value){
            if(!in_array($value['name'], array_values_recursive($output['Fiscal Year']['checked']))){
                $output['Fiscal Year']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
            }
        }
    }
    //Industry
    if (count($industryType) > 0) {
        foreach ($industryType[0] as $industryTypeName => $count) {
            if ($count > 0) {
                $checked = in_array($industryTypeName, array_values_recursive($reqIndustryType[0]));
                $industryTypeValue = urlencode($industryTypeName);
                if ($checked) {
                    $output['Industry']['checked'][] = array($industryTypeValue, $industryTypeName, $count);
                }
                else {
                    $output['Industry']['unchecked'][] = array($industryTypeValue, $industryTypeName, $count);
                }
            }
        }
        $output['Industry']['name'] = 'findustryTypeName';
        if (is_array($reqIndustryType[0])){
          foreach($reqIndustryType[0] as $key => $value){
            if(!in_array($value['name'], array_values_recursive($output['Industry']['checked']))){
              $output['Industry']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
            }
          }
        }

    }


    if (count($MWBECategory) > 0) {
        foreach ($MWBECategory[0] as $MWBECategoryName => $count) {
            if ($count > 0) {
                $checked = in_array($MWBECategoryName, array_values_recursive($reqMWBECategory[0]));
                $MWBECategoryValue = urlencode($MWBECategoryName);
                if ($checked) {
                    $output['M/WBE Category']['checked'][] = array($MWBECategoryValue, $MWBECategoryName, $count);
                }
                else {
                    $output['M/WBE Category']['unchecked'][] = array($MWBECategoryValue, $MWBECategoryName, $count);
                }
            }
        }
        $output['M/WBE Category']['name'] = 'fmwbeCategory';
        if (!empty($reqMWBECategory[0])) {
          foreach($reqMWBECategory[0] as $key => $value){
            if(!in_array($value['name'], array_values_recursive($output['M/WBE Category']['checked']))){
              $output['M/WBE Category']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
            }
          }
        }
    }
    //Payroll Type
    if (count($payrollType) > 0) {
        foreach ($payrollType[0] as $payrollTypeName => $count) {
            if ($count > 0) {
                $checked = in_array($payrollTypeName, array_values_recursive($reqpayrollType[0]));
                $payrollTypeValue = urlencode($payrollTypeName);
                if ($checked) {
                    $output['Payroll Type']['checked'][] = array($payrollTypeValue, $payrollTypeName, $count);
                }
                else {
                    $output['Payroll Type']['unchecked'][] = array($payrollTypeValue, $payrollTypeName, $count);
                }
            }
        }
        $output['Payroll Type']['name'] = 'fpayrollTypeName';
        if (!empty($reqpayrollType[0])) {
          foreach($reqpayrollType[0] as $key => $value){
            if(!in_array($value['name'], array_values_recursive($output['Payroll Type']['checked']))){
              $output['Payroll Type']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
            }
          }
        }
    }

    $variables['render_array'] = $output;
  $variables['sub_cat_array'] = $subCat;
}

function array_values_recursive($ary)
{
   $lst = array();
    if(is_array($ary)){
        foreach( array_keys($ary) as $k ){
            $v = $ary[$k];
            if (is_scalar($v)) {
                $lst[] = $v;
            } elseif (is_array($v)) {
                $lst = array_merge( $lst,
                    array_values_recursive($v)
                );
            }
        }
    }

   return $lst;
}

function checkbook_faceted_search_replaceSlash($string)
{
    return str_replace('__', '/', $string);
}
