{
"widgetType": "highcharts",
"widgetDatahandler": "highcharts",
"html_class":"chart-left",
"footer":"


if(SpendingUtil::_show_mwbe_custom_legend()){
	$nyc_legend_html = 	SpendingUtil::getMWBENYCLegend(RequestUtilities::getRequestParamValue('year'), RequestUtilities::getRequestParamValue('yeartype'));
}


echo '<div class=\"chart-right\">
        <div class=\"wrap\">
    		<div class=\"number\"><span>' . $node->mwbe_share_percent . '</span></div>
    		<div class=\"text\"><span>M/WBE Share</span></div>
        </div>'
      . $nyc_legend_html .
	 '</div>';

",
"header":"
       $header = '<h2 class=\"chart-title\" style=\"display:none;\">'. $node->widgetConfig->chartTitle . '</h2>';
       $header .= ChartUtil::generateWidgetGridViewLink($node);
       return $header;
    ",
 "gridConfig":{
        "template":"chart_grid_view",
        "domain":"spending",
        "html_class":"chart-grid-view-table three-columns",
        "sortColumn":1,
        "table_columns": [
            {
                  "labelAlias": "Category",
                  "columnType": "text"
             },
             {
                  "labelAlias": "Amount",
                  "columnType": "number",
                  "formatType": "amount"
             },
             {
                  "labelAlias": "Percentage",
                  "columnType": "number"
             }
        ]
},
"no_results_content":"No Results Found",
"defaultParameters":{"type_of_year":"B"},
"cleanURLParameters":["year","yeartype","agency","vendor","category","industry"],
"urlParamMap":{"year":"year_id","yeartype":"type_of_year","agency":"agency_id","vendor":"vendor_id","category":"spending_category_id","industry":"industry_type_id"},
"urlParamMapSubVendor":{"year":"year_id","yeartype":"type_of_year","agency":"agency_id","vendor":"prime_vendor_id","category":"spending_category_id","industry":"industry_type_id"},
"chartTitle":"Prime Spending by M/WBE Share",
"widgetDataLoader":"

    $where_filters = array();
    foreach($node->widgetConfig->requestParams as $param=>$value){
        $where_filters[] = _widget_build_sql_condition(' a1.' . $param, $value);
    }

    if(count($where_filters) > 0){
        $where_filter = ' where ' . implode(' and ' , $where_filters);
    }

    $sql = 'select rm.minority_type_id, rm.minority_type_name , sum(total_spending_amount) total_spending
    from aggregateon_mwbe_spending_coa_entities a1
    join ref_minority_type rm on rm.minority_type_id = a1.minority_type_id
   ' . $where_filter . '
    group by rm.minority_type_id, rm.minority_type_name  ';
    $node->data  = _checkbook_project_execute_sql($sql);

",
"widgetUpdateJSONConfig":"

	$mwbe_filter = RequestUtilities::getRequestParamValue('mwbe');
  $is_mwbe_certified = MappingUtil::isMWBECertified(array($mwbe_filter));
  if($is_mwbe_certified){
		$node->widgetConfig->chartTitle = MappingUtil::getCurrenEthnicityName()  . ' Prime Spending';
	}else{
		$node->widgetConfig->chartTitle = 'Prime Spending by ' . MappingUtil::getCurrenEthnicityName() .' Share';
	}
	$mwbe_data = array();
	 foreach ($node->data as $row){

	 	switch($row['minority_type_id']){
	 		case '2':
	 		$mwbe_data['ba'] += $row['total_spending'];
	 		break;
	 		case '3':
	 		$mwbe_data['ha'] += $row['total_spending'];
	 		break;
	 		case '4':
	 		$mwbe_data['aa'] += $row['total_spending'];
	 		break;
	 		case '5':
	 		$mwbe_data['aa'] += $row['total_spending'];
            break;
      case '6':
	 		$mwbe_data['na'] += $row['total_spending'];
	 		break;
	 		case '7':
	 		$mwbe_data['nm'] += $row['total_spending'];
	 		break;
	 		case '9':
	 		$mwbe_data['w'] += $row['total_spending'];
	 		break;
	 		case '11':
	 		$mwbe_data['io'] += $row['total_spending'];
            break;
      case '99':
	 		$mwbe_data['em'] += $row['total_spending'];
	 		break;
	 	}
	 }

	$total_mwbe = $mwbe_data['ba'] + $mwbe_data['ha'] + $mwbe_data['aa'] + $mwbe_data['w'] + $mwbe_data['na'] + $mwbe_data['em'];
	$toal_non_mwbe = $mwbe_data['nm'];
  $total = $total_mwbe + $toal_non_mwbe;
 if($total != 0){
    $mwbe_filter = RequestUtilities:: getRequestParamValue('mwbe');
    $amount_column = 'total_mwbe';
    switch($mwbe_filter){
    case '4~5': case '4': case '5' : $node->mwbe_share_percent = custom_number_formatter_format($mwbe_data['aa']/$total *100, 1, null, '%') ;
    break;
    case '2': $node->mwbe_share_percent = custom_number_formatter_format($mwbe_data['ba']/$total *100, 1, null, '%') ;
    break;
    case '3': $node->mwbe_share_percent = custom_number_formatter_format($mwbe_data['ha']/$total *100, 1, null, '%') ;
    break;
    case '6': $node->mwbe_share_percent = custom_number_formatter_format($mwbe_data['na']/$total *100, 1, null,'%') ;
    break;
    case '9': $node->mwbe_share_percent = custom_number_formatter_format($mwbe_data['w']/$total *100, 1, null,'%') ;
    break;
    case '99': $node->mwbe_share_percent = custom_number_formatter_format($mwbe_data['em']/$total *100, 1, null,'%') ;
    break;
    case '2~3~4~5~9': case '2~3~4~5~6~9~99' : $node->mwbe_share_percent = custom_number_formatter_format($total_mwbe/$total *100, 1,null, '%') ;
    break;
    }

    $node->widgetConfig->chartConfig->series[0]->data[0]->y = $total_mwbe;
    $node->widgetConfig->chartConfig->series[0]->data[0]->custom_label = custom_number_formatter_format($total_mwbe, 2, '$') . ' (' .
    custom_number_formatter_format(($total_mwbe)/$total *100, 1, null,'%') . ')';

    $node->widgetConfig->chartConfig->series[0]->data[0]->tooltip_label =
    'Asian American: ' . custom_number_formatter_format($mwbe_data['aa'], 2, '$')  . ' (' .
    custom_number_formatter_format(($mwbe_data['aa'])/$total*100, 1, null, '%') . ')' .  '<br/>'
    . 'Black American: ' . custom_number_formatter_format($mwbe_data['ba'], 2, '$')  . ' (' .
    custom_number_formatter_format(($mwbe_data['ba'])/$total*100, 1, null, '%') . ')' . '<br/>'
    . 'Women (Non-Minority): ' . custom_number_formatter_format($mwbe_data['w'], 2, '$')  . ' (' .
    custom_number_formatter_format(($mwbe_data['w'])/$total*100, 1, null, '%') . ')' . '<br/>'
    . 'Hispanic American: ' . custom_number_formatter_format($mwbe_data['ha'], 2, '$')  . ' (' .
    custom_number_formatter_format(($mwbe_data['ha'])/$total*100, 1, null, '%') . ')' . '<br/>'
    . 'Native American: ' . custom_number_formatter_format($mwbe_data['na'], 2, '$')  . ' (' .
    custom_number_formatter_format(($mwbe_data['na'])/$total*100, 1, null, '%') . ')' . '<br/>'
    . 'Emerging (Non-Minority): ' . custom_number_formatter_format($mwbe_data['em'], 2, '$')  . ' (' .
    custom_number_formatter_format(($mwbe_data['em'])/$total*100, 1, null, '%') . ')' . '<br/>'
    ;

    $node->widgetConfig->chartConfig->series[0]->data[1]->y = $toal_non_mwbe;
    $node->widgetConfig->chartConfig->series[0]->data[1]->custom_label = custom_number_formatter_format($toal_non_mwbe, 2, '$') . ' (' .
    custom_number_formatter_format($toal_non_mwbe/$total *100, 1, null,'%') . ')';

    $node->widgetConfig->gridConfig->data[] = array('Asian American', $mwbe_data['aa'] ,
    custom_number_formatter_format($mwbe_data['aa']/$total*100, 1, null, '%'));
    $node->widgetConfig->gridConfig->data[] = array('Black American', $mwbe_data['ba'] ,
    custom_number_formatter_format($mwbe_data['ba']/$total*100, 1, null, '%'));
    $node->widgetConfig->gridConfig->data[] = array('Women (Non-Minority)', $mwbe_data['w'],
    custom_number_formatter_format($mwbe_data['w']/$total*100, 1, null, '%'));
    $node->widgetConfig->gridConfig->data[] = array('Hispanic American', $mwbe_data['ha'],
    custom_number_formatter_format($mwbe_data['ha']/$total*100, 1, null, '%'));
    $node->widgetConfig->gridConfig->data[] = array('Native American', $mwbe_data['na'] ,
    custom_number_formatter_format($mwbe_data['na']/$total*100, 1, null, '%'));
    $node->widgetConfig->gridConfig->data[] = array('Emerging (Non-Minority)', $mwbe_data['em'] ,
    custom_number_formatter_format($mwbe_data['em']/$total*100, 1, null, '%'));
    $node->widgetConfig->gridConfig->data[] = array('Non-M/WBE', $toal_non_mwbe,
    custom_number_formatter_format(($toal_non_mwbe)/$total*100,1, null, '%'));
}

",
"chartConfig" : {
	"colors":["#7DB7E5"],
    "plotOptions": {
            "series": {
                "dataLabels": {
                    "enabled": true,
                    "color":"#606060",
                    "fill":"#606060",
                    "format": "{point.custom_label}",
                    "style":{
                    "fontWeight":"normal"
                    },
                    "crop": false,
                	"overflow": "none"
                },
                "states": {
                    "hover": {
                        "enabled": false
                    }
                }
            }
    },
    "chart" : {"width":480, "marginBottom": 70},
    "xAxis": {
        "categories": ["M/WBE","Non-M/WBE"],
        "lineWidth": 0,
   		"minorGridLineWidth": 0,
   		"lineColor": "transparent",
        "title": {"text": ""},
        "labels": {"enabled": true}
    },
    "series": [
        {
            "name": "FY",
            "type": "column",
            "pointWidth": 150,
            "fontWeight":"normal",
            "data": [
            		{
            			"name": "Point 1",
                  "fontWeight":"normal",
            			"y":100,
            			"custom_label":"",
            			"tooltip_label":""
            		},
            		{
            			"name": "Point 2",
            			"y":200,
            			"custom_label":"",
            			"tooltip_label":""
            		}]
        }
    ],
    "title": {"text": ""},
    "yAxis": {
     	"minRange": 0.1,
        "startOnTick":true,
        "title": {"text": ""},
        "lineWidth": 0,
        "minorGridLineWidth": 0,
        "gridLineColor": "#ffffff",
        "labels": {"enabled":false}
    } ,
    "legend": {
        "enabled": false
    },
    "tooltip":{"function":"tooltipformatter"}
    }

}
<function>
tooltipformatter^^'formatter' :
function() {

	if(this.point.tooltip_label == ''){
		return false;
	}
	else {
        var parentElement = jQuery('.highcharts-series')[0];
        var childElement = parentElement.firstChild;
        var fill1 = document.createAttribute('fill');
        fill1.value = '#96d0fe';
        childElement.setAttributeNode(fill1);
        childElement.onmouseover = function () {
            var fill2 = document.createAttribute('fill');
            fill2.value = '#96d0fe';
            this.setAttributeNode(fill2);
        };
        childElement.onmouseleave = function () {
            var fill3 = document.createAttribute('fill');
            fill3.value = '#7DB7E5';
            this.setAttributeNode(fill3);
        };
        return this.point.tooltip_label;
	}
}
</function>
