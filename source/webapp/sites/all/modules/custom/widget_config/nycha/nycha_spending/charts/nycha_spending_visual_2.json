{
  "widgetType": "highcharts",
  "widgetDatahandler": "highcharts",
  "html_class":"",
  "header":"
  $header = '<h2 class=\"chart-title\" style=\"display:none;\">'. $node->widgetConfig->chartTitle . '</h2>';
  $header .= ChartUtil::generateWidgetGridViewLink($node);
  return $header;
  ",
  "gridConfig":{
    "template":"chart_grid_view",
    "domain":"spending",
    "html_class":"chart-grid-view-table three-columns",
    "sortColumn":1,
    "table_columns": [
      {
        "labelAlias": "Vendor",
        "columnType": "text"
      },
      {
        "labelAlias": "Amount",
        "columnType": "number",
        "formatType": "amount"
      }
    ]
  },
  "no_results_content":"No Results Found",
  "cleanURLParameters":["vendor","category","year"],
  "urlParamMap":{"vendor":"vendor_id","category":"spending_category_id","year":"issue_date_year_id"},
  "chartTitle":"Top Ten Vendors by Disbursement Amount",
  "widgetDataLoader":"
    $year_id = RequestUtilities::getRequestParamValue('year');
    $where_filters = array();
    foreach($node->widgetConfig->requestParams as $param=>$value){
      $where_filters[] = _widget_build_sql_condition( $param, $value);
    }

      if(count($where_filters) > 0){
      $where_filter = ' WHERE ' . implode(' AND ' , $where_filters);
      }
      $not_category = _widget_build_sql_not_condition( 'spending_category_code', 'CONTRACT');
      $add_null = _widget_build_sql_add_null( 'contract_id', ' ').',';
      $datasource = RequestUtilities::getRequestParamValue('datasource');
      $sql = 'SELECT vendor_id,
                     vendor_name ,
                     CASE
                     WHEN SUM(sum_ytd_spending) IS NULL THEN 0
                     ELSE SUM(sum_ytd_spending)
                     END AS check_amount_sum,
                     SUM(sum_total_contract_spending) AS total_contract_amount_sum
                     FROM (
                     SELECT vendor_id,
                     vendor_name,
                     '. $add_null .'
                    sum(ytd_spending) as sum_ytd_spending,
                    sum(0) as sum_total_contract_spending
                    FROM aggregation_spending_fy'
                    .$where_filter.' AND '.$not_category.
                    ' GROUP BY vendor_id,vendor_name
                    UNION
                    SELECT vendor_id,
                    vendor_name,
                    contract_id,
                    sum(ytd_spending) sum_ytd_spending,
                    max(Total_Contract_Amount) sum_total_contract_spending
                    FROM aggregation_spending_contracts_fy'
                    .$where_filter.
                    'GROUP BY contract_id,vendor_id,vendor_name ) x
                     GROUP BY vendor_id,vendor_name
                     ORDER BY check_amount_sum DESC LIMIT 10';
      $node->data  = _checkbook_project_execute_sql($sql,'main',$datasource);
",
"widgetUpdateJSONConfig":"
      $series_new = array();
      $index = 0;
      foreach($node->data as $row){
      $tooltip_label =
      'Vendor: ' . $row['vendor_name'] .'<br/>' .
      'Amount: ' . custom_number_formatter_format($row['check_amount_sum'] ,2, '$').  '<br/>';
      $dynamic_parameter = '/vendor/' . $row['vendor_id'];
      $link =  strstr($_GET['q'],'\/',true).NychaSpendingUrlService::generateLandingPageUrl('vendor',$row['vendor_id']);
      $series_new[$index]['url'] = 	$link;
      $series_new[$index]['y'] = (float)$row['check_amount_sum'];
      $series_new[$index]['tooltip_label'] = $tooltip_label;
      $node->widgetConfig->gridConfig->data[] = array($row['vendor_name'],$row['check_amount_sum'] );
      $index += 1;
      }
      $node->widgetConfig->chartConfig->series[0]->name = 'Fiscal Years';
      $node->widgetConfig->chartConfig->series[0]->type = 'column';
      $node->widgetConfig->chartConfig->series[0]->pointWidth = 30;
      $node->widgetConfig->chartConfig->series[0]->data = $series_new;
",
"chartConfig" : {
      "colors":["#7DB7E5"],
      "plotOptions": {
        "series": {
        "cursor": "pointer"   ,
        "stacking": "normal",
        "dataLabels": {
        "enabled": false
        }  ,
      "point": {"events": {"function": "clickEvent"}}
        }
      },
      "xAxis": {
        "categories": [0,1,2,3,4,5,6,7,8,9],
        "labels": {"enabled": false}
      },
      "series": [
        {
        "name": "FY",
        "type": "column",
        "pointWidth": 50,
        "data": []
        }
      ],
      "title": {"text": ""},
      "yAxis": {
        "min":0,
        "minRange": 0.1,
        "startOnTick":true,
        "title": {"text": ""},
        "labels":{"rotation": 0,"function":"yAxisFormatter"}
      } ,
      "legend": {
        "enabled": false
      },
      "tooltip":{"function":"tooltipformatter"}
      }
}


<function>
yAxisFormatter^^'formatter' : function(){return yAxisLabelFormatter(this);}##
tooltipformatter^^'formatter' :
function() {return this.point.tooltip_label ;
}##
clickEvent^^"click": function(){location.href = Drupal.settings.basePath+this.url; }
</function>
