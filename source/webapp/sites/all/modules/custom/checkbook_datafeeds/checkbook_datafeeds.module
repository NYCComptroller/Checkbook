<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
*
* Copyright (C) 2012, 2013 New York City
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/


/**
 * Implements hook_menu().
 */
function checkbook_datafeeds_menu() {
  $items = array();
  $items['data-feeds'] = array(
    'title' => 'Data Feeds',
    'page callback' => 'checkbook_datafeeds_data_feeds_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['data-feeds/data-feeds'] = array(
    'title' => 'Data Feeds',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['data-feeds/api'] = array(
    'title' => 'API',
    'page callback' => 'checkbook_datafeeds_api_page',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['track-data-feed'] = array(
    'page callback' => 'checkbook_datafeeds_tracking_results_page',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_library().
 */
function checkbook_datafeeds_library() {
  $libraries['jquery_multiselect'] = array(
    'title' => 'jquery.multi-select.js',
    'website' => 'http://loudev.com/index.html',
    'version' => '0.3',
    'js' => array(
      drupal_get_path('module', 'checkbook_datafeeds') . '/js/multi-select/js/jquery.multi-select.js' => array(),
    ),
    'css' => array(
      drupal_get_path('module', 'checkbook_datafeeds') . '/js/multi-select/css/multi-select.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_theme().
 */
function checkbook_datafeeds_theme($existing, $type, $theme, $path) {
  $hooks = array();
  $hooks['user_criteria'] = array(
    'variables' => array('usercriteria' => NULL),
  );
  return $hooks;
}

/**
 * Callback function to display API documentation page.
 *
 * @see checkbook_datafeeds_menu()
 *
 * @return array
 *   Drupal renderable array for node 299
 */
function checkbook_datafeeds_api_page() {
  $node = node_load(299);
  $node = node_view($node);
  return $node;
}

/**
 * Callback to display queue tracking form in a block
 *
 * @see checkbook_datafeeds_block_view()
 *
 * @return array
 */
function checkbook_datafeeds_tracking_form() {
  $form = array();
  $form['text'] = array(
    '#markup' => '<p>To track status of data feed requests, please enter your tracking number:</p>'
  );
  $form['tracking_number'] = array(
    '#title' => t('Tracking Number:'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 10
  );
  $form['go'] = array(
    '#value' => t('Go'),
    '#type' => 'submit',
    '#submit' => array('checkbook_datafeeds_tracking_form_submit')
  );
  return $form;
}

/**
 * Page callback for API queue tracking page.
 *
 * @see checkbook_datafeeds_menu()
 *
 * @return array
 *   Renderable array to display results of entire track status page
 */
function checkbook_datafeeds_tracking_results_page() {
  $page['instructions'] = array(
    '#markup' => t('<div class="form-instructions"><p><h2>Select the Data Feeds</h2></p><p>Use this tool to design your own snapshots of NYC Financial Data</p><p>You can then save the resulting dataset as a file, or publish a dynamically updating XML feed of the data.  This feed will enable you to build your own web applications and widgets for your website.</p></div>'),
    '#prefix' => '<div class="data-feeds-sidebar">',
  );
  $page['trackstatus'] = array(
    '#markup' => '<div class="trackstatus">',
  );
  $page['tftitle'] = array(
    '#markup' => '<h2>Track Status of Data Feed</h2>',
  );
  $page['tracking'] = drupal_get_form('checkbook_datafeeds_tracking_form');
  $page['closediv'] = array(
    '#markup' => '</div></div>',
  );
  $page['markupstart'] = array(
    '#markup' => '<div id="data-feed-wizard">',
  );
  $page['tracking-status'] = drupal_get_form('checkbook_datafeeds_tracking_status');
  $page['markupend'] = array(
    '#markup' => '</div>',
  );
  return $page;
}

/**
 * Track status page callback.
 *
 * @see checkbook_datafeeds_tracking_results_page()
 *
 * @param array $form
 *   Track status form array
 * @param array $form_state
 *   Track status form form_state array
 *
 * @return array
 *   Renderable array of results section of track status page
 */
function checkbook_datafeeds_tracking_status($form, &$form_state) {
  $form_state['cache'] = FALSE;
  try {
    $results = CheckBookAPI::getRequestDetailsByToken(check_plain($_REQUEST['code']));
  }
  catch (Exception $e) {
    log_error($e->getMessage());
  }
  $output = array();
  $output['download_feeds'] = array(
    '#markup' => '<h2 id="edit-description">Download Data</h2>',
  );
  $output['#attributes'] = array(
    'class' => array(
      'confirmation-page',
      'data-feeds-wizard',
    ),
  );
  if ($results) {
    $usercriteria = $results['user_criteria'];
    $output['columns-fieldset'] = array(
      '#title' => t('Selected Columns'),
      '#type' => 'fieldset',
    );
    $output['columns-fieldset']['columns'] = array(
      '#items' => $usercriteria['Columns'],
      '#theme' => 'item_list',
      '#prefix' => '<div class="search-columns">',
      '#suffix' => '</div>',
    );
    $output['search-criteria-fieldset'] = array(
      '#title' => t('Filter'),
      '#type' => 'fieldset',
    );
    $output['search-criteria-fieldset']['search-criteria'] = array(
      '#theme' => 'user_criteria',
      '#usercriteria' => $results['user_criteria'],
      '#prefix' => '<div class="search-criteria">',
      '#suffix' => '</div>',
    );
    $output['record-count-fieldset'] = array(
      '#type' => 'fieldset',
    );
    $output['record-count-fieldset']['record-count'] = array(
      '#markup' => '<p>This request has ' . number_format($usercriteria['Record Count']) . ' records.</p><p><strong>Tracking Number: ' . check_plain($_REQUEST['code']) . '</strong></p>',
      '#prefix' => '<div class="record-count">',
      '#suffix' => '</div>',
    );
    switch ($results['status']) {
      case 0:
        $output['status-fieldset'] = array(
          '#type' => 'fieldset',
        );
        $output['status-fieldset']['in-queue'] = array(
          '#markup' => '<strong>Status:</strong><br />File in Queue - Your data feed is in the queue to be generated. Please check back later.',
          '#prefix' => '<div class="feed-status">',
          '#suffix' => '</div>',
        );
        break;

      case 1:
        $output['status-fieldset'] = array(
          '#type' => 'fieldset',
        );
        $output['status-fieldset']['in-progress'] = array(
          '#markup' => '<strong>Status:</strong><br />Your file is currently being generated. It will be ready for download soon.',
          '#prefix' => '<div class="feed-status">',
          '#suffix' => '</div>',
        );
        break;

      case 2:
        $download = checkbook_datafeeds_file_download_page($results);
        $output = array_merge($output, $download);
        break;

      case 3:
        $output['status-fieldset'] = array(
          '#type' => 'fieldset',
        );
        $output['status-fieldset']['failed'] = array(
          '#markup' => '<strong>Status:</strong><br/>File generation failed.',
          '#prefix' => '<div class="feed-status">',
          '#suffix' => '</div>',
        );
        break;
    }
  }
  else {
    $output['error'] = array(
      '#markup' => 'No data was found for the entered tracking number. Please submit a valid tracking number.',
      '#prefix' => '<div class="feed-error">',
      '#suffix' => '</div>',
    );
  }
  $output['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#submit' => array('checkbook_datafeeds_tracking_form_cancel'),
  );
  return $output;
}

/**
 * Tracking form cancel button submit handler.
 *
 * @param array $form
 *   Tracking form
 * @param array $form_state
 *   Tracking form form_state
 */
function checkbook_datafeeds_tracking_form_cancel($form, &$form_state) {
  drupal_goto('data-feeds');
}

/**
 * Theme function for search criteria.
 *
 * @param array $variables
 *   Items to be themed
 *
 * @return string
 *   Themed label-value pairs
 */
function theme_user_criteria($variables) {
  $output = '';
  foreach ($variables['usercriteria'] as $key => $value) {
    if ($key !== 'Columns' && $key !== 'Record Count') {
      $output .= '<div><strong>' . $key . '</strong>: ' . $value . '</div>';
    }
  }
  return $output;
}

/**
 * Page callback for Data Feeds page.
 *
 * @see checkbook_datafeeds_menu()
 *
 * @return array
 *   Renderable array representing entire Data Feeds page.
 */
function checkbook_datafeeds_data_feeds_page() {
  $page['instructions'] = array(
    '#markup' => t('<div class="form-instructions"><h2>Select the Data Feeds</h2><p>Use this tool to design your own snapshots of NYC Financial Data</p><p>You can then save the resulting dataset as a file, or publish a dynamically updating XML feed of the data.  This feed will enable you to build your own web applications and widgets for your website.</p></div>'),
    '#prefix' => '<div class="data-feeds-sidebar">',
  );
  $page['trackstatus'] = array(
    '#markup' => '<div class="trackstatus">',
  );
  $page['tftitle'] = array(
    '#markup' => '<h2>Track Status of Data Feed</h2>',
  );
  $page['tracking'] = drupal_get_form('checkbook_datafeeds_tracking_form');
  $page['closediv'] = array(
    '#markup' => '</div></div>',
  );
  $page['data-feed-wizard'] = drupal_get_form('checkbook_datafeeds_data_feed_wizard');
  return $page;
}

/**
 * Sets up steps for Data Feeds wizard using FAPI.
 *
 * @see checkbook_datafeeds_menu()
 *
 * @param array $form
 *   Data Feeds form array
 * @param array $form_state
 *   Data Feeds form form_state array
 *
 * @return array
 *   Renderable array of right pane of Data Feeds wizard
 */
function checkbook_datafeeds_data_feed_wizard($form, &$form_state) {
  switch ($form_state['step']) {
    case 'budget':
      return checkbook_datafeeds_budget($form, $form_state);
    break;

    case 'budget_confirmation':
      return checkbook_datafeeds_budget_confirmation($form, $form_state);
    break;

    case 'contracts':
      return checkbook_datafeeds_contracts($form, $form_state);
    break;

    case 'contracts_confirmation':
      return checkbook_datafeeds_contracts_confirmation($form, $form_state);
    break;

    case 'payroll':
      return checkbook_datafeeds_payroll($form, $form_state);
    break;

    case 'payroll_confirmation':
      return checkbook_datafeeds_payroll_confirmation($form, $form_state);
    break;

    case 'revenue':
      return checkbook_datafeeds_revenue($form, $form_state);
    break;

    case 'revenue_confirmation':
      return checkbook_datafeeds_revenue_confirmation($form, $form_state);
    break;

    case 'spending':
      return checkbook_datafeeds_spending($form, $form_state);
    break;

    case 'spending_confirmation':
      return checkbook_datafeeds_spending_confirmation($form, $form_state);
    break;

    case 'queue_final':
      return checkbook_datafeeds_queue_final($form, $form_state);
    break;
  }

  $form_state['step'] = 'type';

  $form['type'] = array(
    '#type' => 'radios',
    '#title' => t('1. Select the Data Type:'),
    '#prefix' => '<div class="data-feed-wizard">',
    '#options' => array(
      'revenue' => t('Revenue'),
      'budget' => t('Budget'),
      'spending' => t('Spending'),
      'contracts' => t('Contracts'),
      'payroll' => t('Payroll'),
    ),
    '#default_value' => !empty($form_state['values']['type']) ? $form_state['values']['type'] : 'spending',
  );
  $form['format'] = array(
    '#type' => 'radios',
    '#title' => t('2. Select the Format:'),
    '#options' => array(
      'csv' => t('CSV'),
      'xml' => t('XML'),
    ),
    '#default_value' => !empty($form_state['values']['format']) ? $form_state['values']['format'] : 'csv',
  );
  $form['type_next'] = array(
    '#type' => 'submit',
    '#value' => t('Next'),
    '#name' => 'next',
    '#suffix' => '</div>',
    '#submit' => array('checkbook_datafeeds_type_next_submit'),
  );
  $form['#attributes'] = array('class' => array('first-page', 'data-feeds-wizard'));
  return $form;
}

/**
 * Submit handler for first step of form.
 *
 * @param array $form
 *   Data Feeds form array
 * @param array $form_state
 *   Data Feeds form form_state array
 */
function checkbook_datafeeds_type_next_submit($form, &$form_state) {
  $current_step = & $form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  switch ($form_state['values']['type']) {
    case 'budget':
      $current_step = 'budget';
      if (!empty($form_state['step_information']['budget']['stored_values'])) {
        $form_state['values'] = $form_state['step_information']['budget']['stored_values'];
      }
      else {
        $form_state['values'] = array();
      }
      // Force rebuild with next step.
      $form_state['rebuild'] = TRUE;
      break;

    case 'contracts':
      $current_step = 'contracts';
      if (!empty($form_state['step_information']['contracts']['stored_values'])) {
        $form_state['values'] = $form_state['step_information']['contracts']['stored_values'];
      }
      else {
        $form_state['values'] = array();
      }
      // Force rebuild with next step.
      $form_state['rebuild'] = TRUE;
      break;

    case 'payroll':
      $current_step = 'payroll';
      if (!empty($form_state['step_information']['payroll']['stored_values'])) {
        $form_state['values'] = $form_state['step_information']['payroll']['stored_values'];
      }
      else {
        $form_state['values'] = array();
      }
      // Force rebuild with next step.
      $form_state['rebuild'] = TRUE;
      break;

    case 'revenue':
      $current_step = 'revenue';
      if (!empty($form_state['step_information']['revenue']['stored_values'])) {
        $form_state['values'] = $form_state['step_information']['revenue']['stored_values'];
      }
      else {
        $form_state['values'] = array();
      }
      // Force rebuild with next step.
      $form_state['rebuild'] = TRUE;
      break;

    case 'spending':
      $current_step = 'spending';
      if (!empty($form_state['step_information']['spending']['stored_values'])) {
        $form_state['values'] = $form_state['step_information']['spending']['stored_values'];
      }
      else {
        $form_state['values'] = array();
      }
      // Force rebuild with next step.
      $form_state['rebuild'] = TRUE;
      break;
  }
}

// Budget section:
/**
 * First step of Budget section.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Renderable array of first step of Budget
 */
function checkbook_datafeeds_budget($form, &$form_state) {
  $format = $form_state['step_information']['type']['stored_values']['format'];
  $agency = isset($form_state['values']['agency']) ? $form_state['values']['agency'] : 'Citywide (All Agencies)';
  $dept = !empty($form_state['values']['dept']) ? $form_state['values']['dept'] : '';
  $year = !empty($form_state['values']['fiscal_year']) ? $form_state['values']['fiscal_year'] : 'FY' . currentFiscalYear();

  $form['description'] = array(
    '#markup' => '<h2 class="domain-title">Budget</h2>',
  );
  $form['loaded'] = array(
    '#markup' => '<div class="updated-date">Last updated: ' . _checkbook_datafeeds_get_updated_date('budget') . '</div>',
  );
  $form['requiredmessage'] = array(
    '#markup' => 'Fields marked with an asterisk (<span class="form-required">*</span>) are required.',
  );
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('3. Filter the Data:'),
    '#collapsible' => TRUE,
  );
  $form['filter']['leftbegin'] = array(
    '#markup' => '<div class="column column-left">',
  );
  $form['filter']['agency'] = array(
      '#type' => 'select',
      '#title' => t('Agency:'),
      '#options' => _agency_options(),
      '#attributes' => array('class' => array('watch')),
      '#prefix' => '<div class="datafield agency">',
      '#suffix' => '</div>',
      '#default_value' => !empty($form_state['values']['agency']) ? $form_state['values']['agency'] : 'Citywide (All Agencies)',
      '#ajax' => array(
        'callback' => 'checkbook_datafeeds_agency_ajax',
        'wrapper' => 'dynamic-fields',
        'progress' => array(
          'message' => NULL,
          'type' => 'throbber',
        ),
      ),
    );
    $form['filter']['dept'] = array(
        '#type' => 'select',
        '#title' => t('Department:'),
        '#options' => _budget_dept_options($agency, $year),
        '#prefix' => '<div id="dynamic-fields"><div id="department" class="datafield department">',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('watch')),
        '#multiple' => FALSE,
        '#default_value' => $dept,
        '#ajax' => array(
          'callback' => 'checkbook_datafeeds_dept_ajax',
          'wrapper' => 'expense-category',
          'progress' => array(
            'message' => NULL,
            'type' => 'throbber',
          ),
        ),
      );
      $form['filter']['expense_category'] = array(
        '#type' => 'select',
        '#title' => t('Expense Category:'),
        '#options' => _budget_expcat_options($agency, $dept, $year),
        '#prefix' => '<div id="expense-category"><div class="datafield expensecategory">',
        '#suffix' => '</div></div></div>',
        '#attributes' => array('class' => array('watch')),
        '#multiple' => FALSE,
        '#default_value' => !empty($form_state['values']['expense_category']) ? $form_state['values']['expense_category'] : '',
      );
  $form['filter']['budget_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Budget Code:'),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['budget_code']) ? $form_state['values']['budget_code'] : '',
    '#prefix' => '<div class="datafield budgetcode">',
    '#suffix' => '</div>',
  );
  $form['filter']['fiscal_year'] = array(
    '#type' => 'select',
    '#title' => t('Year:'),
    '#options' => _checkbook_advanced_search_get_year('budget','datafeeds'),
    '#default_value' => !empty($form_state['values']['fiscal_year']) ? $form_state['values']['fiscal_year'] : currentFiscalYear(),
    '#attributes' => array('class' => array('watch')),
    '#prefix' => '<div class="datafield fiscalyear">',
    '#suffix' => '</div>',
  );
  $form['filter']['currentfrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#prefix' => '<div class="datafield currentmodified datarange"><label>Modified Budget:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['currentfrom']) ? $form_state['values']['currentfrom'] : '',
  );
  $form['filter']['currentto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['currentto']) ? $form_state['values']['currentto'] : '',
  );
  $form['filter']['leftend'] = array(
    '#markup' => '</div><div class="column column-right">',
  );
  $form['filter']['adoptedfrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#prefix' => '<div class="datafield adoptedbudget datarange"><label>Adopted Budget:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['adoptedfrom']) ? $form_state['values']['adoptedfrom'] : '',
  );
  $form['filter']['adoptedto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['adoptedto']) ? $form_state['values']['adoptedto'] : '',
  );
  $form['filter']['preencumberedfrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#prefix' => '<div class="datafield preencumbered datarange"><label>Pre-encumbered:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['preencumberedfrom']) ? $form_state['values']['preencumberedfrom'] : '',
  );
  $form['filter']['preencumberedto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['preencumberedto']) ? $form_state['values']['preencumberedto'] : '',
  );
  $form['filter']['encumberedfrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#default_value' => !empty($form_state['values']['encumberedfrom']) ? $form_state['values']['encumberedfrom'] : '',
    '#prefix' => '<div class="datafield encumbered datarange"><label>Encumbered:</label><div class="ranges">',
  );
  $form['filter']['encumberedto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#default_value' => !empty($form_state['values']['encumberedto']) ? $form_state['values']['encumberedto'] : '',
    '#suffix' => '</div></div>',
  );
  $form['filter']['accruedexpensefrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#prefix' => '<div class="datafield accruedexpense datarange"><label>Accrued Expense:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['accruedexpensefrom']) ? $form_state['values']['accruedexpensefrom'] : '',
  );
  $form['filter']['accruedexpenseto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['accruedexpenseto']) ? $form_state['values']['accruedexpenseto'] : '',
  );
  $form['filter']['cashfrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#default_value' => !empty($form_state['values']['cashfrom']) ? $form_state['values']['cashfrom'] : '',
    '#prefix' => '<div class="datafield cashexpense datarange"><label>Cash Expense:</label><div class="ranges">',
  );
  $form['filter']['cashto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#default_value' => !empty($form_state['values']['cashto']) ? $form_state['values']['cashto'] : '',
    '#suffix' => '</div></div>',
  );
  $form['filter']['postadjustmentsfrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#prefix' => '<div class="datafield postadjustments datarange"><label>Post Adjustment:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['postadjustmentsfrom']) ? $form_state['values']['postadjustmentsfrom'] : '',
  );
  $form['filter']['postadjustmentsto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['postadjustmentsto']) ? $form_state['values']['postadjustmentsto'] : '',
  );
  $form['filter']['rightend'] = array(
    '#markup' => '</div>',
  );
  $form['columns'] = array(
    '#type' => 'fieldset',
    '#title' => t('4. Select Columns:'),
    '#collapsible' => TRUE,
  );
  $form['columns']['column_select_expense'] = array(
    '#type' => 'select',
    '#title' => t('Budget Columns<span class="form-required" title="This field is required.">*</span>'),
    '#options' => _checkbook_datafeeds_budget_column_options($format),
    '#multiple' => TRUE,
    '#default_value' => !empty($form_state['values']['column_select_expense']) ? $form_state['values']['column_select_expense'] : '',
  );
  $form['#attached'] = array(
    'library' => array(
      array('system', 'ui.autocomplete', FALSE),
      array('checkbook_datafeeds', 'jquery_multiselect', FALSE),
    ),
    'js' => array(
      'type' => 'file',
      'data' => drupal_get_path('module', 'checkbook_datafeeds') . '/js/budget.js',
    ),
  );
  $form['#validate'] = array('checkbook_datafeeds_budget_validate');
  $form['#attributes'] = array('class' => array('budget', 'data-feeds-wizard'));
  $form['prev'] = array(
    '#type' => 'submit',
    '#value' => t('Previous'),
    '#name' => 'prev',
    '#submit' => array('previous_submit'),
    '#limit_validation_errors' => array(),
  );
  $form['budget_next'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#name' => 'budget_next',
    '#suffix' => '</div>',
    '#submit' => array('checkbook_datafeeds_budget_next_submit'),
  );
  return $form;
}

/**
 * Budget column options.
 *
 * @param string $datatype
 *   Data type (xml or csv)
 *
 * @return array
 *   FAPI structured array for select box #options
 */
function _checkbook_datafeeds_budget_column_options($datatype) {
  if ($datatype == 'csv') {
    $out = drupal_map_assoc(array(
      "Agency",
      "Department",
      "Expense Category",
      "Budget Code",
      "Budget Name",
      "Pre-Encumbered",
      "Accrued Expense",
      "Year",
      "Post Adjustments",
      "Modified",
      "Adopted",
      "Encumbered",
      "Cash Expense",
    ));
  }
  else {
    if ($datatype = 'xml') {
      $out = drupal_map_assoc(array(
        "agency",
        "department",
        "expense_category",
        "budget_code",
        "budget_name",
        "pre_encumbered",
        "accrued_expense",
        "year",
        "post_adjustment",
        "modified",
        "adopted",
        "encumbered",
        "cash_expense",
      ));
    }
  }
  return $out;
}

/**
 * Stores form values and moves to next step of Data Feeds wizard in Budget.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_budget_next_submit($form, &$form_state) {
  $current_step = & $form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  $current_step = 'budget_confirmation';
  if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  else {
    $form_state['values'] = array();
  }
  // Force rebuild with next step.
  $form_state['rebuild'] = TRUE;
}

/**
 * Outputs selected search criteria and number of records found for Budget.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Renderable array of Budget confirmation page step
 */
function checkbook_datafeeds_budget_confirmation($form, &$form_state) {
  $values = $form_state['step_information']['budget']['stored_values'];
  $responsetype = $form_state['step_information']['type']['stored_values']['format'];
  $user_criteria = array();
  $user_criteria['Type of Data'] = 'Budget';
  $user_criteria['Type of File'] = $responsetype;
  $form['download_feeds'] = array(
    '#markup' => '<h2 id="edit-description">Download Data</h2>',
  );
  $form['columns'] = array(
    '#type' => 'fieldset',
    '#title' => t('Selected Columns'),
  );
  foreach ($values['column_select_expense'] as $column) {
    $form['columns'][$column] = array(
      '#markup' => '<div>' . $column . '</div>',
    );
    $user_criteria['Columns'][] = $column;
  }
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filter'),
  );
  if ($values['fiscal_year']) {
    $form['filter']['fiscal_year'] = array('#markup' => '<div><strong>Year:</strong> ' . $values['fiscal_year'] . '</div>');
    $user_criteria['Year'] = $values['fiscal_year'];
  }
  if ($values['agency']) {
    $form['filter']['agency'] = array('#markup' => '<div><strong>Agency:</strong> ' . $values['agency'] . '</div>');
    $user_criteria['Agency'] = $values['agency'];
  }
  if ($values['dept']) {
    $form['filter']['department'] = array('#markup' => '<div><strong>Department:</strong> ' . $values['dept'] . '</div>');
    $user_criteria['Department'] = $values['dept'];
  }
  if ($values['expense_category']) {
    $form['filter']['expense_category'] = array('#markup' => '<div><strong>Expense Category:</strong> ' . $values['expense_category'] . '</div>');
    $user_criteria['Expense Category'] = $values['expense_category'];
  }
  if ($values['budget_code']) {
    $form['filter']['budget_code'] = array('#markup' => '<div><strong>Budget Code:</strong> ' . $values['budget_code'] . '</div>');
    $user_criteria['Budget Code'] = $values['budget_code'];
  }
  if ($values['adoptedfrom'] && $values['adoptedto']) {
    $form['filter']['adopted_budget'] = array('#markup' => '<div><strong>Adopted Budget:</strong><br />Greater Than: $' . $values['adoptedfrom'] . ' Less Than: $' . $values['adoptedto'] . '</div>');
    $user_criteria['Adopted Budget Greater Than'] = $values['adoptedfrom'];
    $user_criteria['Adopted Budget Less Than'] = $values['adoptedto'];
  }
  elseif (!$values['adoptedfrom'] && $values['adoptedto']) {
    $form['filter']['adopted_budget'] = array('#markup' => '<div><strong>Adopted Budget:</strong><br />Less Than: $' . $values['adoptedto'] . '</div>');
    $user_criteria['Adopted Budget Less Than'] = $values['adoptedto'];
  }
  elseif ($values['adoptedfrom'] && !$values['adoptedto']) {
    $form['filter']['adopted_budget'] = array('#markup' => '<div><strong>Adopted Budget:</strong><br />Greater Than: $' . $values['adoptedfrom'] . '</div>');
    $user_criteria['Adopted Budget Greater Than'] = $values['adoptedfrom'];
  }
  if ($values['currentfrom'] && $values['currentto']) {
    $form['filter']['current_budget'] = array('#markup' => '<div><strong>Modified Budget:</strong><br />Greater Than: $' . $values['currentfrom'] . ' Less Than: $' . $values['currentto'] . '</div>');
    $user_criteria['Modified Budget Greater Than'] = $values['currentfrom'];
    $user_criteria['Modified Budget Less Than'] = $values['currentto'];
  }
  elseif (!$values['currentfrom'] && $values['currentto']) {
    $form['filter']['current_budget'] = array('#markup' => '<div><strong>Modified Budget:</strong><br />Less Than: $' . $values['currentto'] . '</div>');
    $user_criteria['Modified Budget Less Than'] = $values['currentto'];
  }
  elseif ($values['currentfrom'] && !$values['currentto']) {
    $form['filter']['current_budget'] = array('#markup' => '<div><strong>Modified Budget:</strong><br />Greater Than: $' . $values['currentfrom'] . '</div>');
    $user_criteria['Modified Budget Greater Than'] = $values['currentfrom'];
  }
  if ($values['preencumberedfrom'] && $values['preencumberedto']) {
    $form['filter']['preencumbered'] = array('#markup' => '<div><strong>Pre-encumbered:</strong><br />Greater Than: $' . $values['preencumberedfrom'] . ' Less Than: $' . $values['preencumberedto'] . '</div>');
    $user_criteria['Pre-encumbered Greater Than'] = $values['preencumberedfrom'];
    $user_criteria['Pre-encumbered Less Than'] = $values['preencumberedto'];
  }
  elseif (!$values['preencumberedfrom'] && $values['preencumberedto']) {
    $form['filter']['preencumbered'] = array('#markup' => '<div><strong>Pre-encumbered:</strong><br />Less Than: $' . $values['preencumberedto'] . '</div>');
    $user_criteria['Pre-encumbered Less Than'] = $values['preencumberedto'];
  }
  elseif ($values['preencumberedfrom'] && !$values['preencumberedto']) {
    $form['filter']['preencumbered'] = array('#markup' => '<div><strong>Pre-encumbered:</strong><br />Greater Than: $' . $values['preencumberedfrom'] . '</div>');
    $user_criteria['Pre-encumbered Greater Than'] = $values['preencumberedfrom'];
  }
  if ($values['encumberedfrom'] && $values['encumberedto']) {
    $form['filter']['encumbered'] = array('#markup' => '<div><strong>Encumbered:</strong><br />Greater Than: $' . $values['encumberedfrom'] . ' Less Than: $' . $values['encumberedto'] . '</div>');
    $user_criteria['Encumbered Greater Than'] = $values['encumberedfrom'];
    $user_criteria['Encumbered Less Than'] = $values['encumberedto'];
  }
  elseif (!$values['encumberedfrom'] && $values['encumberedto']) {
    $form['filter']['encumbered'] = array('#markup' => '<div><strong>Encumbered:</strong><br />Less Than: $' . $values['encumberedto'] . '</div>');
    $user_criteria['Encumbered Less Than'] = $values['encumberedto'];
  }
  elseif ($values['encumberedfrom'] && !$values['encumberedto']) {
    $form['filter']['encumbered'] = array('#markup' => '<div><strong>Encumbered:</strong><br />Greater Than: $' . $values['encumberedfrom'] . '</div>');
    $user_criteria['Encumbered Greater Than'] = $values['encumberedfrom'];
  }
  if ($values['cashfrom'] && $values['cashto']) {
    $form['filter']['cash_amount'] = array('#markup' => '<div><strong>Cash Expense:</strong><br />Greater Than: $' . $values['cashfrom'] . ' Less Than: $' . $values['cashto'] . '</div>');
    $user_criteria['Cash Expense Greater Than'] = $values['cashfrom'];
    $user_criteria['Cash Expense Less Than'] = $values['cashto'];
  }
  elseif (!$values['cashfrom'] && $values['cashto']) {
    $form['filter']['cash_amount'] = array('#markup' => '<div><strong>Cash Expense:</strong><br />Less Than: $' . $values['cashto'] . '</div>');
    $user_criteria['Cash Expense Less Than'] = $values['cashto'];
  }
  elseif ($values['cashfrom'] && !$values['cashto']) {
    $form['filter']['cash_amount'] = array('#markup' => '<div><strong>Cash Expense:</strong><br />Greater Than: $' . $values['cashfrom'] . '</div>');
    $user_criteria['Cash Expense Greater Than'] = $values['cashfrom'];
  }
  if ($values['postadjustmentsfrom'] && $values['postadjustmentsto']) {
    $form['filter']['post_adjustments'] = array('#markup' => '<div><strong>Post Adjustments:</strong><br />Greater Than: $' . $values['postadjustmentsfrom'] . ' Less Than: $' . $values['postadjustmentsto'] . '</div>');
    $user_criteria['Post Adjustments Greater Than'] = $values['postadjustmentsfrom'];
    $user_criteria['Post Adjustments Less Than'] = $values['postadjustmentsto'];
  }
  elseif (!$values['postadjustmentsfrom'] && $values['postadjustmentsto']) {
    $form['filter']['post_adjustments'] = array('#markup' => '<div><strong>Post Adjustments:</strong><br />Less Than: $' . $values['postadjustmentsto'] . '</div>');
    $user_criteria['Post Adjustments Less Than'] = $values['postadjustmentsto'];
  }
  elseif ($values['postadjustmentsfrom'] && !$values['postadjustmentsto']) {
    $form['filter']['post_adjustments'] = array('#markup' => '<div><strong>Post Adjustments:</strong><br />Greater Than: $' . $values['postadjustmentsfrom'] . '</div>');
    $user_criteria['Post Adjustments Greater Than'] = $values['postadjustmentsfrom'];
  }
  if ($values['accruedexpensefrom'] && $values['accruedexpenseto']) {
    $form['filter']['accrued_expense'] = array('#markup' => '<div><strong>Accrued Expense:</strong><br />Greater Than: $' . $values['accruedexpensefrom'] . ' Less Than: $' . $values['accruedexpenseto'] . '</div>');
    $user_criteria['Accrued Expense Greater Than'] = $values['accruedexpensefrom'];
    $user_criteria['Accrued Expense Less Than'] = $values['accruedexpenseto'];
  }
  elseif (!$values['accruedexpensefrom'] && $values['accruedexpenseto']) {
    $form['filter']['accrued_expense'] = array('#markup' => '<div><strong>Accrued Expense:</strong><br />Less Than: $' . $values['accruedexpenseto'] . '</div>');
    $user_criteria['Accrued Expense Less Than'] = $values['accruedexpenseto'];
  }
  elseif ($values['accruedexpensefrom'] && !$values['accruedexpenseto']) {
    $form['filter']['accrued_expense'] = array('#markup' => '<div><strong>Accrued Expense:</strong><br />Greater Than: $' . $values['accruedexpensefrom'] . '</div>');
    $user_criteria['Accrued Expense Greater Than'] = $values['accruedexpensefrom'];
  }
  $form['filter']['filetype'] = array(
    '#markup' => '<div><strong>File Type:</strong> ' . $form_state['step_information']['type']['stored_values']['format'] . '</div>',
  );
  $form['#attributes'] = array(
    'class' => array(
      'confirmation-page',
      'data-feeds-wizard',
    ),
  );
  $criteria = checkbook_datafeeds_process_budget_values($form, $form_state);
  $form_state['step_information']['confirmation']['stored_values']['criteria'] = $criteria;
  $form_state['step_information']['confirmation']['stored_values']['user_criteria'] = $user_criteria;
  $modified_form = checkbook_datafeeds_end_of_confirmation_form($form, $form_state, $criteria, $responsetype, 'budget');
  return $modified_form;
}

/**
 * Retreives form values from previous step and moves back one step in Budget.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_budget_confirmation_previous_submit($form, &$form_state) {
  $current_step = & $form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  $current_step = 'budget';
  $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Convert values from Budget section of form to an array format expected by API SearchCriteria.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Structured array expected by API
 */
function checkbook_datafeeds_process_budget_values($form, $form_state) {
  $values = $form_state['step_information']['budget']['stored_values'];
  $pattern = "/.*?(\\[.*?\\])/is";
  $criteria = array(
    'global' => array(
      'type_of_data' => 'Budget',
      'records_from' => 1,
      'max_records' => 50000,
    ),
  );
  $criteria['responseColumns'] = $values['column_select_expense'];
  if ($values['fiscal_year'] != 'All Years') {
    $criteria['value']['year'] = $values['fiscal_year'];
  }
  if ($values['agency'] != 'Citywide (All Agencies)') {
    preg_match($pattern, $values['agency'], $amatches);
    if ($amatches){
      $criteria['value']['agency_code'] = trim($amatches[1], '[ ]');
    }
  }
  if ($values['dept']) {
    preg_match($pattern, $values['dept'], $dcmatches);
    if ($dcmatches){
      $criteria['value']['department_code'] = trim($dcmatches[1], '[ ]');
    }
  }
  if ($values['expense_category']) {
    preg_match($pattern, $values['expense_category'], $ecmatches);
    if ($ecmatches){
      $criteria['value']['expense_category'] = trim($ecmatches[1], '[ ]');
    }
  }
  if ($values['budget_code']) {
    preg_match($pattern, $values['budget_code'], $bcmatches);
    if ($bcmatches){
      $criteria['value']['budget_code'] = trim($bcmatches[1], '[ ]');
    }
  }
  if ($values['adoptedfrom'] !== '' || $values['adoptedto'] !== '') {
    $criteria['range']['adopted'] = array(
      checknull($values['adoptedfrom']),
      checknull($values['adoptedto']),
    );
  }
  if ($values['currentfrom'] !== '' || $values['currentto'] !== '') {
    $criteria['range']['modified'] = array(
      checknull($values['currentfrom']),
      checknull($values['currentto']),
    );
  }
  if ($values['preencumberedfrom'] !== '' || $values['preencumberedto'] !== '') {
    $criteria['range']['pre_encumbered'] = array(
      checknull($values['preencumberedfrom']),
      checknull($values['preencumberedto']),
    );
  }
  if ($values['encumberedfrom'] !== '' || $values['encumberedto'] !== '') {
    $criteria['range']['encumbered'] = array(
      checknull($values['encumberedfrom']),
      checknull($values['encumberedto']),
    );
  }
  if ($values['cashfrom'] !== '' || $values['cashto'] !== '') {
    $criteria['range']['cash_expense'] = array(
      checknull($values['cashfrom']),
      checknull($values['cashto']),
    );
  }
  if ($values['postadjustmentsfrom'] !== '' || $values['postadjustmentsto'] !== '') {
    $criteria['range']['post_adjustment'] = array(
      checknull($values['postadjustmentsfrom']),
      checknull($values['postadjustmentsto']),
    );
  }
  if ($values['accruedexpensefrom'] !== '' || $values['accruedexpenseto'] !== '') {
    $criteria['range']['accrued_expense'] = array(
      checknull($values['accruedexpensefrom']),
      checknull($values['accruedexpenseto']),
    );
  }
  return $criteria;
}

/**
 * Validate handler for Budget section of form.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_budget_validate($form, &$form_state) {
  $numbermessage = ' must be a number.';
  $gtmessage = 'Invalid range for ';
  $adoptedfrom = $form_state['values']['adoptedfrom'];
  $adoptedto = $form_state['values']['adoptedto'];
  $currentfrom = $form_state['values']['currentfrom'];
  $currentto = $form_state['values']['currentto'];
  $preencfrom = $form_state['values']['preencumberedfrom'];
  $preencto = $form_state['values']['preencumberedto'];
  $encto = $form_state['values']['encumberedto'];
  $encfrom = $form_state['values']['encumberedfrom'];
  $cashfrom = $form_state['values']['cashfrom'];
  $cashto = $form_state['values']['cashto'];
  $postfrom = $form_state['values']['postadjustmentsfrom'];
  $postto = $form_state['values']['postadjustmentsto'];
  $accruedfrom = $form_state['values']['accruedexpensefrom'];
  $accruedto = $form_state['values']['accruedexpenseto'];
  $expensecolumns = $form_state['values']['column_select_expense'];
  // Adopted:
  if ($adoptedfrom && !is_numeric($adoptedfrom)) {
    form_set_error('adoptedfrom', t('Adopted Budget From value must be a number.'));
  }
  if ($adoptedto && !is_numeric($adoptedto)) {
    form_set_error('adoptedto', t('Adopted Budget To value must be a number.'));
  }
  if ($adoptedfrom && $adoptedto && $adoptedto < $adoptedfrom) {
    form_set_error('adoptedto', t('Invalid range for Adopted Budget.'));
  }
  // Current:
  if ($currentfrom && !is_numeric($currentfrom)) {
    form_set_error('currentfrom', t('Modified Budget From value must be a number.'));
  }
  if ($currentto && !is_numeric($currentto)) {
    form_set_error('currentto', t('Modified Budget To value must be a number.'));
  }
  if ($currentfrom && $currentto && $currentto < $currentfrom) {
    form_set_error('currentto', t('Invalid range for Modified Budget.'));
  }
  // Preencumbered:
  if ($preencfrom && !is_numeric($preencfrom)) {
    form_set_error('preencumberedfrom', t('Pre-encumbered From value must be a number.'));
  }
  if ($preencto && !is_numeric($preencto)) {
    form_set_error('preencumberedto', t('Pre-encumbered To value must be a number.'));
  }
  if ($preencfrom && $preencto && $preencto < $preencfrom) {
    form_set_error('preencumberedto', t('Invalid range for Pre-encumbered.'));
  }
  // Encumbered:
  if ($encfrom && !is_numeric($encfrom)) {
    form_set_error('encumberedfrom', t('Encumbered From value must be a number.'));
  }
  if ($encto && !is_numeric($encto)) {
    form_set_error('encumberedto', t('Encumbered To value must be a number.'));
  }
  if ($encfrom && $encto && $encto < $encfrom) {
    form_set_error('encumberedto', t('Invalid range for Encumbered.'));
  }
  // Cash:
  if ($cashfrom && !is_numeric($cashfrom)) {
    form_set_error('cashfrom', t('Cash Expense From value must be a number.'));
  }
  if ($cashto && !is_numeric($cashto)) {
    form_set_error('cashto', t('Cash Expense To value must be a number.'));
  }
  if ($cashfrom && $cashto && $cashto < $cashfrom) {
    form_set_error('cashto', t('Invalid range for Cash Expense.'));
  }
  // Post Adjustments:
  if ($postfrom && !is_numeric($postfrom)) {
      form_set_error('postadjustmentsfrom', t('Post Adjustment From value must be a number.'));
  }
  if ($postto && !is_numeric($postto)) {
    form_set_error('postadjustmentsto', t('Post Adjustment To value must be a number.'));
  }
  if ($postfrom && $postto && $postto < $postfrom) {
    form_set_error('postadjustmentsto', t('Invalid range for Post Adjustment.'));
  }
  // Accrued Expense:
  if ($accruedfrom && !is_numeric($accruedfrom)) {
    form_set_error('accruedexpensefrom', t('Accrued Expense From value must be a number.'));
  }
  if ($accruedto && !is_numeric($accruedto)) {
    form_set_error('accruedexpenseto', t('Accrued Expense To value must be a number.'));
  }
  if ($accruedfrom && $accruedto && $accruedto < $accruedfrom) {
    form_set_error('accruedexpenseto', t('Invalid range for Accrued Expense.'));
  }
  // Columns:
  if (!$expensecolumns) {
    form_set_error('column_select_expense', t('You must select at least one column.'));
  }
}

// Contracts section:
/**
 * First step of Contracts section.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form state array
 *
 * @return array
 *   Renderable array of first step of Contracts
 */
function checkbook_datafeeds_contracts($form, &$form_state) {
  $data_type = $form_state['step_information']['type']['stored_values']['format'];
  $form['description'] = array(
    '#markup' => '<h2 class="domain-title">Contracts</h2>',
  );
  $form['loaded'] = array(
    '#markup' => '<div class="updated-date">Last updated: ' . _checkbook_datafeeds_get_updated_date('contracts') . '</div>',
  );
  $form['requiredmessage'] = array(
    '#markup' => '<p class="required-message">Fields marked with an asterisk (<span class="form-required">*</span>) are required.</p>',
  );
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('3. Filter the Data:'),
    '#attributes' => array('class' => array('contracts-fieldset')),
  );
  $form['filter']['df_contract_status'] = array(
    '#type' => 'select',
    '#title' => t('Status:'),
    '#options' => array(
      'active' => 'Active',
      'registered' => 'Registered',
      'pending' => 'Pending',
    ),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['df_contract_status']) ? $form_state['values']['df_contract_status'] : 'active',
    '#prefix' => '<div class="column column-left"><div class="datafield contractstatus">',
    '#suffix' => '</div>',
  );
  $form['filter']['vendor'] = array(
    '#type' => 'textfield',
    '#title' => t('Vendor:'),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['vendor']) ? $form_state['values']['vendor'] : '',
    '#prefix' => '<div class="datafield vendor">',
    '#suffix' => '</div>',
  );
  $form['filter']['contract_type'] = array(
    '#type' => 'select',
    '#title' => t('Contract Type:'),
    '#options' => _contract_type_options(),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['contract_type']) ? $form_state['values']['contract_type'] : 'Any Contract Type',
    '#prefix' => '<div class="datafield contracttype">',
    '#suffix' => '</div>',
  );
  $form['filter']['contractno'] = array(
    '#type' => 'textfield',
    '#title' => t('Contract ID:'),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['contractno']) ? $form_state['values']['contractno'] : '',
    '#prefix' => '<div class="datafield contractno">',
    '#suffix' => '</div>',
  );
  $form['filter']['pin'] = array(
    '#type' => 'textfield',
    '#title' => t('PIN:'),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['pin']) ? $form_state['values']['pin'] : '',
    '#prefix' => '<div class="datafield pin">',
    '#suffix' => '</div>',
  );
  $form['filter']['currentamtfrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#prefix' => '<div class="datafield currentamt datarange"><label>Current Amount:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['currentamtfrom']) ? $form_state['values']['currentamtfrom'] : '',
  );
  $form['filter']['currentamtto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['currentamtto']) ? $form_state['values']['currentamtto'] : '',
  );
  $form['filter']['enddatefrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#description' => 'E.g., ' . date('Y-m-d'),
    '#attributes' => array('class' => array('datepicker')),
    '#prefix' => '<div class="datafield enddate datarange"><label>End Date:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['enddatefrom']) ? $form_state['values']['enddatefrom'] : '',
  );
  $form['filter']['enddateto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#description' => 'E.g., ' . date('Y-m-d'),
    '#attributes' => array('class' => array('datepicker')),
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['enddateto']) ? $form_state['values']['enddateto'] : '',
  );
  $form['filter']['regdatefrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#description' => 'E.g., ' . date('Y-m-d'),
    '#attributes' => array('class' => array('datepicker')),
    '#prefix' => '<div class="datafield regdate datarange"><label>Registration Date:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['regdatefrom']) ? $form_state['values']['regdatefrom'] : '',
    '#states' => array(
      'disabled' => array(
        'select[name="df_contract_status"]' => array('value' => 'pending')
      )
    )
  );
  $form['filter']['regdateto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#description' => 'E.g., ' . date('Y-m-d'),
    '#attributes' => array('class' => array('datepicker')),
    '#suffix' => '</div></div></div>',
    '#default_value' => !empty($form_state['values']['regdateto']) ? $form_state['values']['regdateto'] : '',
    '#states' => array(
      'disabled' => array(
        'select[name="df_contract_status"]' => array('value' => 'pending')
      )
    )
  );
  $form['filter']['category'] = array(
    '#type' => 'select',
    '#title' => t('Category:'),
    '#options' => array(
      'expense' => 'Expense',
      'revenue' => 'Revenue',
    ),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['category']) ? $form_state['values']['category'] : 'expense',
    '#prefix' => '<div class="column column-right"><div class="datafield category">',
    '#suffix' => '</div>',
  );
  $form['filter']['agency'] = array(
    '#type' => 'select',
    '#title' => t('Agency:'),
    '#options' => _agency_options(),
    '#attributes' => array('class' => array('watch')),
    '#prefix' => '<div class="datafield agency">',
    '#suffix' => '</div>',
    '#default_value' => !empty($form_state['values']['agency']) ? $form_state['values']['agency'] : 'Citywide (All Agencies)',
  );
  $form['filter']['apt_pin'] = array(
    '#type' => 'textfield',
    '#title' => t('APT PIN:'),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['apt_pin']) ? $form_state['values']['apt_pin'] : '',
    '#prefix' => '<div class="datafield apt-pin">',
    '#suffix' => '</div>',
  );
  $form['filter']['award_method'] = array(
    '#type' => 'select',
    '#title' => t('Award Method:'),
    '#options' => _award_method_options(),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['award_method']) ? $form_state['values']['award_method'] : '',
    '#prefix' => '<div class="datafield awardmethod">',
    '#suffix' => '</div>',
  );
  $form['filter']['startdatefrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#description' => 'E.g., ' . date('Y-m-d'),
    '#attributes' => array('class' => array('datepicker')),
    '#prefix' => '<div class="datafield startdate datarange"><label>Start Date:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['startdatefrom']) ? $form_state['values']['startdatefrom'] : '',
  );
  $form['filter']['startdateto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#description' => 'E.g., ' . date('Y-m-d'),
    '#suffix' => '</div></div>',
    '#attributes' => array('class' => array('datepicker')),
    '#default_value' => !empty($form_state['values']['startdateto']) ? $form_state['values']['startdateto'] : '',
  );
  $form['filter']['recdatefrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#description' => 'E.g., ' . date('Y-m-d'),
    '#attributes' => array('class' => array('datepicker')),
    '#prefix' => '<div class="datafield receiveddate datarange"><label>Received Date:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['recdatefrom']) ? $form_state['values']['recdatefrom'] : '',
    '#states' => array(
      'enabled' => array(
        'select[name="df_contract_status"]' => array('value' => 'pending')
      )
    )
  );
  $form['filter']['recdateto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#description' => 'E.g., ' . date('Y-m-d'),
    '#attributes' => array('class' => array('datepicker')),
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['recdateto']) ? $form_state['values']['recdateto'] : '',
    '#states' => array(
      'enabled' => array(
        'select[name="df_contract_status"]' => array('value' => 'pending')
      )
    )
  );
  $form['filter']['year'] = array(
    '#type' => 'select',
    '#title' => t('Year:'),
    '#options' => _year_options('all-years'),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['year']) ? $form_state['values']['year'] : 'ALL',
    '#prefix' => '<div class="datafield year last-item">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'disabled' => array(
        'select[name="df_contract_status"]' => array('value' => 'pending')
      )
    )
  );
  $form['columns'] = array(
    '#type' => 'fieldset',
    '#title' => t('4. Select Columns:'),
  );
  $form['columns']['column_select_expense'] = array(
    '#type' => 'select',
    '#title' => t('Expense<span class="form-required" title="This field is required.">*</span>'),
    '#multiple' => TRUE,
    '#options' => _checkbook_datafeeds_contracts_column_options($data_type, 'expense'),
    '#default_value' => !empty($form_state['values']['column_select']) ? $form_state['values']['column_select'] : '',
  );
  $form['columns']['column_select_revenue'] = array(
    '#type' => 'select',
    '#title' => t('Revenue<span class="form-required" title="This field is required.">*</span>'),
    '#multiple' => TRUE,
    '#options' => _checkbook_datafeeds_contracts_column_options($data_type, 'revenue'),
    '#default_value' => !empty($form_state['values']['column_select']) ? $form_state['values']['column_select'] : '',
  );
  $form['columns']['column_select_pending'] = array(
    '#type' => 'select',
    '#title' => t('Pending<span class="form-required" title="This field is required.">*</span>'),
    '#multiple' => TRUE,
    '#options' => _checkbook_datafeeds_contracts_column_options($data_type, 'expense', 'pending'),
    '#default_value' => !empty($form_state['values']['column_select']) ? $form_state['values']['column_select'] : '',
  );
  $form['contract_next'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('checkbook_datafeeds_contracts_next_submit'),
  );
  $form['prev'] = array(
    '#type' => 'submit',
    '#value' => t('Previous'),
    '#name' => 'prev',
    '#submit' => array('previous_submit'),
    '#limit_validation_errors' => array(),
  );
  $form['#attached'] = array(
    'library' => array(
      array('system', 'ui.autocomplete', FALSE),
      array('system', 'ui.datepicker', FALSE),
      array('checkbook_datafeeds', 'jquery_multiselect', FALSE),
    ),
    'js' => array(
      'type' => 'file',
      'data' => drupal_get_path('module', 'checkbook_datafeeds') . '/js/contracts.js',
    ),
  );
  $form['#validate'] = array('checkbook_datafeeds_contracts_validate');
  $form['#attributes'] = array(
    'class' => array(
      'contracts',
      'data-feeds-wizard',
    ),
  );
  return $form;
}

/**
 * Column options for contracts domain.
 *
 * @param string $data_type
 *   Type of data for Data Feeds to return (xml or csv)
 * @param string $contract_type
 *   Type of contract (expense or revenue)
 * @param string $status
 *   Contract status (active, registered or pending)
 *
 * @return array
 *   FAPI structured array for select box #options
 */
function _checkbook_datafeeds_contracts_column_options($data_type, $contract_type, $status = '') {
  if ($data_type == 'csv') {
    if ($status != 'pending') {
      switch ($contract_type) {
        case 'expense':
          $options = drupal_map_assoc(array(
            "Contract ID",
            "Purpose",
            "Version",
            "Year",
            "Parent Contract ID",
            "Original Amount",
            "Current Amount",
            "Spent to date",
            "Vendor",
            "Agency",
            "Contract Type",
            "Award Method",
            "Expense Category",
            "Start Date",
            "End Date",
            "Registration Date",
            "PIN",
            "APT PIN",
            "Document Code",
            "Contract Industry",
          ));
          break;

        case 'revenue':
          $options = drupal_map_assoc(array(
            "Contract ID",
            "Purpose",
            "Version",
            "Year",
            "Parent Contract ID",
            "Original Amount",
            "Current Amount",
            "Vendor",
            "Agency",
            "Contract Type",
            "Award Method",
            "Start Date",
            "End Date",
            "Registration Date",
            "PIN",
            "APT PIN",
            "Contract Category",
            "Document Code",
            "Contract Industry",
          ));
          break;
      }
    }
    else {
      $options = drupal_map_assoc(array(
        "Contract ID",
        "Parent Contract Id",
        "Purpose",
        "Current Amount",
        "Vendor",
        "Received Date",
        "Agency",
        "Contract Type",
        "Award Method",
        "Start Date",
        "End Date",
        "PIN",
        "APT PIN",
        "Document Code",
        "Version",
        "Original Amount",
        "Purpose",
        "Original Modified",
        "Contract Industry",
      ));
    }
  }
  elseif ($data_type == 'xml') {
    if ($status != 'pending') {
      switch ($contract_type) {
        case 'expense':
          $options = drupal_map_assoc(array(
            "contract_id",
            "purpose",
            "version",
            "year",
            "parent_contract_id",
            "original_amount",
            "current_amount",
            "spent_to_date",
            "vendor",
            "agency",
            "contract_type",
            "award_method",
            "expense_category",
            "start_date",
            "end_date",
            "registration_date",
            "pin",
            "apt_pin",
            "document_code",
            "contract_industry",
          ));
        break;

        case 'revenue':
          $options = drupal_map_assoc(array(
            "contract_id",
            "purpose",
            "version",
            "year",
            "parent_contract_id",
            "original_amount",
            "current_amount",
            "vendor",
            "agency",
            "contract_type",
            "award_method",
            "start_date",
            "end_date",
            "registration_date",
            "pin",
            "apt_pin",
            "document_code",
            "contract_industry",
          ));
          break;
      }
    }
    else {
      $options = drupal_map_assoc(array(
        "contract_id",
        "purpose",
        "current_amount",
        "vendor",
        "agency",
        "contract_type",
        "award_method",
        "start_date",
        "end_date",
        "pin",
        "apt_pin",
        "parent_contract_id",
        "received_date",
        "document_code",
        "version",
        "original_amount",
        "purpose",
        "original_modified",
        "contract_industry",
      ));
    }
  }
  return $options;
}

/**
 * Stores form values and moves to next step of Data Feeds wizard in Contracts.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_contracts_next_submit($form, &$form_state) {
  $current_step = & $form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  $current_step = 'contracts_confirmation';
  if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  else {
    $form_state['values'] = array();
  }
  // Force rebuild with next step.
  $form_state['rebuild'] = TRUE;
}

/**
 * Outputs selected search criteria and number of records found for Contracts.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Renderable array of Contracts confirmation step
 */
function checkbook_datafeeds_contracts_confirmation($form, &$form_state) {
  $values = $form_state['step_information']['contracts']['stored_values'];
  $responsetype = $form_state['step_information']['type']['stored_values']['format'];
  $user_criteria = array();
  $user_criteria['Type of Data'] = 'Contracts';
  $user_criteria['Type of File'] = $responsetype;
  $form['columns'] = array(
    '#type' => 'fieldset',
    '#title' => t('Selected Columns'),
  );
  $form['#attributes'] = array(
    'class' => array(
      'confirmation-page',
      'data-feeds-wizard',
    ),
  );
  if ($values['df_contract_status'] != 'pending' && $values['category'] == 'expense') {
    foreach ($values['column_select_expense'] as $column) {
      $form['columns'][$column] = array(
        '#markup' => '<div>' . $column . '</div>',
      );
      $user_criteria['Columns'][] = $column;
    }
  }
  elseif ($values['df_contract_status'] != 'pending' && $values['category'] == 'revenue') {
    foreach ($values['column_select_revenue'] as $column) {
      $form['columns'][$column] = array(
        '#markup' => '<div>' . $column . '</div>',
      );
      $user_criteria['Columns'] = $column;
    }
  }
  elseif ($values['df_contract_status'] == 'pending') {
    foreach ($values['column_select_pending'] as $column) {
      $form['columns'][$column] = array(
        '#markup' => '<div>' . $column . '</div>',
      );
      $user_criteria['Columns'] = $column;
    }
  }
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filter'),
  );
  if ($values['df_contract_status']) {
    $form['filter']['df_contract_status'] = array('#markup' => '<div><strong>Contract Status:</strong> ' . $values['df_contract_status'] . '</div>');
    $user_criteria['Contract Status'] = $values['df_contract_status'];
  }
  if ($values['vendor']) {
    $form['filter']['vendor'] = array(
      '#markup' => '<div><strong>Vendor:</strong> ' . $values['vendor'] . '</div>',
    );
    $user_criteria['Vendor'] = $values['vendor'];
  }
  if ($values['contract_type']) {
    $form['filter']['contract_type'] = array('#markup' => '<div><strong>Contract Type:</strong> ' . $values['contract_type'] . '</div>');
    $user_criteria['Contract Type'] = $values['contract_type'];
  }
  if ($values['contractno']) {
    $form['filter']['contractno'] = array(
      '#markup' => '<div><strong>Contract ID:</strong> ' . $values['contractno'] . '</div>',
    );
    $user_criteria['Contract ID'] = $values['contractno'];
  }
  if ($values['pin']) {
    $form['filter']['pin'] = array(
      '#markup' => '<div><strong>PIN:</strong> ' . $values['pin'] . '</div>',
    );
    $user_criteria['PIN'] = $values['pin'];
  }
  if ($values['currentamtfrom'] && $values['currentamtto']) {
    $form['filter']['current_amount'] = array('#markup' => '<div><strong>Current Amount:</strong><br />Greater Than: $' . $values['currentamtfrom'] . ' Less Than: $' . $values['currentamtto'] . '</div>');
    $user_criteria['Current Amount Greater Than'] = $values['currentamtfrom'];
    $user_criteria['Current Amount Less Than'] = $values['currentamtto'];
  }
  elseif (!$values['currentamtfrom'] && $values['currentamtto']) {
    $form['filter']['current_amount'] = array('#markup' => '<div><strong>Current Amount:</strong><br />Less Than: $' . $values['currentamtto'] . '</div>');
    $user_criteria['Current Amount Less Than'] = $values['currentamtto'];
  }
  elseif ($values['currentamtfrom'] && !$values['currentamtto']) {
    $form['filter']['current_amount'] = array('#markup' => '<div><strong>Current Amount:</strong><br />Greater Than: $' . $values['currentamtfrom'] . '</div>');
    $user_criteria['Current Amount Greater Than'] = $values['currentamtfrom'];
  }
  if ($values['enddatefrom'] && $values['enddateto']) {
    $form['filter']['end_date'] = array('#markup' => '<div><strong>End Date:</strong><br />Greater Than: ' . $values['enddatefrom'] . ' Less Than: ' . $values['enddateto'] . '</div>');
    $user_criteria['End Date Greater Than'] = $values['enddatefrom'];
    $user_criteria['End Date Less Than'] = $values['enddateto'];
  }
  elseif (!$values['enddatefrom'] && $values['enddateto']) {
    $form['filter']['end_date'] = array('#markup' => '<div><strong>End Date:</strong><br />Less Than: ' . $values['enddateto'] . '</div>');
    $user_criteria['End Date Less Than'] = $values['enddateto'];
  }
  elseif ($values['enddatefrom'] && !$values['enddateto']) {
    $form['filter']['end_date'] = array('#markup' => '<div><strong>End Date:</strong><br />Greater Than: ' . $values['enddatefrom'] . '</div>');
    $user_criteria['End Date Greater Than'] = $values['enddatefrom'];
  }
  if ($values['regdatefrom'] && $values['regdateto']) {
    $form['filter']['regdate'] = array('#markup' => '<div><strong>Registered Date:</strong><br />Greater Than: ' . $values['regdatefrom'] . ' Less Than: ' . $values['regdateto'] . '</div>');
    $user_criteria['Registered Date Greater Than'] = $values['regdatefrom'];
    $user_criteria['Registered Date Less Than'] = $values['regdateto'];
  }
  elseif (!$values['regdatefrom'] && $values['regdateto']) {
    $form['filter']['regdate'] = array('#markup' => '<div><strong>Registered Date:</strong><br />Less Than: ' . $values['regdateto'] . '</div>');
    $user_criteria['Registered Date Less Than'] = $values['regdateto'];
  }
  elseif ($values['regdatefrom'] && !$values['regdateto']) {
    $form['filter']['regdate'] = array('#markup' => '<div><strong>Spent To Date:</strong><br />Greater Than: $' . $values['regdatefrom'] . '</div>');
    $user_criteria['Registered Date Greater Than'] = $values['regdatefrom'];
  }
  if ($values['category']) {
    $form['filter']['category'] = array('#markup' => '<div><strong>Category:</strong> ' . $values['category'] . '</div>');
    $user_criteria['Category'] = $values['category'];
  }
  if ($values['agency']) {
    $form['filter']['agency'] = array(
      '#markup' => '<div><strong>Agency:</strong> ' . $values['agency'] . '</div>',
    );
    $user_criteria['Agency'] = $values['agency'];
  }
  if ($values['apt_pin']) {
    $form['filter']['apt_pin'] = array(
      '#markup' => '<div><strong>APT PIN:</strong> ' . $values['apt_pin'] . '</div>',
    );
    $user_criteria['APT PIN'] = $values['apt_pin'];
  }
  if ($values['award_method']) {
    $form['filter']['award_method'] = array('#markup' => '<div><strong>Award Method:</strong> ' . $values['award_method'] . '</div>');
    $user_criteria['Award Method'] = $values['award_method'];
  }
  if ($values['startdatefrom'] && $values['startdateto']) {
    $form['filter']['start_date'] = array('#markup' => '<div><strong>Start Date:</strong><br />Greater Than: ' . $values['startdatefrom'] . ' Less Than: ' . $values['startdateto'] . '</div>');
    $user_criteria['Start Date Greater Than'] = $values['startdatefrom'];
    $user_criteria['Start Date Less Than'] = $values['startdateto'];
  }
  elseif (!$values['startdatefrom'] && $values['startdateto']) {
    $form['filter']['start_date'] = array('#markup' => '<div><strong>Start Date:</strong><br />Less Than: ' . $values['startdateto'] . '</div>');
    $user_criteria['Start Date Less Than'] = $values['startdateto'];
  }
  elseif ($values['startdatefrom'] && !$values['startdateto']) {
    $form['filter']['start_date'] = array('#markup' => '<div><strong>Start Date:</strong><br />Greater Than: ' . $values['startdatefrom'] . '</div>');
    $user_criteria['Start Date Greater Than'] = $values['startdatefrom'];
  }
  if ($values['recdatefrom'] && $values['recdateto']) {
    $form['filter']['received_date'] = array('#markup' => '<div><strong>Received Date:</strong><br />Greater Than: ' . $values['recdatefrom'] . ' Less Than: ' . $values['recdateto'] . '</div>');
    $user_criteria['Received Date Greater Than'] = $values['recdatefrom'];
    $user_criteria['Received Date Less Than'] = $values['recdateto'];
  }
  elseif (!$values['recdatefrom'] && $values['recdateto']) {
    $form['filter']['received_date'] = array('#markup' => '<div><strong>Received Date:</strong><br />Less Than: ' . $values['recdateto'] . '</div>');
    $user_criteria['Received Date Less Than'] = $values['recdateto'];
  }
  elseif ($values['recdatefrom'] && !$values['recdateto']) {
    $form['filter']['received_date'] = array('#markup' => '<div><strong>Received Date:</strong><br />Greater Than: ' . $values['recdatefrom'] . '</div>');
    $user_criteria['Received Date Greater Than'] = $values['recdatefrom'];
  }
  if ($values['year']) {
    $form['filter']['year'] = array(
      '#markup' => '<div><strong>Year:</strong> ' . $values['year'] . '</div>',
    );
  }
  $form['filter']['filetype'] = array(
    '#markup' => '<div><strong>File Type:</strong> ' . $form_state['step_information']['type']['stored_values']['format'] . '</div>',
  );
  $criteria = checkbook_datafeeds_process_contracts_values($form, $form_state);
  $form_state['step_information']['confirmation']['stored_values']['criteria'] = $criteria;
  $form_state['step_information']['confirmation']['stored_values']['user_criteria'] = $user_criteria;
  $modified_form = checkbook_datafeeds_end_of_confirmation_form($form, $form_state, $criteria, $responsetype, 'contracts');
  return $modified_form;
}

/**
 * Retreives form values from previous step and moves back one step in Contracts.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_contracts_confirmation_previous_submit($form, &$form_state) {
  $current_step = & $form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  $current_step = 'contracts';
  $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Convert values from Contracts section of form to an array format expected by API SearchCriteria.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Structured array expected by API
 */
function checkbook_datafeeds_process_contracts_values($form, &$form_state) {
  $values = $form_state['step_information']['contracts']['stored_values'];
  $pattern = "/.*?(\\[.*?\\])/is";
  $criteria = array(
    'global' => array(
      'type_of_data' => 'Contracts',
      'records_from' => 1,
      'max_records' => 50000,
    ),
  );
  if ($values['df_contract_status'] != 'pending' && $values['category'] == 'expense') {
    $criteria['responseColumns'] = $values['column_select_expense'];
    if ($values['year'] && $values['year'] != 'ALL') {
      if (startsWith($values['year'], 'F')) {
        $criteria['value']['fiscal_year'] = ltrim($values['year'], 'FY');
      }
      elseif (startsWith($values['year'], 'C')) {
        $criteria['value']['calendar_year'] = ltrim($values['year'], 'CY');
      }
    }
  }
  elseif ($values['df_contract_status'] != 'pending' && $values['category'] == 'revenue') {
    $criteria['responseColumns'] = $values['column_select_revenue'];
    if ($values['year'] && $values['year'] != 'ALL') {
      if (startsWith($values['year'], 'F')) {
        $criteria['value']['fiscal_year'] = ltrim($values['year'], 'FY ');
      }
      elseif (startsWith($values['year'], 'C')) {
        $criteria['value']['calendar_year'] = ltrim($values['year'], 'CY ');
      }
    }
  }
  elseif ($values['df_contract_status'] == 'pending' && $values['category'] == 'expense') {
    $criteria['responseColumns'] = $values['column_select_pending'];
  }
  if ($values['agency'] != 'Citywide (All Agencies)') {
    preg_match($pattern, $values['agency'], $amatches);
    $criteria['value']['agency_code'] = trim($amatches[1], '[ ]');
  }
  if ($values['vendor']) {
    preg_match($pattern, $values['vendor'], $vmatches);
    if ($vmatches) {
      $criteria['value']['vendor_code'] = trim($vmatches[1], '[ ]');
    }
    else {
      $criteria['value']['vendor_code'] = $values['vendor'];
    }
  }
  if ($values['currentamtfrom'] !== '' || $values['currentamtto'] !== '') {
    $criteria['range']['current_amount'] = array(
      checknull($values['currentamtfrom']),
      checknull($values['currentamtto']),
    );
  }
  if ($values['award_method'] && $values['award_method'] != 'No Award Method Selected') {
    preg_match($pattern, $values['award_method'], $awmatches);
    $criteria['value']['award_method'] = trim($awmatches[1], '[ ]');
  }
  if ($values['contractno']) {
    $criteria['value']['contract_id'] = $values['contractno'];
  }
  if ($values['contract_type'] != 'No Contract Type Selected') {
    $criteria['value']['contract_type'] = $values['contract_type'];
  }
  if ($values['startdatefrom'] !== '' || $values['startdateto'] !== '') {
    $criteria['range']['start_date'] = array(
      checknull($values['startdatefrom']),
      checknull($values['startdateto']),
    );
  }
  if ($values['enddatefrom'] !== '' || $values['enddateto'] !== '') {
    $criteria['range']['end_date'] = array(
      checknull($values['enddatefrom']),
      checknull($values['enddateto']),
    );
  }
  if ($values['regdatefrom'] !== '' || $values['regdateto'] !== '') {
    $criteria['range']['registration_date'] = array(
      checknull($values['regdatefrom']),
      checknull($values['regdateto']),
    );
  }
  if ($values['df_contract_status']) {
    $criteria['value']['status'] = $values['df_contract_status'];
  }
  if ($values['category']) {
    $criteria['value']['category'] = $values['category'];
  }
  if ($values['recdatefrom'] !== '' || $values['recdateto'] !== '') {
    $criteria['range']['received_date'] = array(
      checknull($values['recdatefrom']),
      checknull($values['recdateto']),
    );
  }
  if ($values['pin']) {
    $criteria['value']['pin'] = strtoupper($values['pin']);
  }
  if ($values['apt_pin']) {
    $criteria['value']['apt_pin'] = strtoupper($values['apt_pin']);
  }
  return $criteria;
}

/**
 * Validate handler for Contracts section of form.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_contracts_validate($form, &$form_state) {
  $startfrom = $form_state['values']['startdatefrom'];
  $startto = $form_state['values']['startdateto'];
  $enddatefrom = $form_state['values']['enddatefrom'];
  $enddateto = $form_state['values']['enddateto'];
  $regdatefrom = $form_state['values']['regdatefrom'];
  $regdateto = $form_state['values']['regdateto'];
  $recdatefrom = $form_state['values']['recdatefrom'];
  $recdateto = $form_state['values']['recdateto'];
  $currentfrom = $form_state['values']['currentamtfrom'];
  $currentto = $form_state['values']['currentamtto'];
  $activeexpense = $form_state['values']['column_select_expense'];
  $activerevenue = $form_state['values']['column_select_revenue'];
  $pending = $form_state['values']['column_select_pending'];
  $vendor = $form_state['values']['vendor'];
  // Start Date:
  if ($startfrom && !checkDateFormat($startfrom)) {
    form_set_error('startdatefrom', t('Start Date must be a valid date (YYYY-MM-DD).'));
  }
  if ($startto && !checkDateFormat($startto)) {
    form_set_error('startdateto', t('Start Date must be a valid date (YYYY-MM-DD).'));
  }
  if ($startfrom && $startto && strtotime($startto) < strtotime($startfrom)) {
    form_set_error('startdateto', t('Invalid date range for Start Date.'));
  }
  // End Date:
  if ($enddatefrom && !checkDateFormat($enddatefrom)) {
    form_set_error('enddatefrom', t('End Date must be a valid date (YYYY-MM-DD).'));
  }
  if ($enddateto && !checkDateFormat($enddateto)) {
    form_set_error('enddateto', t('End Date must be a valid date (YYYY-MM-DD).'));
  }
  if ($enddatefrom && $enddateto && strtotime($enddateto) < strtotime($enddatefrom)) {
    form_set_error('enddateto', t('Invalid date range for End Date.'));
  }
  // Registered Date:
  if ($regdatefrom && !checkDateFormat($regdatefrom)) {
    form_set_error('regdatefrom', t('Registered Date must be a valid date (YYYY-MM-DD).'));
  }
  if ($regdateto && !checkDateFormat($regdateto)) {
    form_set_error('regdateto', t('Registered Date must be a valid date (YYYY-MM-DD).'));
  }
  if ($regdatefrom && $regdateto && strtotime($regdateto) < strtotime($regdatefrom)) {
    form_set_error('regdateto', t('Invalid Date range for Registered Date.'));
  }
  // Received Date:
  if ($recdatefrom && !checkDateFormat($recdatefrom)) {
    form_set_error('recdatefrom', t('Received Date must be a valid date (YYYY-MM-DD).'));
  }
  if ($recdateto && !checkDateFormat($recdateto)) {
    form_set_error('recdateto', t('Received Date must be a valid date (YYYY-MM-DD).'));
  }
  if ($recdatefrom && $recdateto && strtotime($recdateto) < strtotime($recdatefrom)) {
    form_set_error('recdateto', t('Invalid Date range for Received Date.'));
  }
  // Current Amount:
  if ($currentfrom && !is_numeric($currentfrom)) {
    form_set_error('currentamtfrom', t('Current Amount must be a number.'));
  }
  if ($currentto && !is_numeric($currentto)) {
    form_set_error('currentamtto', t('Current Amount must be a number.'));
  }
  if ($currentfrom && $currentto && $currentto < $currentfrom) {
    form_set_error('currentamtto', t('Invalid range for Current Amount.'));
  }
  // Vendor:
  if ($vendor) {
    $pattern = "/.*?(\\[.*?\\])/is";
    preg_match($pattern, $vendor, $vmatches);
    if (!$vmatches) {
      try {
        $dataController = data_controller_get_instance();
        $results = $dataController->queryDataset('checkbook:vendor', array('vendor_customer_code'), array('vendor_customer_code' => $vendor));
      }
      catch (Exception $e) {
        log_error($e->getMessage());
      }
      if (!$results[0]) {
        form_set_error('vendor', t('Please enter a valid vendor code.'));
      }
    }
  }
  //Columns
  if (!$activeexpense && $form_state['values']['df_contract_status'] != 'pending' && $form_state['values']['category'] == 'expense') {
    form_set_error('column_select_expense', t('You must select at least one column.'));
  }
  if (!$activerevenue && $form_state['values']['df_contract_status'] != 'pending' && $form_state['values']['category'] == 'revenue') {
    form_set_error('column_select_revenue', t('You must select at least one column.'));
  }
  if (!$pending && $form_state['values']['df_contract_status'] == 'pending') {
    form_set_error('column_select_pending', t('You must select at least one column.'));
  }
  if ($form_state['values']['df_contract_status'] != 'pending') {
    if ($form_state['values']['recdatefrom']) {
      form_set_error('recdatefrom', t('Received Date filter is not available on active or registered contracts.'));
    }
    if ($form_state['values']['recdateto']) {
      form_set_error('recdateto', t('Received Date filter is not available on active or registered contracts.'));
    }
  }
  elseif ($form_state['values']['df_contract_status'] == 'pending') {
    if ($form_state['values']['regdatefrom']) {
      form_set_error('spentto', t('Registered Date filter is not available on pending contracts'));
    }
    if ($form_state['values']['regdateto']) {
      form_set_error('spentto', t('Registered Date filter is not available on pending contracts'));
    }
  }
}

// Payroll section:
/**
 * First step of Payroll section.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Renderable array of first step of Payroll
 */
function checkbook_datafeeds_payroll($form, &$form_state) {
  $datatype = $form_state['step_information']['type']['stored_values']['format'];
  $form['description'] = array(
    '#markup' => '<h2 class="domain-title">Payroll</h2>',
  );
  $form['loaded'] = array(
    '#markup' => '<div class="updated-date">Last updated: ' . _checkbook_datafeeds_get_updated_date('payroll') . '</div>',
  );
  $form['requiredmessage'] = array(
    '#markup' => '<p class="required-message">Fields marked with an asterisk (<span class="form-required">*</span>) are required.</p>',
  );
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('3. Filter the Data:'),
    '#attributes' => array('class' => array('payroll-fieldset')),
  );
  $form['filter']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title:'),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['title']) ? $form_state['values']['title'] : '',
    '#prefix' => '<div class="column column-left"><div class="datafield title">',
    '#suffix' => '</div>',
  );
  $form['filter']['agency'] = array(
    '#type' => 'select',
    '#title' => t('Agency:'),
    '#options' => _agency_options(),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['agency']) ? $form_state['values']['agency'] : 'Citywide (All Agencies)',
    '#prefix' => '<div class="datafield agency">',
    '#suffix' => '</div>',
  );
  $form['filter']['otherfrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#prefix' => '<div class="datafield otherpay datarange"><label>Other Payments:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['otherfrom']) ? $form_state['values']['otherfrom'] : '',
  );
  $form['filter']['otherto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['otherto']) ? $form_state['values']['otherto'] : '',
  );
  $form['filter']['grossfrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#prefix' => '<div class="datafield grosspay datarange"><label>Gross Pay:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['grossfrom']) ? $form_state['values']['grossfrom'] : '',
  );
  $form['filter']['grossto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['grossto']) ? $form_state['values']['grossto'] : '',
  );
  $form['filter']['totalgrossfrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#prefix' => '<div class="datafield totalgross datarange"><label>Gross Pay YTD:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['totalgrossfrom']) ? $form_state['values']['totalgrossfrom'] : '',
  );
  $form['filter']['totalgrossto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['totalgrossto']) ? $form_state['values']['totalgrossto'] : '',
  );
  $form['filter']['salaryfrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#prefix' => '<div class="datafield salary datarange"><label>Amount:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['salaryfrom']) ? $form_state['values']['salaryfrom'] : '',
  );
  $form['filter']['salaryto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['salaryto']) ? $form_state['values']['salaryto'] : '',
  );
  $form['filter']['salary_type'] = array(
    '#type' => 'radios',
    '#options' => array(
      'ALL' => 'All',
      'ANNUAL' => 'Annual',
      'RATE' => 'Rate'
    ),
    '#default_value' => !empty($form_state['values']['salary_type']) ? $form_state['values']['salary_type'] : 'ALL',
    '#prefix' => '<div class="datafield salarytype">',
    '#suffix' => '</div></div>',
  );
  $form['filter']['basepayfrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#prefix' => '<div class="column column-right"><div class="datafield basepay datarange"><label>Base Pay:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['basepayfrom']) ? $form_state['values']['basepayfrom'] : '',
  );
  $form['filter']['basepayto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['basepayto']) ? $form_state['values']['basepayto'] : '',
  );
  $form['filter']['overtimefrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#prefix' => '<div class="datafield overtime datarange"><label>Overtime Payments:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['overtimefrom']) ? $form_state['values']['overtimefrom'] : '',
  );
  $form['filter']['overtimeto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['overtimeto']) ? $form_state['values']['overtimeto'] : '',
  );
  $form['filter']['payfrequency'] = array(
    '#type' => 'select',
    '#title' => t('Pay Frequency:'),
    '#options' => _checkbook_advanced_search_get_payroll_frequency(),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['payfrequency']) ? $form_state['values']['payfrequency'] : '',
    '#prefix' => '<div class="datafield payfrequency">',
    '#suffix' => '</div>',
  );
  $form['filter']['year'] = array(
    '#type' => 'select',
    '#title' => t('Year:'),
    '#options' => _year_options(),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['year']) ? $form_state['values']['year'] : 'FY ' . currentFiscalYear(),
    '#prefix' => '<div class="datafield fiscalyear">',
    '#suffix' => '</div>',
  );
  $form['filter']['paydatefrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#description' => 'E.g., ' . date('Y-m-d'),
    '#prefix' => '<div class="datafield paydate datarange"><label>Pay Date:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['paydatefrom']) ? $form_state['values']['paydatefrom'] : '',
    '#attributes' => array('class' => array('datepicker')),
  );
  $form['filter']['paydateto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#description' => 'E.g., ' . date('Y-m-d'),
    '#suffix' => '</div></div></div>',
    '#default_value' => !empty($form_state['values']['paydateto']) ? $form_state['values']['paydateto'] : '',
    '#attributes' => array('class' => array('datepicker')),
  );
  $form['columns'] = array(
    '#type' => 'fieldset',
    '#title' => t('4. Select Columns:'),
  );
  $form['columns']['column_select'] = array(
    '#type' => 'select',
    '#title' => t('Columns'),
    '#options' => _checkbook_datafeeds_payroll_column_options($datatype),
    '#multiple' => TRUE,
    '#default_value' => !empty($form_state['values']['column_select']) ? $form_state['values']['column_select'] : '',
    '#required' => TRUE,
  );
  $form['payroll_next'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('checkbook_datafeeds_payroll_next_submit'),
  );
  $form['prev'] = array(
    '#type' => 'submit',
    '#value' => t('Previous'),
    '#name' => 'prev',
    '#submit' => array('previous_submit'),
    '#limit_validation_errors' => array(),
  );
  $form['#attached'] = array(
    'library' => array(
      array('system', 'ui.autocomplete', FALSE),
      array('system', 'ui.datepicker', FALSE),
      array('checkbook_datafeeds', 'jquery_multiselect', FALSE),
    ),
    'js' => array(
      'type' => 'file',
      'data' => drupal_get_path('module', 'checkbook_datafeeds') . '/js/payroll.js',
    )
  );
  $form['#validate'] = array('checkbook_datafeeds_payroll_validate');
  $form['#attributes'] = array(
    'class' => array(
      'payroll',
      'data-feeds-wizard',
    ),
  );
  return $form;
}

/**
 * Column options for Payroll domain.
 *
 * @param string $datatype
 *   Type of data for Data Feeds to return (xml or csv)
 *
 * @return array
 *   FAPI structured array for select box #options
 */
function _checkbook_datafeeds_payroll_column_options($datatype) {
  if ($datatype == 'csv') {
    $options =
      drupal_map_assoc(array(
          "Agency",
          "Title",
          "Pay Frequency",
          "Pay Date",
          "Annual Salary",
          "Hourly Rate",
          "Gross Pay",
          "Base Pay",
          "Other Payments",
          "Overtime Payments",
          "Gross Pay YTD",
          "Fiscal year",
          "Calendar Year",
        )
      );
  }
  else {
    if ($datatype == 'xml') {
      $options = array(
        "agency_name" => "agency",
        "civil_service_title" => "title",
        "pay_frequency" => "pay_frequency",
        "pay_date" => "pay_date",
        "salaried_amount" => "annual_salary",
        "non_salaried_amount" => "hourly_rate",
        "gross_pay" => "gross_pay",
        "base_pay" => "base_pay",
        "other_payments" => "other_payments",
        "overtime_pay" => "overtime_payments",
        "gross_pay_ytd" => "gross_pay_ytd",
        "fiscal_year" => "fiscal_year",
        "calendar_fiscal_year" => "calendar_year",
      );
    }
  }
  return $options;
}

/**
 * Stores form values and moves to next step of Data Feeds wizard in Payroll.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_payroll_next_submit($form, &$form_state) {
  $current_step = & $form_state['step'];
  if (startsWith($form_state['values']['year'], 'F')) {
    if ($form_state['step_information']['type']['stored_values']['format'] == 'csv') {
      if ($form_state['values']['column_select']['Year']) {
        unset($form_state['values']['column_select']['Year']);
        $form_state['values']['column_select']['Fiscal year'] = 'Fiscal year';
      }
    }
    elseif ($form_state['step_information']['type']['stored_values']['format'] == 'xml') {
      if ($form_state['values']['column_select']['year']) {
        unset($form_state['values']['column_select']['year']);
        $form_state['values']['column_select']['fiscal_year'] = 'fiscal_year';
      }
    }
  }
  elseif (startsWith($form_state['values']['year'], 'C')) {
    if ($form_state['step_information']['type']['stored_values']['format'] == 'csv') {
      if ($form_state['values']['column_select']['Year']) {
        unset($form_state['values']['column_select']['Year']);
        $form_state['values']['column_select']['Calendar Year'] = 'Calendar Year';
      }
    }
    elseif ($form_state['step_information']['type']['stored_values']['format'] == 'xml') {
      if ($form_state['values']['column_select']['year']) {
        unset($form_state['values']['column_select']['year']);
        $form_state['values']['column_select']['calendar_year'] = 'calendar_year';
      }
    }
  }
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  $current_step = 'payroll_confirmation';
  if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  else {
    $form_state['values'] = array();
  }
  $form_state['rebuild'] = TRUE; // Force rebuild with next step.
}

/**
 * Outputs selected search criteria and number of records found for Payroll.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Renderable array of Contracts confirmation step
 */
function checkbook_datafeeds_payroll_confirmation($form, &$form_state) {
  $values = $form_state['step_information']['payroll']['stored_values'];
  $responsetype = $form_state['step_information']['type']['stored_values']['format'];
  $user_criteria = array();
  $user_criteria['Type of Data'] = 'Payroll';
  $user_criteria['Type of File'] = $responsetype;
  $form['columns'] = array(
    '#type' => 'fieldset',
    '#title' => t('Selected Columns'),
  );
  $form['#attributes'] = array(
    'class' => array(
      'confirmation-page',
      'data-feeds-wizard',
    )
  );
  foreach ($values['column_select'] as $column) {
    $form['columns'][$column] = array(
      '#markup' => '<div>' . $column . '</div>',
    );
    $user_criteria['Columns'][] = $column;
  }
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filter'),
  );
  if (startsWith($values['year'], 'F')) {
    $form['filter']['year'] = array(
      '#markup' => '<div><strong>Fiscal Year:</strong> ' . $values['year'] . '</div>',
    );
    $user_criteria['Fiscal Year'] = $values['year'];
  }
  elseif (startsWith($values['year'], 'C')) {
    $form['filter']['year'] = array(
      '#markup' => '<div><strong>Calendar Year:</strong> ' . $values['year'] . '</div>',
    );
    $user_criteria['Calendar Year'] = $values['year'];
  }
  if ($values['agency']) {
    $form['filter']['agency'] = array(
      '#markup' => '<div><strong>Agency:</strong> ' . $values['agency'] . '</div>',
    );
    $user_criteria['Agency'] = $values['agency'];
  }
  if ($values['title']) {
    $form['filter']['title'] = array(
      '#markup' => '<div><strong>Title:</strong> ' . $values['title'] . '</div>',
    );
    $user_criteria['Title'] = $values['title'];
  }
  if ($values['payfrequency']) {
    $form['filter']['payfrequency'] = array(
      '#markup' => '<div><strong>Pay Frequency:</strong> ' . $values['payfrequency'] . '</div>',
    );
    $user_criteria['Pay Frequency'] = $values['payfrequency'];
  }
  if ($values['basepayfrom'] && $values['basepayto']) {
    $form['filter']['base_pay'] = array('#markup' => '<div><strong>Base Pay:</strong><br />Greater Than: $' . $values['basepayfrom'] . ' Less Than: $' . $values['basepayto'] . '</div>');
    $user_criteria['Base Pay Greater Than'] = $values['basepayfrom'];
    $user_criteria['Base Pay Less Than'] = $values['basepayto'];
  }
  elseif (!$values['basepayfrom'] && $values['basepayto']) {
    $form['filter']['base_pay'] = array('#markup' => '<div><strong>Base Pay:</strong><br />Less Than: $' . $values['basepayto'] . '</div>');
    $user_criteria['Base Pay Less Than'] = $values['basepayto'];
  }
  elseif ($values['basepayfrom'] && !$values['basepayto']) {
    $form['filter']['base_pay'] = array('#markup' => '<div><strong>Base Pay:</strong><br />Greater Than: $' . $values['basepayfrom'] . '</div>');
    $user_criteria['Base Pay Greater Than'] = $values['basepayfrom'];
  }
  if ($values['overtimefrom'] && $values['overtimeto']) {
    $form['filter']['overtime_pay'] = array('#markup' => '<div><strong>Overtime Pay:</strong><br />Greater Than: $' . $values['overtimefrom'] . ' Less Than: $' . $values['overtimeto'] . '</div>');
    $user_criteria['Overtime Pay Greater Than'] = $values['overtimefrom'];
    $user_criteria['Overtime Pay Less Than'] = $values['overtimeto'];
  }
  elseif (!$values['overtimefrom'] && $values['overtimeto']) {
    $form['filter']['overtime_pay'] = array('#markup' => '<div><strong>Overtime Pay:</strong><br />Less Than: $' . $values['overtimeto'] . '</div>');
    $user_criteria['Overtime Pay Less Than'] = $values['overtimeto'];
  }
  elseif ($values['overtimefrom'] && !$values['overtimeto']) {
    $form['filter']['overtime_pay'] = array('#markup' => '<div><strong>Overtime Pay:</strong><br />Greater Than: $' . $values['overtimefrom'] . '</div>');
    $user_criteria['Overtime Pay Greater Than'] = $values['overtimefrom'];
  }
  if ($values['otherfrom'] && $values['otherto']) {
    $form['filter']['other_pay'] = array('#markup' => '<div><strong>Other Pay:</strong><br />Greater Than: $' . $values['otherfrom'] . ' Less Than: $' . $values['otherto'] . '</div>');
    $user_criteria['Other Pay Greater Than'] = $values['otherfrom'];
    $user_criteria['Other Pay Less Than'] = $values['otherto'];
  }
  elseif (!$values['otherfrom'] && $values['otherto']) {
    $form['filter']['other_pay'] = array('#markup' => '<div><strong>Other Pay:</strong><br />Less Than: $' . $values['otherto'] . '</div>');
    $user_criteria['Other Pay Less Than'] = $values['otherto'];
  }
  elseif ($values['otherfrom'] && !$values['otherto']) {
    $form['filter']['other_pay'] = array('#markup' => '<div><strong>Other Pay:</strong><br />Greater Than: $' . $values['otherfrom'] . '</div>');
    $user_criteria['Other Pay Greater Than'] = $values['otherfrom'];
  }
  if ($values['grossfrom'] && $values['grossto']) {
    $form['filter']['gross_pay'] = array('#markup' => '<div><strong>Gross Pay:</strong><br />Greater Than: $' . $values['grossfrom'] . ' Less Than: $' . $values['grossto'] . '</div>');
    $user_criteria['Gross Pay Greater Than'] = $values['grossfrom'];
    $user_criteria['Gross Pay Less Than'] = $values['grossto'];
  }
  elseif (!$values['grossfrom'] && $values['grossto']) {
    $form['filter']['gross_pay'] = array('#markup' => '<div><strong>Gross Pay:</strong><br />Less Than: $' . $values['grossto'] . '</div>');
    $user_criteria['Gross Pay Less Than'] = $values['grossto'];
  }
  elseif ($values['grossfrom'] && !$values['grossto']) {
    $form['filter']['gross_pay'] = array('#markup' => '<div><strong>Gross Pay:</strong><br />Greater Than: $' . $values['grossfrom'] . '</div>');
    $user_criteria['Gross Pay Greater Than'] = $values['grossfrom'];
  }
  if ($values['payratefrom'] && $values['payrateto']) {
    $form['filter']['pay_rate'] = array('#markup' => '<div><strong>Pay Rate:</strong><br />Greater Than: $' . $values['payratefrom'] . ' Less Than: $' . $values['payrateto'] . '</div>');
    $user_criteria['Pay Rate Greater Than'] = $values['payratefrom'];
    $user_criteria['Pay Rate Less Than'] = $values['payrateto'];
  }
  elseif (!$values['payratefrom'] && $values['payrateto']) {
    $form['filter']['pay_rate'] = array('#markup' => '<div><strong>Pay Rate:</strong><br />Less Than: $' . $values['payrateto'] . '</div>');
    $user_criteria['Pay Rate Less Than'] = $values['payrateto'];
  }
  elseif ($values['payratefrom'] && !$values['payrateto']) {
    $form['filter']['pay_rate'] = array('#markup' => '<div><strong>Pay Rate:</strong><br />Greater Than: $' . $values['payratefrom'] . '</div>');
    $user_criteria['Pay Rate Greater Than'] = $values['payratefrom'];
  }
  if ($values['paydatefrom'] && $values['paydateto']) {
    $form['filter']['pay_date'] = array('#markup' => '<div><strong>Pay Date:</strong><br />After: ' . $values['paydatefrom'] . ' Before: ' . $values['paydateto'] . '</div>');
    $user_criteria['Pay Date After'] = $values['paydatefrom'];
    $user_criteria['Pay Date Before'] = $values['paydateto'];
  }
  elseif (!$values['paydatefrom'] && $values['paydateto']) {
    $form['filter']['pay_date'] = array('#markup' => '<div><strong>Pay Date:</strong><br />Before: ' . $values['paydateto'] . '</div>');
    $user_criteria['Pay Date Before'] = $values['paydateto'];
  }
  elseif ($values['paydatefrom'] && !$values['payrateto']) {
    $form['filter']['pay_date'] = array('#markup' => '<div><strong>Pay Date:</strong><br />After: ' . $values['paydatefrom'] . '</div>');
    $user_criteria['Pay Date After'] = $values['paydatefrom'];
  }
  if ($values['totalgrossfrom'] && $values['totalgrossto']) {
    $form['filter']['total_gross'] = array('#markup' => '<div><strong>Gross Pay YTD:</strong><br />Greater Than: $' . $values['totalgrossfrom'] . ' Less Than: $' . $values['totalgrossto'] . '</div>');
    $user_criteria['Gross Pay YTD Greater Than'] = $values['totalgrossfrom'];
    $user_criteria['Gross Pay YTD Less Than'] = $values['totalgrossto'];
  }
  elseif (!$values['totalgrossfrom'] && $values['totalgrossto']) {
    $form['filter']['total_gross'] = array('#markup' => '<div><strong>Gross Pay YTD:</strong><br />Less Than: $' . $values['totalgrossto'] . '</div>');
    $user_criteria['Gross Pay YTD Less Than'] = $values['totalgrossto'];
  }
  elseif ($values['totalgrossfrom'] && !$values['totalgrossto']) {
    $form['filter']['total_gross'] = array('#markup' => '<div><strong>Gross Pay YTD:</strong><br />Greater Than: $' . $values['totalgrossfrom'] . '</div>');
    $user_criteria['Gross Pay YTD Greater Than'] = $values['totalgrossfrom'];
  }
  $form['filter']['salary_type'] = array(
    '#markup' => '<div><strong>Salary Type:</strong> ' . $values['salary_type'] . '</div>'
  );
  $user_criteria['Salary Type'] = $values['salary_type'];
  if ($values['salaryfrom'] && $values['salaryto']) {
    $form['filter']['annual_salary'] = array('#markup' => '<div><strong>Amount:</strong><br />Greater Than: $' . $values['salaryfrom'] . ' Less Than: $' . $values['salaryto'] . '</div>');
    $user_criteria['Amount Greater Than'] = $values['salaryfrom'];
    $user_criteria['Amount Less Than'] = $values['salaryto'];
  }
  elseif (!$values['salaryfrom'] && $values['salaryto']) {
    $form['filter']['annual_salary'] = array('#markup' => '<div><strong>Amount:</strong><br />Less Than: $' . $values['salaryto'] . '</div>');
    $user_criteria['Amount Less Than'] = $values['salaryto'];
  }
  elseif ($values['salaryfrom'] && !$values['salaryto']) {
    $form['filter']['annual_salary'] = array('#markup' => '<div><strong>Amount:</strong><br />Greater Than: $' . $values['salaryfrom'] . '</div>');
    $user_criteria['Amount Greater Than'] = $values['salaryfrom'];
  }
  $criteria = checkbook_datafeeds_process_payroll_values($form, $form_state);
  $form_state['step_information']['confirmation']['stored_values']['criteria'] = $criteria;
  $form_state['step_information']['confirmation']['stored_values']['user_criteria'] = $user_criteria;
  $modified_form = checkbook_datafeeds_end_of_confirmation_form($form, $form_state, $criteria, $responsetype, 'payroll');
  return $modified_form;
}

/**
 * Retreives form values from previous step and moves back one step in Payroll.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_payroll_confirmation_previous_submit($form, &$form_state) {
  $current_step = & $form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  $current_step = 'payroll';
  $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  if ($form_state['step_information']['type']['stored_values']['format'] == 'csv') {
    if ($form_state['values']['column_select']['Fiscal year'] == 'Fiscal year') {
      unset($form_state['values']['column_select']['Fiscal year']);
      $form_state['values']['column_select']['Year'] = 'Year';
    }
    elseif ($form_state['values']['column_select']['Calendar Year'] == 'Calendar Year') {
      unset($form_state['values']['column_select']['Calendar Year']);
      $form_state['values']['column_select']['Year'] = 'Year';
    }
  }
  elseif ($form_state['step_information']['type']['stored_values']['format'] == 'xml') {
    if ($form_state['values']['column_select']['fiscal_year'] == 'fiscal_year') {
      unset($form_state['values']['column_select']['fiscal_year']);
      $form_state['values']['column_select']['year'] = 'year';
    }
    elseif ($form_state['values']['column_select']['calendar_year'] == 'calendar_year') {
      unset($form_state['values']['column_select']['calendar_year']);
      $form_state['values']['column_select']['year'] = 'year';
    }
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Convert values from Payroll section of form to an array format expected by API SearchCriteria.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Structured array expected by API
 */
function checkbook_datafeeds_process_payroll_values($form, &$form_state) {
  $values = $form_state['step_information']['payroll']['stored_values'];
  $pattern = "/.*?(\\[.*?\\])/is";
  $criteria = array(
    'global' => array(
      'type_of_data' => 'Payroll',
      'records_from' => 1,
      'max_records' => 50000,
    ),
    'responseColumns' => $values['column_select']
  );
  if (startsWith($values['year'], 'F')) {
    $criteria['value']['fiscal_year'] = ltrim($values['year'], 'FY ');
  }
  elseif (startsWith($values['year'], 'C')) {
    $criteria['value']['calendar_year'] = ltrim($values['year'], 'CY ');
  }
  if ($values['agency'] != 'Citywide (All Agencies)') {
    preg_match($pattern, $values['agency'], $amatches);
    $criteria['value']['agency_code'] = trim($amatches[1], '[ ]');
  }
  if ($values['title']) {
    $criteria['value']['title'] = $values['title'];
  }
  if ($values['payfrequency'] != '') {
    $criteria['value']['pay_frequency'] = $values['payfrequency'];
  }
  if ($values['basepayfrom'] !== '' || $values['basepayto'] !== '') {
    $criteria['range']['base_pay'] = array(
      checknull($values['basepayfrom']),
      checknull($values['basepayto']),
    );
  }
  if ($values['overtimefrom'] !== '' || $values['overtimeto'] !== '') {
    $criteria['range']['overtime_payments'] = array(
      checknull($values['overtimefrom']),
      checknull($values['overtimeto']),
    );
  }
  if ($values['otherfrom'] !== '' || $values['otherto'] !== '') {
    $criteria['range']['other_payments'] = array(
      checknull($values['otherfrom']),
      checknull($values['otherto']),
    );
  }
  if ($values['grossfrom'] !== '' || $values['grossto'] !== '') {
    $criteria['range']['gross_pay'] = array(
      checknull($values['grossfrom']),
      checknull($values['grossto']),
    );
  }
  if ($values['paydatefrom'] !== '' || $values['paydateto'] !== '') {
    $criteria['range']['pay_date'] = array(
      checknull($values['paydatefrom']),
      checknull($values['paydateto']),
    );
  }
  if ($values['totalgrossfrom'] !== '' || $values['totalgrossto'] !== '') {
    $criteria['range']['gross_pay_ytd'] = array(
      checknull($values['totalgrossfrom']),
      checknull($values['totalgrossto']),
    );
  }
  if ($values['salary_type']) {
    $criteria['value']['amount_type'] = $values['salary_type'];
  }
  if ($values['salaryfrom'] !== '' || $values['salaryto'] !== '') {
    $criteria['range']['amount'] = array(
      checknull($values['salaryfrom']),
      checknull($values['salaryto']),
    );
  }
  return $criteria;
}

/**
 * Validate handler for Payroll section of form
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_payroll_validate($form, &$form_state) {
  $numbermessage = 'Value must be a number.';
  $gtmessage = 'Value of To value must be greater than From value.';
  $datemessage = 'Value must be a valid date.';
  $basepayfrom = $form_state['values']['basepayfrom'];
  $basepayto = $form_state['values']['basepayto'];
  $overtimefrom = $form_state['values']['overtimefrom'];
  $overtimeto = $form_state['values']['overtimeto'];
  $otherfrom = $form_state['values']['otherfrom'];
  $otherto = $form_state['values']['otherto'];
  $grossfrom = $form_state['values']['grossfrom'];
  $grossto = $form_state['values']['grossto'];
  $paydatefrom = $form_state['values']['paydatefrom'];
  $paydateto = $form_state['values']['paydateto'];
  $totalgrossfrom = $form_state['values']['totalgrossfrom'];
  $totalgrossto = $form_state['values']['totalgrossto'];
  $salaryfrom = $form_state['values']['salaryfrom'];
  $salaryto = $form_state['values']['salaryto'];
  // Base Pay:
  if ($basepayfrom && !is_numeric($basepayfrom)) {
    form_set_error('basepayfrom', t('Base Pay From value must be a number.'));
  }
  if ($basepayto && !is_numeric($basepayto)) {
    form_set_error('basepayto', t('Base Pay To value must be a number.'));
  }
  if ($basepayfrom && $basepayto && $basepayto < $basepayfrom) {
    form_set_error('basepayto', t('Invalid range for Base Pay.'));
  }
  // Overtime Pay:
  if ($overtimefrom && !is_numeric($overtimefrom)) {
    form_set_error('overtimefrom', t('Overtime Payments From value must be a number.'));
  }
  if ($overtimeto && !is_numeric($overtimeto)) {
    form_set_error('overtimeto', t('Overtime Payments To value must be a number.'));
  }
  if ($overtimefrom && $overtimeto && $overtimeto < $overtimefrom) {
    form_set_error('overtimeto', t('Invalid range for Overtime Payments.'));
  }
  // Other Pay:
  if ($otherfrom && !is_numeric($otherfrom)) {
    form_set_error('otherfrom', t('Other Payments From value must be a number.'));
  }
  if ($otherto && !is_numeric($otherto)) {
    form_set_error('otherto', t('Other Payments To value must be a number.'));
  }
  if ($otherfrom && $otherto && $otherto < $otherfrom) {
    form_set_error('otherto', t('Invalid range for Other Payments.'));
  }
  // Gross Pay:
  if ($grossfrom && !is_numeric($grossfrom)) {
    form_set_error('grossfrom', t('Gross Pay From value must be a number.'));
  }
  if ($grossto && !is_numeric($grossto)) {
    form_set_error('grossto', t('Gross Pay To value must be a number.'));
  }
  if ($grossfrom && $grossto && $grossto < $grossfrom) {
    form_set_error('grossto', t('Invalid range for Gross Pay'));
  }
  // Pay Date:
  if ($paydatefrom && !checkDateFormat($paydatefrom)) {
    form_set_error('paydatefrom', t('Pay Date From must be a valid date (YYYY-MM-DD).'));
  }
  if ($paydateto && !checkDateFormat($paydateto)) {
    form_set_error('paydateto', t('Pay Date To must be a valid date (YYYY-MM-DD).'));
  }
  if ($paydatefrom && $paydateto && strtotime($paydateto) < strtotime($paydatefrom)) {
    form_set_error('paydateto', t('Invalid range for Pay Date'));
  }
  // Total Gross YTD:
  if ($totalgrossfrom && !is_numeric($totalgrossfrom)) {
    form_set_error('totalgrossfrom', t('Gross Pay YTD From value must be a number.'));
  }
  if ($totalgrossto && !is_numeric($totalgrossto)) {
    form_set_error('totalgrossto', t('Gross Pay YTD To value must be a number.'));
  }
  if ($totalgrossfrom && $totalgrossto && $totalgrossto < $totalgrossfrom) {
    form_set_error('totalgrossto', t('Invalid range for Gross Pay YTD.'));
  }
  // Annual Salary:
  if ($salaryfrom && !is_numeric($salaryfrom)) {
    form_set_error('salaryfrom', t('Amount From value must be a number.'));
  }
  if ($salaryto && !is_numeric($salaryto)) {
    form_set_error('salaryto', t('Amount To value must be a number.'));
  }
  if ($salaryfrom && $salaryto && $salaryto < $salaryfrom) {
    form_set_error('salaryto', t('Invalid range for Amount.'));
  }
}

// Revenue section:
/**
 * First step of Revenue section.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Renderable array of first step of Payroll
 */
function checkbook_datafeeds_revenue($form, &$form_state) {
  $datatype = $form_state['step_information']['type']['stored_values']['format'];
  $revenue_fys = array ('' => "All Fiscal Years");
  $revenue_fys = $revenue_fys + _checkbook_advanced_search_get_year('revenue','datafeeds');

  $form['description'] = array(
    '#markup' => '<h2 class="domain-title">Revenue</h2>',
  );
  $form['loaded'] = array(
    '#markup' => '<div class="updated-date">Last updated: ' . _checkbook_datafeeds_get_updated_date('revenue') . '</div>',
  );
  $form['requiredmessage'] = array(
    '#markup' => '<p class="required-message">Fields marked with an asterisk (<span class="form-required">*</span>) are required.</p>',
  );
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('4. Filter the Data:'),
    '#collapsible' => TRUE,
  );
    $form['filter']['budget_fiscal_year'] = array(
        '#type' => 'select',
        '#title' => t('Budget Fiscal Year:'),
        '#options' => _checkbook_advanced_search_get_year('revenue','datafeeds'),
        '#prefix' => '<div class="column column-left"><div class="datafield budgetyear">',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('watch')),
        '#default_value' => !empty($form_state['values']['budget_fiscal_year']) ? $form_state['values']['budget_fiscal_year'] : currentFiscalYear(),
    );
    $form['filter']['agency'] = array(
        '#type' => 'select',
        '#title' => t('Agency:'),
        '#options' => _agency_options(),
        '#prefix' => '<div class="datafield agency">',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('watch')),
        '#default_value' => !empty($form_state['values']['agency']) ? $form_state['values']['agency'] : 'Citywide (All Agencies)',
    );
    $form['filter']['revenue_category'] = array(
            '#type' => 'select',
            '#title' => t('Revenue Category:'),
            '#options' => _revenue_category_options(),
            '#prefix' => '<div class="datafield revenuecategory">',
            '#suffix' => '</div>',
            '#attributes' => array('class' => array('watch')),
            '#default_value' => !empty($form_state['values']['revenue_category']) ? $form_state['values']['revenue_category'] : 'All Revenue Categories',
    );
    $form['filter']['revenue_source'] = array(
       '#type' => 'textfield',
       '#title' => t('Revenue Source:'),
       '#prefix' => '<div class="datafield revenuesource">',
       '#suffix' => '</div>',
       '#attributes' => array('class' => array('watch')),
       '#default_value' => !empty($form_state['values']['revenue_source']) ? $form_state['values']['revenue_source'] : '',
     );
    $form['filter']['adoptedfrom'] = array(
        '#type' => 'textfield',
        '#size' => 15,
        '#maxlength' => 15,
        '#prefix' => '<div class="datafield adopted datarange"><label>Adopted:</label><div class="ranges">',
        '#default_value' => !empty($form_state['values']['adoptedfrom']) ? $form_state['values']['adoptedfrom'] : '',
      );
      $form['filter']['adoptedto'] = array(
        '#type' => 'textfield',
        '#title' => t('to'),
        '#size' => 15,
        '#maxlength' => 15,
        '#suffix' => '</div></div>',
        '#default_value' => !empty($form_state['values']['adoptedto']) ? $form_state['values']['adoptedto'] : '',
      );
     $form['filter']['recognizedfrom'] = array(
       '#type' => 'textfield',
       '#size' => 15,
       '#maxlength' => 15,
       '#prefix' => '<div class="datafield recognized datarange"><label>Recognized:</label><div class="ranges">',
       '#default_value' => !empty($form_state['values']['recognizedfrom']) ? $form_state['values']['recognizedfrom'] : '',
     );
     $form['filter']['recognizedto'] = array(
       '#type' => 'textfield',
       '#title' => t('to'),
       '#size' => 15,
       '#maxlength' => 15,
       '#suffix' => '</div></div></div>',
       '#default_value' => !empty($form_state['values']['recognizedto']) ? $form_state['values']['recognizedto'] : '',
     );
    $form['filter']['fiscal_year'] = array(
        '#type' => 'select',
        '#title' => t('Fiscal Year:'),
        '#options' => $revenue_fys,
        '#prefix' => '<div class="column column-right"><div class="datafield year">',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('watch')),
        '#default_value' => !empty($form_state['values']['fiscal_year']) ? $form_state['values']['fiscal_year'] : '',
      );
    $form['filter']['funding_class'] = array(
           '#type' => 'select',
           '#title' => t('Funding Class:'),
           '#options' => _funding_source_options(),
           '#prefix' => '<div class="datafield fundingclass">',
           '#suffix' => '</div>',
           '#attributes' => array('class' => array('watch')),
           '#default_value' => !empty($form_state['values']['funding_class']) ? $form_state['values']['funding_class'] : 'All Funding Classes',
       );
     $form['filter']['revenue_class'] = array(
       '#type' => 'textfield',
       '#title' => t('Revenue Class:'),
       '#prefix' => '<div class="datafield revenueclass">',
       '#suffix' => '</div>',
       '#attributes' => array('class' => array('watch')),
       '#default_value' => !empty($form_state['values']['revenue_class']) ? $form_state['values']['revenue_class'] : '',
     );
    $form['filter']['fund_class'] = array(
            '#type' => 'select',
            '#title' => t('Fund Class:'),
            '#options' => _fund_class_options(),
            '#prefix' => '<div class="datafield fundclass">',
            '#suffix' => '</div>',
            '#attributes' => array('class' => array('watch')),
            '#default_value' => !empty($form_state['values']['fund_class']) ? $form_state['values']['fund_class'] : 'All Fund Classes',
    );
    $form['filter']['modifiedfrom'] = array(
        '#type' => 'textfield',
        '#size' => 15,
        '#maxlength' => 15,
        '#prefix' => '<div class="datafield modified datarange"><label>Modified:</label><div class="ranges">',
        '#default_value' => !empty($form_state['values']['modifiedfrom']) ? $form_state['values']['modifiedfrom'] : '',
      );
      $form['filter']['modifiedto'] = array(
        '#type' => 'textfield',
        '#title' => t('to'),
        '#size' => 15,
        '#maxlength' => 15,
        '#suffix' => '</div></div></div>',
        '#default_value' => !empty($form_state['values']['modifiedto']) ? $form_state['values']['modifiedto'] : '',
      );

  $form['columns'] = array(
    '#type' => 'fieldset',
    '#title' => t('3. Select Columns:'),
    '#collapsible' => TRUE,
  );
  $form['columns']['column_select'] = array(
    '#type' => 'select',
    '#title' => t('Columns'),
    '#options' => _checkbook_datafeeds_revenue_column_options($datatype),
    '#default_value' => !empty($form_state['values']['column_select']) ? $form_state['values']['column_select'] : '',
    '#required' => TRUE,
    '#multiple' => TRUE,
  );
  $form['#attached'] = array(
    'library' => array(
      array('system', 'ui.autocomplete', FALSE),
      array('checkbook_datafeeds', 'jquery_multiselect', FALSE),
    ),
    'js' => array(
      'type' => 'file',
      'data' => drupal_get_path('module', 'checkbook_datafeeds') . '/js/revenue.js',
    )
  );
  $form['#validate'] = array('checkbook_datafeeds_revenue_validate');
  $form['prev'] = array(
    '#type' => 'submit',
    '#value' => t('Previous'),
    '#name' => 'prev',
    '#submit' => array('previous_submit'),
    '#limit_validation_errors' => array(),
  );
  $form['revenue_next'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('checkbook_datafeeds_revenue_next_submit'),
  );
  $form['#attributes'] = array(
    'class' => array(
      'revenue',
      'data-feeds-wizard',
    )
  );
  return $form;
}

/**
 * Column options for Revenue section.
 *
 * @param string $datatype
 *   Type of data for Data Feeds to return (xml or csv)
 *
 * @return array
 *   FAPI structured array for select box #options
 */
function _checkbook_datafeeds_revenue_column_options($datatype) {
  if ($datatype == 'csv') {
    return drupal_map_assoc(array(
        "Agency",
        "Revenue Category",
        "Revenue Source",
        "Fund Class",
        "Funding Class",
        "Revenue Class",
        "Budget Fiscal Year",
        "Fiscal Year",
        "Adopted",
        "Modified",
        "Recognized",
        "Closing Classification Name",
    ));
  }
  else {
    if ($datatype == 'xml') {
      return array(
        "agency",
        "revenue_category",
        "revenue_source",
        "fund_class",
        "funding_class",
        "revenue_class",
        "budget_fiscal_year",
        "fiscal_year",
        "adopted",
        "modified",
        "recognized",
        "closing_classification_name",
      );
    }
  }
}

/**
 * Stores form values and moves to next step of Data Feeds wizard in Revenue.
 *
 * @param array $form
 *   Data Feed wizard form array
 * @param array $form_state
 *   Data Feed wizard form_state array
 */
function checkbook_datafeeds_revenue_next_submit($form, &$form_state) {
  $current_step = & $form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  $current_step = 'revenue_confirmation';
  if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  else {
    $form_state['values'] = array();
  }
  // Force rebuild with next step.
  $form_state['rebuild'] = TRUE;
}

/**
 * Outputs selected search criteria and number of records found for Revenue.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Renderable array of Payroll confirmation step
 */
function checkbook_datafeeds_revenue_confirmation($form, &$form_state) {
  $values = $form_state['step_information']['revenue']['stored_values'];
  $responsetype = $form_state['step_information']['type']['stored_values']['format'];
  $user_criteria = array();
  $user_criteria['Type of Data'] = 'Revenue';
  $user_criteria['Type of File'] = $responsetype;
  $form['download_feeds'] = array(
    '#markup' => '<h2 id="edit-description">Download Data</h2>',
  );
  $form['columns'] = array(
    '#type' => 'fieldset',
    '#title' => t('Selected Columns'),
  );
  $form['#attributes'] = array(
    'class' => array(
      'confirmation-page',
      'data-feeds-wizard',
    )
  );
  foreach ($values['column_select'] as $column) {
    $form['columns'][$column] = array('#markup' => '<div>' . $column . '</div>');
    $user_criteria['Columns'][] = $column;
  }
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filter'),
  );
  if ($values['fund_class']) {
    $form['filter']['fund_class'] = array(
      '#markup' => '<div><strong>Fund Class:</strong> ' . $values['fund_class'] . '</div>',
    );
    $user_criteria['Fund Class'] = $values['fund_class'];
  }
  if ($values['agency']) {
    $form['filter']['agency'] = array(
      '#markup' => '<div><strong>Agency:</strong> ' . $values['agency'] . '</div>',
    );
    $user_criteria['Agency'] = $values['agency'];
  }
  if ($values['budget_fiscal_year']) {
    $form['filter']['budget_fiscal_year'] = array(
      '#markup' => '<div><strong>Budget Fiscal Year:</strong> ' . $values['budget_fiscal_year'] . '</div>',
    );
    $user_criteria['Budget Fiscal Year'] = $values['budget_fiscal_year'];
  }
  if ($values['fiscal_year'] && $values['fiscal_year'] != '') {
        $form['filter']['fiscal_year'] = array(
          '#markup' => '<div><strong>Fiscal Year:</strong> ' . $values['fiscal_year'] . '</div>',
        );
        $user_criteria['Fiscal Year'] = $values['fiscal_year'];
  }
  if ($values['revenue_category']) {
    $form['filter']['revenue_category'] = array(
      '#markup' => '<div><strong>Revenue Category:</strong> ' . $values['revenue_category'] . '</div>',
    );
    $user_criteria['Revenue Category'] = $values['revenue_category'];
  }
  if ($values['revenue_class']) {
    $form['filter']['revenue_class'] = array(
      '#markup' => '<div><strong>Revenue Class:</strong> ' . $values['revenue_class'] . '</div>',
    );
    $user_criteria['Revenue Class'] = $values['revenue_class'];
  }
  if ($values['revenue_source']) {
    $form['filter']['revenue_source'] = array(
      '#markup' => '<div><strong>Revenue Source:</strong> ' . $values['revenue_source'] . '</div>',
    );
    $user_criteria['Revenue Source'] = $values['revenue_source'];
  }
  if ($values['funding_class']) {
    $form['filter']['funding_class'] = array(
      '#markup' => '<div><strong>Funding Class:</strong> ' . $values['funding_class'] . '</div>',
    );
    $user_criteria['Funding Class'] = $values['funding_class'];
  }
    
  if ($values['modifiedfrom'] && $values['modifiedto']) {
    $form['filter']['modified'] = array(
      '#markup' => '<div><strong>Modified:</strong><br />Greater Than: $' . $values['modifiedfrom'] . ' Less Than: $' . $values['modifiedto'] . '</div>',
    );
    $user_criteria['Modified Greater Than'] = $values['modifiedfrom'];
    $user_criteria['Modified Less Than'] = $values['modifiedto'];
  }
  elseif ($values['modifiedfrom'] && !$values['modifiedto']) {
    $form['filter']['modified'] = array(
      '#markup' => '<div><strong>Modified:</strong><br />Greater Than: $' . $values['modifiedfrom'] . '</div>',
    );
    $user_criteria['Modified Greater Than'] = $values['modifiedfrom'];
  }
  elseif (!$values['modifiedfrom'] && $values['modifiedto']) {
    $form['filter']['modified'] = array(
      '#markup' => '<div><strong>Modified:</strong><br />Less Than: $' . $values['modifiedto'] . '</div>',
    );
    $user_criteria['Modified Less Than'] = $values['modifiedto'];
  }
  
  if ($values['adoptedfrom'] && $values['adoptedto']) {
    $form['filter']['adopted'] = array(
      '#markup' => '<div><strong>Adopted:</strong><br />Greater Than: $' . $values['adoptedfrom'] . ' Less Than: $' . $values['adoptedto'] . '</div>',
    );
    $user_criteria['Adopted Greater Than'] = $values['adoptedfrom'];
    $user_criteria['Adopted Less Than'] = $values['adoptedto'];
  }
  elseif ($values['adoptedfrom'] && !$values['adoptedto']) {
    $form['filter']['adopted'] = array(
      '#markup' => '<div><strong>Adopted:</strong><br />Greater Than: $' . $values['adoptedfrom'] . '</div>',
    );
    $user_criteria['Adopted Greater Than'] = $values['adoptedfrom'];
  }
  elseif (!$values['adoptedfrom'] && $values['adoptedto']) {
    $form['filter']['adopted'] = array(
      '#markup' => '<div><strong>Adopted:</strong><br />Less Than: $' . $values['adoptedto'] . '</div>',
    );
    $user_criteria['Adopted Less Than'] = $values['adoptedto'];
  }
 
    if ($values['recognizedfrom'] && $values['recognizedto']) {
        $form['filter']['recognized'] = array(
          '#markup' => '<div><strong>Recognized:</strong><br />Greater Than: $' . $values['recognizedfrom'] . ' Less Than: $' . $values['recognizedto'] . '</div>',
        );
        $user_criteria['Recognized Greater Than'] = $values['recognizedfrom'];
        $user_criteria['Recognized Less Than'] = $values['recognizedto'];
      }
      elseif ($values['recognizedfrom'] && !$values['recognizedto']) {
        $form['filter']['recognized'] = array(
          '#markup' => '<div><strong>Recognized:</strong><br />Greater Than: $' . $values['recognizedfrom'] . '</div>',
        );
        $user_criteria['Recognized Greater Than'] = $values['recognizedfrom'];
      }
      elseif (!$values['recognizedfrom'] && $values['recognizedto']) {
        $form['filter']['recognized'] = array(
          '#markup' => '<div><strong>Recognized:</strong><br />Less Than: $' . $values['recognizedto'] . '</div>',
        );
        $user_criteria['Recognized Less Than'] = $values['recognizedto'];
      }
    
  $form['filter']['type'] = array(
    '#markup' => '<div><strong>File Type:</strong> ' . $form_state['step_information']['type']['stored_values']['format'] . '</div>',
  );
  $criteria = checkbook_datafeeds_process_revenue_values($form, $form_state);
  $form_state['step_information']['confirmation']['stored_values']['criteria'] = $criteria;
  $form_state['step_information']['confirmation']['stored_values']['user_criteria'] = $user_criteria;
  $modified_form = checkbook_datafeeds_end_of_confirmation_form($form, $form_state, $criteria, $responsetype, 'revenue');
  return $modified_form;
}

/**
 * Retreives form values from previous step and moves back one step in Revenue.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_revenue_confirmation_previous_submit($form, &$form_state) {
  $current_step = & $form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  $current_step = 'revenue';
  $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Convert values from Revenue section of form to an array format expected by API SearchCriteria.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Structured array expected by API
 */
function checkbook_datafeeds_process_revenue_values($form, &$form_state) {
  $values = $form_state['step_information']['revenue']['stored_values'];
  $pattern = "/.*?(\\[.*?\\])/is";
  $criteria = array(
    'global' => array(
      'type_of_data' => 'Revenue',
      'records_from' => 1,
      'max_records' => 50000,
    ),
    'responseColumns' => $values['column_select'],
  );
  if ($values['fund_class'] != 'All Fund Classes') {
    preg_match($pattern, $values['fund_class'], $fcmatches);
    $criteria['value']['fund_class'] = trim($fcmatches[1], '[ ]');
  }
  if ($values['agency'] != 'Citywide (All Agencies)') {
    preg_match($pattern, $values['agency'], $amatches);
    $criteria['value']['agency_code'] = trim($amatches[1], '[ ]');
  }
  if ($values['budget_fiscal_year'] != 'All Years') {
    $criteria['value']['budget_fiscal_year'] = $values['budget_fiscal_year'];
  }
  if ($values['fiscal_year'] != 'All Fiscal Years' && $values['fiscal_year'] != '') {
    $criteria['value']['fiscal_year'] = $values['fiscal_year'];
  }
  if ($values['revenue_category'] != 'All Revenue Categories') {
    preg_match($pattern, $values['revenue_category'], $rcmatches);
    $criteria['value']['revenue_category'] = trim($rcmatches[1], '[ ]');
  }
  if ($values['revenue_class']) {
    preg_match($pattern, $values['revenue_class'], $rclmatches);
    $criteria['value']['revenue_class'] = trim($rclmatches[1], '[ ]');
  }
  if ($values['revenue_source']) {
    preg_match($pattern, $values['revenue_source'], $rsmatches);
    $criteria['value']['revenue_source'] = trim($rsmatches[1], '[ ]');
  }
  if ($values['funding_class'] != 'All Funding Classes') {
    preg_match($pattern, $values['funding_class'], $fsmatches);
    $criteria['value']['funding_class'] = trim($fsmatches[1], '[ ]');
  }
  if ($values['modifiedfrom'] !== '' || $values['modifiedto'] !== '') {
    $criteria['range']['modified'] = array(
      checknull($values['modifiedfrom']),
      checknull($values['modifiedto'])
    );
  }
  if ($values['adoptedfrom'] !== '' || $values['adoptedto'] !== '') {
    $criteria['range']['adopted'] = array(
      checknull($values['adoptedfrom']),
      checknull($values['adoptedto'])
    );
  }
  if ($values['recognizedfrom'] !== '' || $values['recognizedto'] !== '') {
    $criteria['range']['recognized'] = array(
      checknull($values['recognizedfrom']),
      checknull($values['recognizedto'])
    );
  }
  return $criteria;
}

/**
 * Validate handler for Revenue section of form.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_revenue_validate($form, &$form_state) {
  $numbermessage = 'Value must be a number.';
  $gtmessage = 'Value of To value must be greater than From value.';

  $adoptedfrom = $form_state['values']['adoptedfrom'];
  $adoptedto = $form_state['values']['adoptedto'];
  if ($adoptedfrom && !is_numeric($adoptedfrom)) {
    form_set_error('adoptedfrom', t('Adopted From value must be a number.'));
  }
  if ($adoptedto && !is_numeric($adoptedto)) {
    form_set_error('adoptedto', t('Adopted To value must be a number.'));
  }
  if ($adoptedfrom && $adoptedto && $adoptedto < $adoptedfrom) {
    form_set_error('adoptedto', t('Invalid range for Adopted.'));
  }

  $modifiedfrom = $form_state['values']['modifiedfrom'];
  $modifiedto = $form_state['values']['modifiedto'];
  if ($modifiedfrom && !is_numeric($modifiedfrom)) {
    form_set_error('modifiedfrom', t('Modified From value must be a number.'));
  }
  if ($modifiedto && !is_numeric($modifiedto)) {
    form_set_error('modifiedto', t('Modified To value must be a number.'));
  }
  if ($modifiedfrom && $modifiedto && $modifiedto < $modifiedfrom) {
    form_set_error('modifiedto', t('Invalid range for Modified.'));
  }

  $recognizedfrom = $form_state['values']['recognizedfrom'];
  $recognizedto = $form_state['values']['recognizedto'];
  if ($recognizedfrom && !is_numeric($recognizedfrom)) {
    form_set_error('recognizedfrom', t('Recognized From value must be a number.'));
  }
  if ($recognizedto && !is_numeric($recognizedto)) {
    form_set_error('recognizedto', t('Recognized To value must be a number.'));
  }
  if ($recognizedfrom && $recognizedto && $recognizedto < $recognizedfrom) {
    form_set_error('recognizedto', t('Invalid range for Recognized.'));
  }
}

// Spending section:
/**
 * First step of Spending section.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Renderable array of first step of Spending
 */
function checkbook_datafeeds_spending($form, &$form_state) {
  $datatype = $form_state['step_information']['type']['stored_values']['format'];
  $agency = isset($form_state['values']['agency']) ? $form_state['values']['agency'] : 'Citywide (All Agencies)';
  $dept = !empty($form_state['values']['dept']) ? $form_state['values']['dept'] : '';
  $sc = !empty($form_state['values']['expense_type']) ? $form_state['values']['expense_type'] : '';
  $year = !empty($form_state['values']['year']) ? $form_state['values']['year'] : 'FY' . currentFiscalYear();
  $form['description'] = array(
    '#markup' => '<h2 class="domain-title">Spending</h2>',
  );
  $form['loaded'] = array(
    '#markup' => '<div class="updated-date">Last updated: ' . _checkbook_datafeeds_get_updated_date('spending') . '</div>',
  );
  $form['requiredmessage'] = array(
    '#markup' => '<p class="required-message">Fields marked with an asterisk (<span class="form-required">*</span>) are required.</p>',
  );
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('3. Filter the Data:'),
    '#attributes' => array('class' => array('spending-fieldset')),
  );
  $form['filter']['agency'] = array(
    '#type' => 'select',
    '#title' => t('Agency:'),
    '#options' => _agency_options(),
    '#prefix' => '<div class="column column-left"><div class="datafield agency">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('watch')),
    '#default_value' => $agency,
    '#ajax' => array(
      'callback' => 'checkbook_datafeeds_agency_ajax',
      'wrapper' => 'dynamic-fields',
      'progress' => array(
        'message' => NULL,
        'type' => 'throbber',
      ),
    ),
  );
  $form['filter']['dept'] = array(
    '#type' => 'select',
    '#title' => t('Department:'),
    '#options' => _dept_options($agency, $sc, $year),
    '#prefix' => '<div id="dynamic-fields"><div class="datafield department">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('watch')),
    '#multiple' => FALSE,
    '#default_value' => $dept,
    '#ajax' => array(
      'callback' => 'checkbook_datafeeds_dept_ajax',
      'wrapper' => 'expense-category',
      'progress' => array(
        'message' => NULL,
        'type' => 'throbber',
      ),
    ),
  );
  $form['filter']['expense_category'] = array(
    '#type' => 'select',
    '#title' => t('Expense Category:'),
    '#options' => _expcat_options($agency, $dept, $sc, $year),
    '#prefix' => '<div id="expense-category"><div class="datafield expensecategory">',
    '#suffix' => '</div></div></div>',
    '#attributes' => array('class' => array('watch')),
    '#multiple' => FALSE,
    '#default_value' => !empty($form_state['values']['expense_category']) ? $form_state['values']['expense_category'] : '',
  );
  $form['filter']['expense_type'] = array(
    '#type' => 'select',
    '#title' => t('Spending Category:'),
    '#options' => _expense_type_options(),
    '#prefix' => '<div class="datafield expensetype">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('watch')),
    '#default_value' => $sc,
    '#ajax' => array(
      'callback' => 'checkbook_datafeeds_exptype_ajax',
      'wrapper' => 'dynamic-fields',
      'progress' => array(
        'message' => NULL,
        'type' => 'throbber',
      ),
    ),
  );
  $form['filter']['payee_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Payee Name:'),
    '#prefix' => '<div class="datafield payeename last-item">',
    '#suffix' => '</div></div>',
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['payee_name']) ? $form_state['values']['payee_name'] : '',
  );
  $form['filter']['checkamtfrom'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 15,
    '#prefix' => '<div class="column column-right"><div class="datafield datarange checkamount"><label>Check Amount:</label><div class="ranges">',
    '#default_value' => !empty($form_state['values']['checkamtfrom']) ? $form_state['values']['checkamtfrom'] : '',
  );
  $form['filter']['checkamtto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 15,
    '#maxlength' => 15,
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['checkamtto']) ? $form_state['values']['checkamtto'] : '',
  );
  $form['filter']['contractno'] = array(
    '#type' => 'textfield',
    '#title' => t('Contract ID:'),
    '#prefix' => '<div class="datafield contractno">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['contractno']) ? $form_state['values']['contractno'] : '',
  );
  $form['filter']['document_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Document ID:'),
    '#prefix' => '<div class="datafield expenseid">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['document_id']) ? $form_state['values']['document_id'] : '',
  );
  $form['filter']['capital_project'] = array(
    '#type' => 'textfield',
    '#title' => t('Capital Project:'),
    '#prefix' => '<div class="datafield capitalproject">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['capital_project']) ? $form_state['values']['capital_project'] : '',
  );
  $form['filter']['date_filter'] = array(
    '#type' => 'radios',
    '#title' => t('Date Filter:'),
    '#options' => array(
      'Year',
      'Issue Date',
    ),
    '#prefix' => '<div id="datefilter"><div class="datafield datefilter clearfix">',
    '#suffix' => '</div></div>',
    '#attributes' => array('class' => array('watch')),
    '#default_value' => !empty($form_state['values']['date_filter']) ? $form_state['values']['date_filter'] : 0,
    '#ajax' => array(
      'callback' => 'checkbook_datafeeds_datefilter_ajax',
      'wrapper' => 'datefilter',
      'progress' => array(
        'message' => NULL,
        'type' => 'throbber',
      ),
    ),
  );
  $form['filter']['year_filter_start'] = array(
    '#markup' => '<div class="datafield year-filters last-item">',
  );
  $form['filter']['year'] = array(
    '#type' => 'select',
    '#options' => _year_options('all-years'),
    '#attributes' => array('class' => array('watch')),
    '#default_value' => $year,
    '#prefix' => '<div id="year"><div class="datafield year">',
    '#suffix' => '</div></div>',
    '#ajax' => array(
      'callback' => 'checkbook_datafeeds_year_ajax',
      'wrapper' => 'dynamic-fields',
      'progress' => array(
        'message' => NULL,
        'type' => 'throbber',
      ),
    ),
  );
  $form['filter']['issuedfrom'] = array(
    '#type' => 'textfield',
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('E.g., ' . date('Y-m-d')),
    '#attributes' => array('class' => array('datepicker')),
    '#prefix' => '<div class="datafield datarange issueddate"><div class="ranges">',
    '#default_value' => !empty($form_state['values']['issuedfrom']) ? $form_state['values']['issuedfrom'] : '',
  );
  $form['filter']['issuedto'] = array(
    '#type' => 'textfield',
    '#title' => t('to'),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('E.g., ' . date('Y-m-d')),
    '#attributes' => array('class' => array('datepicker')),
    '#suffix' => '</div></div>',
    '#default_value' => !empty($form_state['values']['issuedto']) ? $form_state['values']['issuedto'] : '',
  );
  $form['filter']['year_filter_end'] = array(
    '#markup' => '</div></div>',
  );
  $form['columns'] = array(
    '#type' => 'fieldset',
    '#title' => t('4. Select Columns:'),
  );
  $form['columns']['column_select'] = array(
    '#type' => 'select',
    '#title' => t('Columns'),
    '#options' => _checkbook_datafeeds_spending_column_options($datatype),
    '#multiple' => TRUE,
    '#default_value' => !empty($form_state['values']['column_select']) ? $form_state['values']['column_select'] : '',
    '#required' => TRUE,
  );
  $form['spending_next'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('checkbook_datafeeds_spending_next_submit'),
  );
  $form['prev'] = array(
    '#type' => 'submit',
    '#value' => t('Previous'),
    '#name' => 'prev',
    '#submit' => array('previous_submit'),
    '#limit_validation_errors' => array(),
  );
  $form['#attached'] = array(
    'library' => array(
      array('system', 'ui.autocomplete', FALSE),
      array('system', 'ui.datepicker', FALSE),
      array('checkbook_datafeeds', 'jquery_multiselect', FALSE),
    ),
    'js' => array(
      'type' => 'file',
      'data' => drupal_get_path('module', 'checkbook_datafeeds') . '/js/spending.js',
    )
  );
  $form['#validate'] = array('checkbook_datafeeds_spending_validate');
  $form['#attributes'] = array(
    'class' => array(
      'spending',
      'data-feeds-wizard',
    )
  );
  return $form;
}

/**
 * Ajax callback to update department and expenditure category fields depending on agency selected.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Array of ajax commands
 */
function checkbook_datafeeds_agency_ajax($form, &$form_state) {
  $html = array($form['filter']['dept'], $form['filter']['expense_category']);
  $html = drupal_render($html);
  $commands[] = ajax_command_replace('#dynamic-fields', $html);
  $commands[] = ajax_command_invoke('window', 'disableStuff');
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax callback to update expenditure category field based on department category selected.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Array of ajax commands
 */
function checkbook_datafeeds_dept_ajax($form, &$form_state) {
$html = array($form['filter']['expense_category']);
$html = drupal_render($html);
$commands[] = ajax_command_replace('#expense-category', $html);
$commands[] = ajax_command_invoke('window', 'disableStuff');
return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax callback to disable year and issued date fields depending on date filter field.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Array of ajax commands
 */
function checkbook_datafeeds_datefilter_ajax($form, &$form_state) {
  $value = $form_state['values']['date_filter'];
  if ($value == 0) {
    $commands[] = ajax_command_invoke('select[name="year"]', 'attr', array(
      'disabled',
      '',
    ));
    $commands[] = ajax_command_invoke('input[name="issuedfrom"]', 'attr', array(
      'disabled',
      'disabled',
    ));
    $commands[] = ajax_command_invoke('input[name="issuedto"]', 'attr', array(
      'disabled',
      'disabled',
    ));
  }
  elseif ($value == 1) {
    $commands[] = ajax_command_invoke('select[name="year"]', 'attr', array(
      'disabled',
      'disabled',
    ));
    $commands[] = ajax_command_invoke('input[name="issuedfrom"]', 'attr', array(
      'disabled',
      '',
    ));
    $commands[] = ajax_command_invoke('input[name="issuedto"]', 'attr', array(
      'disabled',
      '',
    ));
  }
  $commands[] = ajax_command_invoke(NULL, 'refreshMultiSelect');
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax callback to disable contractno or payee_name fields and column options based on expense category field.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *  Array of ajax commands
 */
function checkbook_datafeeds_exptype_ajax($form, &$form_state) {
  $html = array($form['filter']['dept'], $form['filter']['expense_category']);
  $html = drupal_render($html);
  $commands[] = ajax_command_replace('#dynamic-fields', $html);
  $value = $form_state['values']['expense_type'];
  if ($value == 'Payroll Spending [p]') {
    $commands[] = ajax_command_invoke('input[name="contractno"]', 'attr', array(
      'disabled',
      'disabled',
    ));
    $commands[] = ajax_command_invoke('input[name="payee_name"]', 'attr', array(
      'disabled',
      'disabled',
    ));
    $commands[] = ajax_command_invoke('option[value="Payee Name"]', 'attr', array(
      'disabled',
      'disabled',
    ));
    $commands[] = ajax_command_invoke('option[value="Contract ID"]', 'attr', array(
      'disabled',
      'disabled',
    ));
    $commands[] = ajax_command_invoke('option[value="payee_name"]', 'attr', array(
      'disabled',
      'disabled',
    ));
    $commands[] = ajax_command_invoke('option[value="contract_ID"]', 'attr', array(
      'disabled',
      'disabled',
    ));
  }
  else {
    if ($value == 'Other Spending [o]') {
      $commands[] = ajax_command_invoke('input[name="contractno"]', 'attr', array(
        'disabled',
        'disabled',
      ));
      $commands[] = ajax_command_invoke('input[name="payee_name"]', 'removeAttr', array('disabled'));
      $commands[] = ajax_command_invoke('option[value="Contract ID"]', 'attr', array(
        'disabled',
        'disabled',
      ));
      $commands[] = ajax_command_invoke('option[value="Payee Name"]', 'removeAttr', array('disabled'));
      $commands[] = ajax_command_invoke('option[value="contract_ID"]', 'attr', array(
        'disabled',
        'disabled',
      ));
      $commands[] = ajax_command_invoke('option[value="payee_name"]', 'removeAttr', array('disabled'));
    }
    else {
      $commands[] = ajax_command_invoke('input[name="contractno"]', 'removeAttr', array('disabled'));
      $commands[] = ajax_command_invoke('input[name="payee_name"]', 'removeAttr', array('disabled'));
      $commands[] = ajax_command_invoke('option[value="Payee Name"]', 'removeAttr', array('disabled'));
      $commands[] = ajax_command_invoke('option[value="Contract ID"]', 'removeAttr', array('disabled'));
      $commands[] = ajax_command_invoke('option[value="payee_name"]', 'removeAttr', array('disabled'));
      $commands[] = ajax_command_invoke('option[value="contract_ID"]', 'removeAttr', array('disabled'));
    }
  }
  $commands[] = ajax_command_invoke(NULL, 'refreshMultiSelect');
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax callback to update department and expense_category fields based on year.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Array of ajax commands
 */
function checkbook_datafeeds_year_ajax($form, &$form_state) {
  $html = array($form['filter']['dept'], $form['filter']['expense_category']);
  $html = drupal_render($html);
  $commands[] = ajax_command_replace('#dynamic-fields', $html);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Column options for Spending domain.
 *
 * @param string $datatype
 *   Type of data for Data Feeds to return (csv or xml)
 *
 * @return array
 *   FAPI structured array for select box #options
 */
function _checkbook_datafeeds_spending_column_options($datatype) {
  if ($datatype == 'csv') {
    return drupal_map_assoc(array(
      "Document ID",
      "Payee Name",
      "Issue Date",
      "Agency",
      "Department",
      "Check Amount",
      "Expense Category",
      "Contract ID",
      "Contract Purpose",
      "Capital Project",
      "Spending Category",
      "Fiscal year",
      "Calendar year",
    ));
  }
  else {
    if ($datatype == 'xml') {
      return drupal_map_assoc(array(
        "agency",
        "document_id",
        "payee_name",
        "department",
        "check_amount",
        "expense_category",
        "contract_ID",
        "contract_purpose",
        "capital_project",
        "issue_date",
        "spending_category",
        "fiscal_year",
        "calendar_year",
      ));
    }
  }
}

/**
 * Stores form values and moves to next step of Data Feeds wizard in Spending.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_spending_next_submit($form, &$form_state) {
  if ($form_state['values']['date_filter'] == '0') {
    unset($form_state['values']['issuedfrom']);
    unset($form_state['values']['issuedto']);
  }
  else {
    if ($form_state['values']['date_filter'] == '1') {
      unset($form_state['values']['year']);
    }
  }
  $current_step = & $form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  $current_step = 'spending_confirmation';
  if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  else {
    $form_state['values'] = array();
  }
  // Force rebuild with next step.
  $form_state['rebuild'] = TRUE;
}

/**
 * Outputs selected search criteria and number of records found for Spending.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Renderable array of Payroll confirmation step
 */
function checkbook_datafeeds_spending_confirmation($form, &$form_state) {
  $values = $form_state['step_information']['spending']['stored_values'];
  $responsetype = $form_state['step_information']['type']['stored_values']['format'];
  $user_criteria = array();
  $user_criteria['Type of Data'] = 'Spending';
  $user_criteria['Type of File'] = $responsetype;
  $form['download_feeds'] = array(
    '#markup' => '<h2 id="edit-description">Download Data</h2>',
  );
  $form['columns'] = array(
    '#type' => 'fieldset',
    '#title' => t('Selected Columns'),
  );
  $form['#attributes'] = array(
    'class' => array(
      'confirmation-page',
      'data-feeds-wizard',
    )
  );
  foreach ($values['column_select'] as $column) {
    $form['columns'][$column] = array('#markup' => '<div>' . $column . '</div>');
    $user_criteria['Columns'][] = $column;
  }
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filter'),
  );
  if ($values['agency']) {
    $form['filter']['fund_class'] = array(
      '#markup' => '<div><strong>Agency:</strong> ' . $values['agency'] . '</div>',
    );
    $user_criteria['Agency'] = $values['agency'];
  }
  if ($values['budget_code']) {
    $form['filter']['budget_code'] = array('#markup' => '<div><strong>Budget Code:</strong> ' . $values['budget_code'] . '</div>');
    $user_criteria['Budget Code'] = $values['budget_code'];
  }
  if (startsWith($values['year'], 'F')) {
    $form['filter']['year'] = array(
      '#markup' => '<div><strong>Fiscal Year:</strong> ' . $values['year'] . '</div>',
    );
    $user_criteria['Fiscal Year'] = $values['year'];
  }
  elseif (startsWith($values['year'], 'C')) {
    $form['filter']['year'] = array(
      '#markup' => '<div><strong>Calendar Year:</strong> ' . $values['year'] . '</div>',
    );
    $user_criteria['Calendar Year'] = $values['year'];
  }
  if ($values['capital_project']) {
    $form['filter']['capital_project'] = array(
      '#markup' => '<div><strong>Capital Project:</strong> ' . $values['capital_project'] . '</div>',
    );
    $user_criteria['Capital Project'] = $values['capital_project'];
  }
  if ($values['checkamtfrom'] && $values['checkamtto']) {
    $form['filter']['chkamount'] = array(
      '#markup' => '<div><strong>Check Amount:</strong><br />Greater Than: $' . $values['checkamtfrom'] . ' Less Than: $' . $values['checkamtto'] . '</div>',
    );
    $user_criteria['Check Amount Greater Than'] = $values['checkamtfrom'];
    $user_criteria['Check Amount Less Than'] = $values['checkamtto'];
  }
  elseif (!$values['checkamtfrom'] && $values['checkamtto']) {
    $form['filter']['chkamount'] = array(
      '#markup' => '<div><strong>Check Amount:</strong><br />Less Than: $' . $values['checkamtto'] . '</div>',
    );
    $user_criteria['Check Amount Less Than'] = $values['checkamtto'];
  }
  elseif ($values['checkamtfrom'] && !$values['checkamtfrom']) {
    $form['filter']['chkamount'] = array(
      '#markup' => '<div><strong>Check Amount:</strong><br />Greater Than: $' . $values['checkamtfrom'] . '</div>',
    );
    $user_criteria['Check Amount Greater Than'] = $values['checkamtto'];
  }
  if ($values['contractno']) {
    $form['filter']['contractno'] = array(
      '#markup' => '<div><strong>Contract ID:</strong> ' . $values['contractno'] . '</div>',
    );
    $user_criteria['Contract ID'] = $values['contractno'];
  }
  if ($values['dept']) {
    $form['filter']['department'] = array('#markup' => '<div><strong>Department:</strong> ' . $values['dept'] . '</div>');
    $user_criteria['Department'] = $values['dept'];
  }
  if ($values['document_id']) {
    $form['filter']['document_id'] = array(
      '#markup' => '<div><strong>Document ID:</strong> ' . $values['document_id'] . '</div>',
    );
    $user_criteria['Document ID'] = $values['document_id'];
  }
  if ($values['expense_category']) {
    $form['filter']['expense_category'] = array('#markup' => '<div><strong>Expense Category:</strong> ' . $values['expense_category'] . '</div>');
    $user_criteria['Expense Category'] = $values['expense_category'];
  }
  if ($values['expense_type']) {
    $form['filter']['expense_type'] = array('#markup' => '<div><strong>Spending Category:</strong> ' . $values['expense_type'] . '</div>');
    $user_criteria['Expense Type'] = $values['expense_type'];
  }
  if ($values['issuedfrom'] && $values['issuedto']) {
    $form['filter']['issued_date'] = array(
      '#markup' => '<div><strong>Issued Date:</strong><br />After: ' . $values['issuedfrom'] . ' Before: ' . $values['issuedto'] . '</div>'
    );
    $user_criteria['Issued Date After'] = $values['issuedfrom'];
    $user_criteria['Issued Date Before'] = $values['issuedto'];
  }
  elseif (!$values['issuedfrom'] && $values['issuedto']) {
    $form['filter']['issued_date'] = array(
      '#markup' => '<div><strong>Issued Date:</strong><br /> Before: ' . $values['issuedto'] . '</div>',
    );
    $user_criteria['Issued Date Before'] = $values['issuedto'];
  }
  elseif ($values['issuedfrom'] && !$values['issuedto']) {
    $form['filter']['issued_date'] = array(
      '#markup' => '<div><strong>Issued Date:</strong><br />After: ' . $values['issuedfrom'] . '</div>',
    );
    $user_criteria['Issued Date After'] = $values['issuedfrom'];
  }
  if ($values['payee_name']) {
    $form['filter']['payee_name'] = array(
      '#markup' => '<div><strong>Payee Name:</strong> ' . $values['payee_name'] . '</div>',
    );
    $user_criteria['Payee Name'] = $values['payee_name'];
  }
  if (startsWith($values['year'], 'F')) {
    $form['filter']['year'] = array(
      '#markup' => '<div><strong>Fiscal Year:</strong> ' . ltrim($values['year'], 'FY') . '</div>',
    );
    $user_criteria['Fiscal Year'] = ltrim($values['year'], 'FY');
  }
  else {
    if (startsWith($values['year'], 'C')) {
      $form['filter']['year'] = array(
        '#markup' => '<div><strong>Calendar Year:</strong> ' . ltrim($values['year'], 'CY') . '</div>',
      );
      $user_criteria['Calendar Year'] = ltrim($values['year'], 'CY');
    }
  }
  $form['filter']['filetype'] = array(
    '#markup' => '<div><strong>File Type:</strong> ' . $form_state['step_information']['type']['stored_values']['format'] . '</div>',
  );
  $criteria = checkbook_datafeeds_process_spending_values($form, $form_state);
  $form_state['step_information']['confirmation']['stored_values']['criteria'] = $criteria;
  $form_state['step_information']['confirmation']['stored_values']['user_criteria'] = $user_criteria;
  $modified_form = checkbook_datafeeds_end_of_confirmation_form($form, $form_state, $criteria, $responsetype, 'spending');
  return $modified_form;
}

/**
 * Retrieves form values from previous step and moves back one step in Spending.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_spending_confirmation_previous_submit($form, &$form_state) {
  $current_step = & $form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  $current_step = 'spending';
  $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Convert values from Spending section of form to an array format expected by API SearchCriteria.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Structured array expected by API
 */
function checkbook_datafeeds_process_spending_values($form, &$form_state) {
  $values = $form_state['step_information']['spending']['stored_values'];
  //$pattern = '/\[(.*?)\]$/';
  $pattern = "/.*?(\\[.*?\\])/is";
  $criteria = array(
    'global' => array(
      'type_of_data' => 'Spending',
      'records_from' => 1,
      'max_records' => 50000,
    ),
    'responseColumns' => $values['column_select'],
  );
  if ($values['agency'] != 'Citywide (All Agencies)') {
    preg_match($pattern, $values['agency'], $amatches);
    $criteria['value']['agency_code'] = trim($amatches[1], '[ ]');
  }
  if ($values['capital_project']) {
    $criteria['value']['capital_project_code'] = $values['capital_project'];
  }
  if ($values['checkamtfrom'] !== '' || $values['checkamtto'] !== '') {
    $criteria['range']['check_amount'] = array(
      checknull($values['checkamtfrom']),
      checknull($values['checkamtto']),
    );
  }
  if ($values['contractno']) {
    $criteria['value']['contract_ID'] = $values['contractno'];
  }
  if ($values['dept'] && $values['dept'] != 'Select Department') {
    preg_match($pattern, $values['dept'], $dcmatches);
    $criteria['value']['department_code'] = trim($dcmatches[1], '[ ]');
  }
  if ($values['document_id']) {
    $criteria['value']['document_id'] = $values['document_id'];
  }
  if ($values['expense_category'] && $values['expense_category'] != 'Select Expense Category') {
    preg_match($pattern, $values['expense_category'], $ecmatches);
    $criteria['value']['expense_category'] = trim($ecmatches[1], '[ ]');
  }
  if ($values['expense_type'] && $values['expense type'] != 'ts') {
    preg_match($pattern, $values['expense_type'], $etmatches);
    $criteria['value']['spending_category'] = trim($etmatches[1], '[ ]');
  }
  if ($values['payee_name']) {
    preg_match($pattern, $values['payee_name'], $pmatches);
    if ($pmatches) {
      $criteria['value']['payee_code'] = trim($pmatches[1], '[ ]');
    }
    else {
      $criteria['value']['payee_code'] = $values['payee_name'];
    }
  }
  if ($values['date_filter'] == '0') {
    if ($values['year'] && $values['year'] != 'ALL') {
      if (startsWith($values['year'], 'F')) {
        $criteria['value']['fiscal_year'] = ltrim($values['year'], 'FY');
      }
      elseif (startsWith($values['year'], 'C')) {
        $criteria['value']['calendar_year'] = ltrim($values['year'], 'CY');
      }
    }
  }
  else {
    if ($values['date_filter'] == '1') {
      if ($values['issuedfrom'] !== '' || $values['issuedto'] !== '') {
        $criteria['range']['issue_date'] = array(
          checknull($values['issuedfrom']),
          checknull($values['issuedto'])
        );
      }
    }
  }
  return $criteria;
}

/**
 * Validate handler for Spending section of form.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_spending_validate($form, &$form_state) {
  $checkfrom = $form_state['values']['checkamtfrom'];
  $checkto = $form_state['values']['checkamtto'];
  $datefrom = $form_state['values']['issuedfrom'];
  $dateto = $form_state['values']['issuedto'];
  $vendor = $form_state['values']['payee_name'];
  if ($checkfrom && !is_numeric($checkfrom)) {
    form_set_error('checkamtfrom', t('Check Amount must be a number.'));
  }
  if ($checkto && !is_numeric($checkto)) {
    form_set_error('checkamtto', t('Check Amount must be a number.'));
  }
  if ($checkfrom && $checkto && $checkto < $checkfrom) {
    form_set_error('checkamtto', t('Invalid range for Check Amount.'));
  }
  if ($datefrom && !checkDateFormat($datefrom)) {
    form_set_error('issuedfrom', t('Issue Date must be a valid date (YYYY-MM-DD).'));
  }
  if ($dateto && !checkDateFormat($dateto)) {
    form_set_error('issuedto', t('Issue Date must be a valid date (YYYY-MM-DD).'));
  }
  if ($datefrom && $dateto && strtotime($dateto) < strtotime($datefrom)) {
    form_set_error('issuedto', t('Invalid range for Issue Date.'));
  }
  //Vendor
  if ($vendor) {
    //$pattern = '/\[(.*?)\]$/';
    $pattern = "/.*?(\\[.*?\\])/is";
    preg_match($pattern, $vendor, $vmatches);
    if (!$vmatches) {
      try {
        $dataController = data_controller_get_instance();
        $results = $dataController->queryDataset('checkbook:vendor', array('vendor_customer_code'), array('vendor_customer_code' => $vendor));
      }
      catch (Exception $e) {
        log_error($e->getMessage());
      }
      if (!$results[0]) {
        form_set_error('payee_name', t('Please enter a valid vendor code.'));
      }
    }
  }
}

// Reusable functions
/**
 * Get years from Data Controller and format into a FAPI select input #options array.
 *
 * @param string|null $yeartype
 *   All Years or Budget Fiscal Years
 *
 * @return array
 *   Array of years formatted for FAPI select box #options
 */
function _year_options($yeartype = NULL) {
  switch ($yeartype) {
    case 'all-years':
      try {
        $fiscal_year = currentFiscalYear();
        $calendar_year = currentCalendarYear();
        $dataController = data_controller_get_instance();
        $fydata = $dataController->queryDataset("checkbook:year", array(
          'year_value',
          'year_id',
        ), array(
          'year_value' => data_controller_get_operator_factory_instance()->initiateHandler(RangeOperatorHandler::$OPERATOR__NAME, array(
            2011,
            $fiscal_year,
          ))
        ), 'year_value', 0);
        $cydata = $dataController->queryDataset("checkbook:year", array(
          'year_value',
          'year_id',
        ), array(
          'year_value' => data_controller_get_operator_factory_instance()->initiateHandler(RangeOperatorHandler::$OPERATOR__NAME, array(
            2010,
            $calendar_year,
          ))
        ), 'year_value', 0);
        $fyarray = array();
        $cyarray = array();
        foreach ($fydata as $row) {
          $fyarray['FY' . $row['year_value']] = 'FY ' . $row['year_value'];
        }
        foreach ($cydata as $row) {
          $cyarray['CY' . $row['year_value']] = 'CY ' . $row['year_value'];
        }
        $results = array_merge(array('ALL' => 'All Years'), $fyarray, $cyarray);
        return $results;
      }
      catch (Exception $e) {
        log_error("Error getting data from controller: \n" . $e->getMessage());
        return;
      }
      break;

    case 'budget-fiscal-years':
      $query = 'SELECT DISTINCT budget_fiscal_year, budget_fiscal_year_id FROM budget WHERE budget_fiscal_year > 2010 ORDER BY budget_fiscal_year_id';
      $fy_data = _checkbook_project_execute_sql($query);
      $years = array();
      foreach ($fy_data as $year) {
        $years[$year['budget_fiscal_year']] = $year['budget_fiscal_year'];
      }
      return $years;
      break;

    default:
      try {
        $fiscal_year = currentFiscalYear();
        $calendar_year = currentCalendarYear();
        $dataController = data_controller_get_instance();
        $fydata = $dataController->queryDataset("checkbook:year", array(
          'year_value',
          'year_id',
        ), array(
          'year_value' => data_controller_get_operator_factory_instance()->initiateHandler(RangeOperatorHandler::$OPERATOR__NAME, array(
            2011,
            $fiscal_year,
          ))
        ), 'year_value', 0);
        $cydata = $dataController->queryDataset("checkbook:year", array(
          'year_value',
          'year_id',
        ), array(
          'year_value' => data_controller_get_operator_factory_instance()->initiateHandler(RangeOperatorHandler::$OPERATOR__NAME, array(
            2010,
            $calendar_year,
          ))
        ), 'year_value', 0);
        $fyarray = array();
        $cyarray = array();
        foreach ($fydata as $row) {
          $fyarray['FY ' . $row['year_value']] = 'FY ' . $row['year_value'];
        }
        foreach ($cydata as $row) {
          $cyarray['CY ' . $row['year_value']] = 'CY ' . $row['year_value'];
        }
        $results = array_merge($fyarray, $cyarray);
        return $results;
      }
      catch (Exception $e) {
        log_error("Error getting data from controller: \n" . $e->getMessage());
        return;
      }
      break;
  }
}

/**
 * Returns current fiscal year.
 *
 * @return string
 *   Current fiscal year
 */
function currentFiscalYear() {
  $year = date('Y');
  $month = date('n');
  if ($month >= 7 && $month <= 12) {
    $year++;
  }
  return $year;
}

/**
 * Returns current calendar year.
 *
 * @return string
 *   Current calendar year
 */
function currentCalendarYear() {
  $year = date('Y');
  return $year;
}

/**
 * Get Agencies from Data Controller and format into a FAPI select input #options array.
 *
 * @return array
 *   Agency names and codes
 */
function _agency_options() {
  try {
    $dataController = data_controller_get_instance();
    $data = $dataController->queryDataset("checkbook:agency", array(
      'agency_code',
      'agency_name',
    ), array("is_display" => "Y"), 'agency_name');
    $results = array('Citywide (All Agencies)' => 'Citywide (All Agencies)');
    foreach ($data as $row) {
      $results[$row['agency_name'] . ' [' . $row['agency_code'] . ']'] = $row['agency_name'] . ' [' . $row['agency_code'] . ']';
    }
    return $results;
  }
  catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}

/**
 * Get Fund Classes from Data Controller and format into a FAPI select input #options array.
 *
 * @return array
 *   Fund classes and fund class names
 */
function _fund_class_options() {
  try {
    $dataController = data_controller_get_instance();
    $data = $dataController->queryDataset('checkbook:fund_class', array(
      'fund_class_code',
      'fund_class_name',
    ), NULL, 'fund_class_name');
    //$results = array('All Fund Classes' => 'All Fund Classes');
    foreach ($data as $row) {
      if ($row['fund_class_name']) {
        if(strtolower($row['fund_class_name']) == 'general fund')
        $results[$row['fund_class_name'] . ' [' . $row['fund_class_code'] . ']'] = $row['fund_class_name'] . ' [' . $row['fund_class_code'] . ']';
      }
    }
    return array_unique($results);
  }
  catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}

/**
 * Get Revenue Categories from Data Controller and format into a FAPI select input #options array.
 *
 * @return array
 *   Revenue categories and revenue category names
 */
function _revenue_category_options() {
  try {
    $dataController = data_controller_get_instance();
    $data = $dataController->queryDataset('checkbook:revenue_category', array(
      'revenue_category_code',
      'revenue_category_name',
    ), NULL, 'revenue_category_name');
    $results = array('All Revenue Categories' => 'All Revenue Categories');
    foreach ($data as $row) {
      $results[$row['revenue_category_name'] . ' [' . $row['revenue_category_code'] . ']'] = $row['revenue_category_name'] . ' [' . $row['revenue_category_code'] . ']';
    }
    return array_unique($results);
  }
  catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}

/**
 * Get Funding Sources from Data Controller and format into a FAPI select input #options array.
 *
 * @return array
 *   Funding source codes and funding source names
 */
function _funding_source_options() {
  try {
    $dataController = data_controller_get_instance();
    $data = $dataController->queryDataset('checkbook:ref_funding_class', array(
      'funding_class_code',
      'funding_class_name',
    ), NULL, 'funding_class_name');
    $results = array('All Funding Classes' => 'All Funding Classes');
    foreach ($data as $row) {
      $results[$row['funding_class_name'] . ' [' . $row['funding_class_code'] . ']'] = $row['funding_class_name'] . ' [' . $row['funding_class_code'] . ']';
    }
    return array_unique($results);
  }
  catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}

/**
 * Get Expense Type from Data Controller and format into a FAPI select input options array.
 *
 * @return array
 *   Spending category codes and display names
 */
function _expense_type_options() {
  try {
    $dataController = data_controller_get_instance();
    $data = $dataController->queryDataset('checkbook:spending_category', array(
      'spending_category_code',
      'display_name',
    ), NULL, 'display_order');
    foreach ($data as $row) {
      if ($row['spending_category_code'] == 'ts') {
        $results[""] = $row['display_name'] . ' [' . $row['spending_category_code'] . ']';
      }
      else {
        $results[$row['display_name'] . ' [' . $row['spending_category_code'] . ']'] = $row['display_name'] . ' [' . $row['spending_category_code'] . ']';
      }
    }
    return array_unique($results);
  }
  catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}

/**
 * Format pay frequencies into a FAPI select input #options array.
 *
 * @return array
 *   Pay frequencies
 */
function _pay_frequency_options() {
  return array(
    'All Pay Frequencies' => 'Select Pay Frequency',
    'Bi-weekly' => 'Bi-weekly',
    'Monthly' => 'Monthly',
    'Supplemental' => 'Supplemental',
  );
}

/**
 * Get Contract Type from Data Controller and format into a FAPI select input #options array.
 *
 * @return array
 *   Agreement type codes and agreement type names
 */
function _contract_type_options() {
  try {
    $dataController = data_controller_get_instance();
    $data = $dataController->queryDataset('checkbook:agreement_type', array(
      'agreement_type_code',
      'agreement_type_name'
    ), NULL, 'agreement_type_name');
    $results = array('No Contract Type Selected' => 'Select Contract Type');
    foreach ($data as $row) {
      $results[$row['agreement_type_name'] . ' [' . $row['agreement_type_code'] . ']'] = $row['agreement_type_name'] . ' [' . $row['agreement_type_code'] . ']';
    }
    return array_unique($results);
  }
  catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}

/**
 * Get Award Method from Data Controller and format into a FAPI select input #options array.
 *
 * @return array
 *   Award method codes and award method names
 */
function _award_method_options() {
  try {
    $dataController = data_controller_get_instance();
    $data = $dataController->queryDataset('checkbook:award_method', array(
      'award_method_code',
      'award_method_name',
    ), NULL, 'award_method_name');
    $results['No Award Method Selected'] = 'Select Award Method';
    foreach ($data as $row) {
      $results[$row['award_method_name'] . ' [' . $row['award_method_code'] . ']'] = $row['award_method_name'] . ' [' . $row['award_method_code'] . ']';
    }
    return array_unique($results);
  }
  catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}
/**
 * Get Department from Data Controller and format into a FAPI select input #options array.
 *
 * @param $agency
 *   Agency code
 * @param $sc
 *   Spending category
 * @param $year
 *   Year
 *
 * @return array
 *  Department codes and department names filtered by agency, year
 */
function _budget_dept_options($agency, $year) {
  $agency = emptyToZero($agency);
  if($agency){
      $agencystring = " agency_code = '" . $agency . "' ";
      if ($year) {
        $year = ltrim($year, 'FY');
        $yearstring = " AND budget_fiscal_year = " . $year . " ";
      }
      $query = "SELECT DISTINCT department_name || ' [' || department_code || ']' department_name FROM budget WHERE"
                . $agencystring . $yearstring  . "ORDER BY department_name ASC";
      $results = _checkbook_project_execute_sql($query);
      $output[''] = "Select Department";
      foreach ($results as $result) {
        $output[$result['department_name']] = $result['department_name'];
      }
  }else{
      $output[''] = "Select Department";
  }
  return $output;
}

/**
 * Get Expenditure Category from Data Controller and format into a FAPI select input #options array.
 *
 * @param $agency
 *   Agency code
 * @param $dept
 *   Department code
 * @param $sc
 *   Spending category code
 * @param $year
 *   Year
 *
 * @return array
 *   Expenditure object codes and expenditure object names, filtered by agency, department, year
 */
function _budget_expcat_options($agency, $dept, $year) {
     $agency = emptyToZero($agency);
     $dept = emptyToZero($dept);
    if ($agency) {
      $agencystring = " agency_code = '" . $agency . "' ";
      if ($year) {
        $year = ltrim($year, 'FY');
        $yearstring = " AND budget_fiscal_year = " . $year . " ";
      }
     if ($dept) {
        $deptstring = " AND department_code = '" . $dept . "' ";
     }
      $query = "SELECT DISTINCT object_class_name || '[' || object_class_code || ']' expenditure_object_code  FROM budget WHERE"
                . $agencystring . $yearstring  . $deptstring . "ORDER BY expenditure_object_code ASC";
      $results = _checkbook_project_execute_sql($query);
      $output[''] = "Select Expense Category";
      foreach ($results as $result) {
          $output[$result['expenditure_object_code']] = $result['expenditure_object_code'];
      }
    }else{
        $output[''] = "Select Expense Category";
    }
      return $output;
}

/**
 * Get Department from Data Controller and format into a FAPI select input #options array.
 *
 * @param $agency
 *   Agency code
 * @param $sc
 *   Spending category
 * @param $year
 *   Year
 *
 * @return array
 *  Department codes and department names filtered by agency, spending category, year
 */
function _dept_options($agency, $sc, $year) {
  $agency = emptyToZero($agency);
  $sc = emptyToZero($sc);
  if ($year && startsWith($year, 'F')) {
    $year = ltrim($year, 'FY');
    $yearstring = "AND disbursement_line_item_details.fiscal_year = '" . $year . "' ";
  }
  elseif ($year && startsWith($year, 'C')) {
    $year = ltrim($year, 'CY');
    $yearstring = "AND disbursement_line_item_details.calendar_fiscal_year = '" . $year . "' ";
  }
  if ($agency) {
    $agencystring = "AND disbursement_line_item_details.agency_code = '" . $agency . "' ";
  }
  if ($sc) {
    $scstring = "AND ref_spending_category.spending_category_code = '" . $sc . "' ";
  }
  $query = "SELECT DISTINCT department_name || ' [' || department_code || ']' department_name FROM disbursement_line_item_details, ref_spending_category WHERE disbursement_line_item_details.spending_category_id = ref_spending_category.spending_category_id " . $agencystring . $yearstring . $scstring . "ORDER BY department_name ASC";
  $results = _checkbook_project_execute_sql($query);
  $output[''] = "Select Department";
  foreach ($results as $result) {
    $output[$result['department_name']] = $result['department_name'];
  }
  return $output;
}

/**
 * Get Expenditure Category from Data Controller and format into a FAPI select input #options array.
 *
 * @param $agency
 *   Agency code
 * @param $dept
 *   Department code
 * @param $sc
 *   Spending category code
 * @param $year
 *   Year
 *
 * @return array
 *   Expenditure object codes and expenditure object names, filtered by agency, department, spending category, year
 */
function _expcat_options($agency, $dept, $sc, $year) {
  $agency = emptyToZero($agency);
  $dept = emptyToZero($dept);
  $sc = emptyToZero($sc);
  if ($year && startsWith($year, 'F')) {
    $year = ltrim($year, 'FY');
    $yearstring = "AND disbursement_line_item_details.fiscal_year = '" . $year . "' ";
  }
  elseif ($year && startsWith($year, 'C')) {
    $year = ltrim($year, 'CY');
    $yearstring = "AND disbursement_line_item_details.calendar_fiscal_year = '" . $year . "' ";
  }
  if ($agency) {
    $agencystring = "AND disbursement_line_item_details.agency_code = '" . $agency . "' ";
  }
  if ($sc) {
    $scstring = "AND ref_spending_category.spending_category_code = '" . $sc . "' ";
  }
  if ($dept) {
    $deptstring = "AND disbursement_line_item_details.department_code = '" . $dept . "' ";
  }
  $query = "SELECT DISTINCT expenditure_object_name|| '[' || expenditure_object_code || ']' expenditure_object_code FROM disbursement_line_item_details, ref_spending_category WHERE disbursement_line_item_details.spending_category_id = ref_spending_category.spending_category_id " . $yearstring . $agencystring . $scstring . $deptstring . "ORDER BY expenditure_object_code ASC";
  $results = _checkbook_project_execute_sql($query);
  $output[''] = 'Select Expense Category';
  foreach ($results as $result) {
    $output[$result['expenditure_object_code']] = $result['expenditure_object_code'];
  }
  return $output;
}

/**
 * Submit handler for Download Data button.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_confirmation_download_submit($form, &$form_state) {
  $data = $form_state['step_information']['confirmation']['response'];
  if ($form_state['step_information']['type']['stored_values']['format'] == 'xml') {
    drupal_add_http_header('Content-Type', 'text/xml; utf-8');
    drupal_add_http_header('Content-Disposition', 'attachment; filename="nyc-data-feed.xml"');
    echo $data;
    module_invoke_all('exit');
    exit;
  }
  elseif ($form_state['step_information']['type']['stored_values']['format'] == 'csv') {
    drupal_add_http_header('Content-Type', 'text/csv; utf-8');
    drupal_add_http_header('Content-Disposition', 'attachment; filename="nyc-data-feed.csv"');
    echo $data;
    module_invoke_all('exit');
    exit;
  }
}

/**
 * Submit handler for Confirm button; queues a data request.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_confirmation_queue_submit($form, &$form_state) {
  $email = $form_state['values']['email_address'];
  $criteria = $form_state['step_information']['confirmation']['stored_values']['criteria'];
  unset($criteria['global']['max_records']);
  $responsetype = $form_state['step_information']['type']['stored_values']['format'];
  $searchCriteria = new QueueCriteria($criteria, $responsetype);
  $user_criteria = $form_state['step_information']['confirmation']['stored_values']['user_criteria'];
  $searchCriteria->setUserCriteria($user_criteria);
  try {
    $checkBookApi = new CheckBookAPI($searchCriteria);
  }
  catch (Exception $e) {
    drupal_set_message('An error occurred processing your request. Please try again later.', 'error');
    log_error($e->getMessage());
  }
  if (isset($checkBookApi)) {
    if ($checkBookApi->validateRequest()) {
      try {
        //Make sure e-mail address is passed to the call.
        $details = $checkBookApi->queueRequest($email);
      }
      catch (Exception $e) {
        log_error($e->getMessage());
      }
    }
    else {
      log_error($checkBookApi->getErrorResponse());
    }
  }
  $current_step = & $form_state['step'];
  $form_state['step_information']['queue']['stored_values'] = $form_state['values'];
  if ($details) {
    $form_state['step_information']['queue']['stored_values']['details'] = $details;
  }
  $current_step = 'queue_final';
  if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  else {
    $form_state['values'] = array();
  }
  $form_state['rebuild'] = TRUE; // Force rebuild with next step.
}

/**
 * Final confirmation page after queueing a request.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Renderable array confirming request has been queued
 */
function checkbook_datafeeds_queue_final($form, &$form_state) {
  drupal_set_title('Thank You');
  $email = $form_state['step_information']['queue']['stored_values']['email_address'];
  $token = $form_state['step_information']['queue']['stored_values']['details']['token'];
  $status = $form_state['step_information']['queue']['stored_values']['details']['status'];
  if ($email) {
    $form['text'] = array(
      '#markup' => '<strong>Thank You</strong><br /><br />Your request has been received.<br /><br />You will receive an email at ' . $email . ' with the link to download the data feed.<br />Please note that due to a possible high number of requests, there may be a delay in notification.<br /><br />You can track the status of your request by entering your tracking number: <strong>' . $token . '</strong>&nbsp;in the "Track Status of Data Feed" box on this page.<br /><br />You will have 7 days to use this tracking number to return to your queries.',
    );
    if ($status == '2') {
      $request = QueueUtil::getPendingEmailInfo($token);
      global $conf;
      $dir = variable_get('file_public_path', 'sites/default/files')
        . '/' . $conf['check_book']['data_feeds']['output_file_dir'];

      $file = $dir . '/' . $request[0]['filename'];
      $params = array(
        "download_url" => $file,
        "download_url_compressed" => $file . '.zip',
        "expiration_date" => date('d-M-Y', $request[0]['end_time'] + 3600 * 24 * 7),
        "contact_email" => $request[0]['contact_email'],
        "tracking_num" => $request[0]['token'],
      );
      LogHelper::log_debug($params);
      $response = drupal_mail('checkbook_datafeeds', "download_notification", $request[0]['contact_email'], NULL, $params);
      LogHelper::log_debug($response);
      if ($response['result']) {
        QueueUtil::updateJobRequestEmailStatus($request[0]['rid']);
      }
    }
  }
  else {
    $form['text'] = array(
      '#markup' => '<strong>Thank You</strong><br /><br />Your request has been received.<br /><br />You can track the status of your request by entering your tracking number <strong>' . $token . '</strong>&nbsp;in the "Track Status of Data Feed" box on this page.<br /><br />Please not that due to high number of requests, there may be delay in notification.<br /><br />You will have 7 days to use this tracking number to return to your queries.<br /><br /><a href="/data-feeds">Back</a>',
    );
  }
  return $form;
}

/**
 * A function used in range parameters to replace empty values with NULL.
 *
 * @param string $value
 *
 * @return null
 */
function checknull($value) {
  if ($value === '') {
    $value = NULL;
  }
  return $value;
}

/**
 * Submit handler for Previous button on second step of wizard; returns the user to first page of wizard.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function previous_submit($form, &$form_state) {
  $current_step = & $form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  $current_step = 'type';
  $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Generates the end of a confirmation page based on number of results returned by API.
 *
 * @param $form
 *   Data Feeds wizard form array
 * @param $form_state
 *   Data Feeds wizard form_state array
 * @param $criteria
 *   Search criteria
 * @param $responsetype
 *   Response type (csv or xml)
 * @param $domain
 *   Domain
 *
 * @return array
 *   Renderable array of results from Data Controller request
 */
function checkbook_datafeeds_end_of_confirmation_form($form, &$form_state, $criteria, $responsetype, $domain) {
  $searchCriteria = new SearchCriteria($criteria, $responsetype);
  try {
    $checkBookApi = new CheckBookAPI($searchCriteria);
  }
  catch (Exception $e) {
    drupal_set_message('An error occurred processing your request. Please try again later.', 'error');
    log_error($e->getMessage());
  }
  if (isset($checkBookApi)) {
    if ($checkBookApi->validateRequest()) {
      $recordcount = $checkBookApi->getRecordCount();
    }
    else {
      drupal_set_message('An error occurred.', 'error');
      log_error($checkBookApi->getErrorResponse());
    }
  }
  if ($recordcount == 0) {
    $form['count'] = array(
      '#type' => 'fieldset',
    );
    $form['count']['no_records'] = array(
      '#markup' => 'There are no records for the search criteria.',
    );
    $form['start_over'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
    );
  }
  elseif ($recordcount > 0 && $recordcount < 50000) {
    if (isset($checkBookApi)) {
      if ($checkBookApi->validateRequest()) {
        $form_state['step_information']['confirmation']['response'] = $checkBookApi->getData();
      }
      else {
        $form_state['step_information']['confirmation']['response'] = $checkBookApi->getErrorResponse();
      }
    }
    $form['count'] = array(
      '#markup' => '<div class="records-result">There are ' . number_format($recordcount) . ' records for the selected filter criteria.</div>',
    );
    $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Previous'),
      '#name' => 'prev',
      '#submit' => array('checkbook_datafeeds_' . $domain . '_confirmation_previous_submit'),
      '#limit_validation_errors' => array(),
    );
    $form['download'] = array(
      '#type' => 'submit',
      '#value' => t('Download Data'),
      '#submit' => array('checkbook_datafeeds_confirmation_download_submit'),
    );
    $form['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
    );
  }
  else {
    $form_state['step_information']['confirmation']['stored_values']['user_criteria']['Record Count'] = $recordcount;
    $form['count'] = array(
      '#type' => 'fieldset',
    );
    $form['count']['count_message'] = array(
      '#markup' => '<div><p>Please note this request has <strong>' . number_format($recordcount) . ' transactions</strong>.  It will be queued to be generated in the background.</p><p>If you decide to proceed, please confirm the transaction below.  Upon confirmation, a tracking number will be generated for the user to track the status of the request.</p></div>',
    );
    $form['email'] = array(
      '#type' => 'fieldset',
    );
    $form['email']['email_text'] = array(
      '#markup' => '<div><p>You can also provide your e-mail address for notification when the data is ready to be downloaded.  Please note, providing email address is optional.</p></div>',
    );
    $form['email']['email_address'] = array(
      '#type' => 'textfield',
      '#title' => 'Enter E-mail:',
    );
    $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Previous'),
      '#name' => 'prev',
      '#submit' => array('checkbook_datafeeds_' . $domain . '_confirmation_previous_submit'),
      '#limit_validation_errors' => array(),
    );
    $form['confirm'] = array(
      '#type' => 'submit',
      '#value' => t('Confirm'),
      '#validate' => array('checkbook_datafeeds_validate_queue'),
      '#submit' => array('checkbook_datafeeds_confirmation_queue_submit'),
    );
    $form['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
    );
  }
  return $form;
}

/**
 * Validates an email before adding to a queue request.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_validate_queue($form, &$form_state) {
  if ($form_state['values']['email_address']) {
    $valid = valid_email_address($form_state['values']['email_address']);
    if (!$valid) {
      form_set_error('email_address', 'E-mail address is not valid. Please enter a valid email address');
    }
  }
}

/**
 * Convert bytes to human-readable amounts.
 *
 * @param int $bytes
 *   Number of bytes
 *
 * @return string
 *   Formatted human readable number of bytes
 */
function format_bytes($bytes) {
  if ($bytes == 0) {
    return '0 B';
  }
  elseif ($bytes < 1024) {
    return $bytes . ' B';
  }
  elseif ($bytes < 1048576) {
    return round($bytes / 1024, 2) . ' kB';
  }
  elseif ($bytes < 1073741824) {
    return round($bytes / 1048576, 2) . ' MB';
  }
  elseif ($bytes < 1099511627776) {
    return round($bytes / 1073741824, 2) . ' GB';
  }
  else {
    return round($bytes / 1099511627776, 2) . ' TB';
  }
}

/**
 * Check whether a date is valid using RegEx
 *
 * @param string $date
 *   Date string
 *
 * @return bool
 *   TRUE if valid, FALSE if not
 */
function checkDateFormat($date) {
  // Match the format of the date:
  if (preg_match("/^([0-9]{4})-([0-9]{2})-([0-9]{2})$/", $date, $parts)) {
    // Check whether the date is valid:
    if (checkdate($parts[2], $parts[3], $parts[1])) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Output download links and expiration date message.
 *
 * @param array $results
 *   Result from tracking page request
 *
 * @return array
 *   Renderable array that outputs file paths and expiration dates
 */
function checkbook_datafeeds_file_download_page($results) {
  global $conf;
  $datestamp = strtotime($results['file_generated_time'] . ' + 1 week');
  $expiration = date('F j, Y g:ia', $datestamp);
  $output = array();
  $output['status-fieldset'] = array(
    '#type' => 'fieldset',
  );
  $filesize = filesize($results['file_path']);
  $output['status-fieldset']['uncompressed'] = array(
    '#markup' => '<strong>Status:</strong><br>The file is ready for download: <a href="/' . $results['file_path'] . '">' . $conf['check_book']['data_feeds']['site_url'] . '/' . $results['file_path'] . '</a> (' . format_bytes($filesize) . ')',
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  $cfilesize = filesize($results['compressed_file_path']);
  $output['status-fieldset']['compressed'] = array(
    '#markup' => 'Download the file in a compressed format (zip): <a href="/' . $results['compressed_file_path'] . '">' . $conf['check_book']['data_feeds']['site_url'] . '/' . $results['compressed_file_path'] . '</a> (' . format_bytes($cfilesize) . ')',
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  $output['status-fieldset']['available_date'] = array(
    '#markup' => 'Your files will be available until ' . $expiration,
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  return $output;
}

/**
 * Implementation of hook_mail().
 */
function checkbook_datafeeds_mail($key, &$message, $params) {
  global $conf;
  $variables = array('@site-name' => variable_get('site_name', 'Drupal'));
  $variables['@download_url'] = $conf['check_book']['data_feeds']['site_url'] . "/" . $params['download_url'];
  $variables['@download_url_compressed'] = $conf['check_book']['data_feeds']['site_url'] . "/" . $params['download_url_compressed'];
  $variables['@tracking_num'] = $params['tracking_num'];
  $variables['@expiration_date'] = $params['expiration_date'];
  switch ($key) {
    case "download_notification":
      $message['subject'] = "Your requested file is ready for download";
      $message['body'][] = t("
Your data feed is ready to download at @download_url \n
The file is available to download until @expiration_date \n
A compressed version of the file is available at @download_url_compressed \n
You had provided your email address at @site-name for notfication when the data feed with the tracking number @tracking_num was ready to be downloaded.
		        ", $variables);
      break;
  }

}

/**
 * Strips a value from brackets using RegEx else returns zero.
 *
 * @param string $input
 *
 * @return int|string
 */
function emptyToZero($input) {
  $p = "/.*?(\\[.*?\\])/is";
  $matches = array();
  if ($input) {
    $inputval = preg_match($p, $input, $matches);
    $output = trim($matches[1], '[ ]');
  }
  else {
    $output = 0;
  }
  return $output;
}

/**
 * Gets the created date for records within a domain to display at the top of Data Feeds page.
 *
 * @param string $domain
 *   Domain
 *
 * @return string
 *   Formatted date from domain's created_date column
 */
function _checkbook_datafeeds_get_updated_date($domain) {
  switch ($domain) {
    case 'spending':
      $query = ('SELECT MAX(COALESCE(created_date)) FROM {disbursement}');
      break;

    case 'contracts':
      $query = ('SELECT MAX(COALESCE(created_date)) FROM {history_agreement}');
      break;

    case 'payroll':
      $query = ('SELECT MAX(COALESCE(created_date)) FROM {payroll}');
      break;
    case 'budget':
      $query = ('SELECT MAX(COALESCE(updated_date, created_date)) FROM {budget}');
      break;
    case 'revenue':
      $query = ('SELECT MAX(COALESCE(last_modified_date)) FROM {revenue_details}');
      break;
  }
  $results = _checkbook_project_execute_sql($query);
  $max = $results[0]['max'];
  $date = date('F j, Y h:ia', strtotime($max));
  return $date;
}
