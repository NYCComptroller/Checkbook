<?php
/**
 * This file is part of the Checkbook NYC financial transparency software.
 *
 * Copyright (C) 2012, 2013 New York City
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

module_load_include('php', 'checkbook_datafeeds', 'config/util/DatafeedsConfigUtil');
module_load_include('inc', 'checkbook_datafeeds', 'includes/contracts/checkbook_datafeeds_contracts');
module_load_include('inc', 'checkbook_datafeeds', 'includes/spending/checkbook_datafeeds_spending');
module_load_include('inc', 'checkbook_datafeeds', 'includes/payroll/checkbook_datafeeds_payroll');
module_load_include('inc', 'checkbook_datafeeds', 'includes/budget/checkbook_datafeeds_budget');
module_load_include('inc', 'checkbook_datafeeds', 'includes/revenue/checkbook_datafeeds_revenue');
module_load_include('inc', 'checkbook_datafeeds', 'includes/checkbook_datafeeds_tracking');

spl_autoload_register(function ($class) {
  if (FALSE !== strpos($class, 'checkbook_datafeeds')) {
    list(, $class) = explode('\\', $class);
    $domain = substr($class, 0, strpos($class, 'Feed'));
    if(strlen($domain) > 0 ) {
      include_once 'includes/' .strtolower($domain) . '/' . $class . '.class.inc';
    }else {
      include_once 'includes/' . $class . '.class.inc';
    }
  }
});


/**
 * Implements hook_menu().
 */
function checkbook_datafeeds_menu()
{
  $items = array();
  $items['data-feeds'] = array(
    'title' => 'Data Feeds',
    'page callback' => 'checkbook_datafeeds_data_feeds_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['data-feeds/data-feeds'] = array(
    'title' => 'Data Feeds',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['data-feeds/api'] = array(
    'title' => 'API',
    'page callback' => 'checkbook_datafeeds_api_page',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['track-data-feed'] = array(
    'page callback' => 'checkbook_datafeeds_tracking_results_page',
    'access callback' => TRUE,
  );
  $items['data-feeds/download'] = array(
    'title' => 'Checkbook Alerts',
    'page callback' => 'checkbook_datafeeds_download_zip_ajax',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['datafeeds/budget/department/%/%'] = array(
    'page callback' => '_budget_dept_options',
    'page arguments' => array(3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['datafeeds/%/expcat/%/%/%'] = array(
    'page callback' => '_budget_expcat_options',
    'page arguments' => array(1, 3, 4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  $items['datafeeds/spending/agency/%/%'] = array(
    'page callback' => '_agency_options',
    'page arguments' => array(3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  $items['datafeeds/spending/agency/%/%'] = array(
    'page callback' => '_agency_options',
    'page arguments' => array(3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  $items['data-feeds/%/budget_name/%/%/%'] = array(
    'page callback' => '_budget_name_options',
    'page arguments' => array(1, 3, 4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  $items['data-feeds/%/budget_type/%/%/%'] = array(
    'page callback' => '_budget_type_options',
    'page arguments' => array(1, 3, 4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implements hook_library().
 */
function checkbook_datafeeds_library()
{
  $libraries['jquery_multiselect'] = array(
    'title' => 'jquery.multi-select.js',
    'website' => 'http://loudev.com/index.html',
    'version' => '0.3',
    'js' => array(
      drupal_get_path('module', 'checkbook_datafeeds') . '/js/multi-select/js/jquery.multi-select.js' => array(),
    ),
    'css' => array(
      drupal_get_path('module', 'checkbook_datafeeds') . '/js/multi-select/css/multi-select.css' => array(),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_theme().
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function checkbook_datafeeds_theme($existing, $type, $theme, $path)
{
  $hooks = array();
  $hooks['user_criteria'] = array(
    'variables' => array('usercriteria' => NULL),
  );
  return $hooks;
}

/**
 * Callback function to display API documentation page.
 *
 * @return array
 *   Drupal renderable array for node 299
 * @see checkbook_datafeeds_menu()
 *
 */
function checkbook_datafeeds_api_page()
{
  $node = node_load(299);
  $node = node_view($node);
  return $node;
}


/**
 * Theme function for search criteria.
 *
 * @param array $variables
 *   Items to be themed
 *
 * @return string
 *   Themed label-value pairs
 */
function theme_user_criteria($variables)
{
  $output = '';
  foreach ($variables['usercriteria'] as $key => $value) {
    if ($key !== 'Columns' && $key !== 'Record Count') {
      $output .= '<div><strong>' . $key . '</strong>: ' . $value . '</div>';
    }
  }
  return $output;
}

/**
 * Page callback for Data Feeds page.
 *
 * @return array
 *   Renderable array representing entire Data Feeds page.
 * @see checkbook_datafeeds_menu()
 *
 */
function checkbook_datafeeds_data_feeds_page()
{
  $page['instructions'] = array(
    '#markup' => t('<div class="form-instructions"><h2>Select the Data Feeds</h2><p>Use this tool to design your own snapshots of NYC Financial Data</p><p>You can then save the resulting dataset as a file, or publish a dynamically updating XML feed of the data.  This feed will enable you to build your own web applications and widgets for your website.</p></div>'),
    '#prefix' => '<div class="data-feeds-sidebar">',
  );
  $page['trackstatus'] = array(
    '#markup' => '<div class="trackstatus">',
  );
  $page['tftitle'] = array(
    '#markup' => '<h2>Track Status of Data Feed</h2>',
  );
  $page['tracking'] = drupal_get_form('checkbook_datafeeds_tracking_form');
  $page['closediv'] = array(
    '#markup' => '</div></div>',
  );
  $page['data-feed-wizard'] = drupal_get_form('checkbook_datafeeds_data_feed_wizard');
  $page['rotator'] = array(
    '#markup' => '<div id= "rotator"></div>',
  );
  return $page;
}

/**
 * Sets up steps for Data Feeds wizard using FAPI.
 *
 * @param array $form
 *   Data Feeds form array
 * @param array $form_state
 *   Data Feeds form form_state array
 *
 * @return array
 *   Renderable array of right pane of Data Feeds wizard
 * @see checkbook_datafeeds_menu()
 *
 */
function checkbook_datafeeds_data_feed_wizard($form, &$form_state)
{
  switch ($form_state['step']) {
    case 'budget':
      return checkbook_datafeeds_budget($form, $form_state);
      break;

    case 'budget_confirmation':
      return checkbook_datafeeds_budget_confirmation($form, $form_state);
      break;

    case 'contracts':
      return checkbook_datafeeds_contracts($form, $form_state);
      break;

    case 'contracts_confirmation':
      return checkbook_datafeeds_contracts_confirmation($form, $form_state);
      break;

    case 'payroll':
      return checkbook_datafeeds_payroll($form, $form_state);
      break;

    case 'payroll_confirmation':
      return checkbook_datafeeds_payroll_confirmation($form, $form_state);
      break;

    case 'revenue':
      return checkbook_datafeeds_revenue($form, $form_state);
      break;

    case 'revenue_confirmation':
      return checkbook_datafeeds_revenue_confirmation($form, $form_state);
      break;

    case 'spending':
      $form = checkbook_datafeeds_spending($form, $form_state);
      return $form;
      break;

    case 'spending_confirmation':
      $form = checkbook_datafeeds_spending_confirmation($form, $form_state);
      return $form;
      break;

    case 'queue_final':
      return checkbook_datafeeds_queue_final($form, $form_state);
      break;
  }

  $form_state['step'] = 'type';

  $form['type'] = array(
    '#type' => 'radios',
    '#title' => t('1. Select the Data Type:'),
    '#prefix' => '<div class="data-feed-wizard">',
    '#options' => array(
      'budget' => t('Budget'),
      'revenue' => t('Revenue'),
      'spending' => t('Spending'),
      'contracts' => t('Contracts'),
      'payroll' => t('Payroll'),
    ),
    '#default_value' => !empty($form_state['values']['type']) ? $form_state['values']['type'] : 'spending',
  );
  $form['format'] = array(
    '#type' => 'radios',
    '#title' => t('2. Select the Format:'),
    '#options' => array(
      'csv' => t('CSV'),
      'xml' => t('XML'),
    ),
    '#default_value' => !empty($form_state['values']['format']) ? $form_state['values']['format'] : 'csv',
  );
  $form['type_next'] = array(
    '#type' => 'submit',
    '#value' => t('Next'),
    '#name' => 'next',
    '#suffix' => '</div>',
    '#submit' => array('checkbook_datafeeds_type_next_submit'),
  );
  $form['#attributes'] = array('class' => array('first-page', 'data-feeds-wizard'));
  return $form;
}

/**
 * Submit handler for first step of form.
 *
 * @param array $form
 *   Data Feeds form array
 * @param array $form_state
 *   Data Feeds form form_state array
 */
function checkbook_datafeeds_type_next_submit($form, &$form_state)
{
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  switch ($form_state['values']['type']) {
    case 'budget':
      $current_step = 'budget';
      if (!empty($form_state['step_information']['budget']['stored_values'])) {
        $form_state['values'] = $form_state['step_information']['budget']['stored_values'];
      } else {
        $form_state['values'] = array();
      }
      // Force rebuild with next step.
      $form_state['rebuild'] = TRUE;
      break;

    case 'contracts':
      $current_step = 'contracts';
      if (!empty($form_state['step_information']['contracts']['stored_values'])) {
        $form_state['values'] = $form_state['step_information']['contracts']['stored_values'];
      } else {
        $form_state['values'] = array();
      }
      // Force rebuild with next step.
      $form_state['rebuild'] = TRUE;
      break;

    case 'payroll':
      $current_step = 'payroll';
      if (!empty($form_state['step_information']['payroll']['stored_values'])) {
        $form_state['values'] = $form_state['step_information']['payroll']['stored_values'];
      } else {
        $form_state['values'] = array();
      }
      // Force rebuild with next step.
      $form_state['rebuild'] = TRUE;
      break;

    case 'revenue':
      $current_step = 'revenue';
      if (!empty($form_state['step_information']['revenue']['stored_values'])) {
        $form_state['values'] = $form_state['step_information']['revenue']['stored_values'];
      } else {
        $form_state['values'] = array();
      }
      // Force rebuild with next step.
      $form_state['rebuild'] = TRUE;
      break;

    case 'spending':
      $current_step = 'spending';
      if (!empty($form_state['step_information']['spending']['stored_values'])) {
        $form_state['values'] = $form_state['step_information']['spending']['stored_values'];
      } else {
        $form_state['values'] = array();
      }
      // Force rebuild with next step.
      $form_state['rebuild'] = TRUE;
      break;
  }
}

/**
 * Sorts selected columns to match intended order for export
 * @param array $selectedColumns
 * @param array $intendedOrder
 * @return array
 */
function checkbook_datafeeds_override_column_order(array $selectedColumns, array $intendedOrder)
{
  $ordered = [];
  foreach ($intendedOrder as $key) {
    if (in_array($key, $selectedColumns)) {
      $ordered[$key] = $selectedColumns[$key];
    }
  }
  return $ordered;
}


/**
 * Function to figure out where to pre-populate data from.
 * This is in the case where the data source is switching from/to
 * checkbook or checkbook_oge.  In this case, the pre-population
 * should not come from the form_state, instead, it should be treated
 * as if it were the first time.  The form state will contain the values
 * of the data from the previous form data source should not be used.
 *
 * The $form_state["triggering_element"]["#value"] holds the value of the
 * data_source if the radio button for switching was clicked.
 *
 * There are 3 scenarios based on the triggering element value:
 *
 * 1. There is no triggering element value,
 *    this is a first load
 * 2. The triggering element is populated but the data_source has not changed,
 *    this is not a first load
 * 3. The triggering element is populated AND the data_source has changed,
 *    this is considered a first load
 *
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @param string $data_source
 *   Current data source (checkbook, checkbook_oge)
 *
 * @return bool
 *   Value describing if data should be loaded from the $form_state or
 *   treated like first time
 */
function checkbook_datafeeds_is_first_load($form_state, $data_source)
{
  $triggering_element_value = $form_state["triggering_element"]["#value"];
  $data_source_changed = $form_state["triggering_element"]["#ajax"]["parameters"]["data_source_changed"];

  $first_load = true;

  // First time load == true if:
  // The triggering element is empty OR,
  // The data_source has changed
  if (!$triggering_element_value || $data_source_changed) return $first_load;

  // The data_source has not changed, this not a first load
  return !$first_load;
}

/**
 * @param $form_state
 * @param $field_name
 * @param $first_time_load
 * @param string $default_val
 * @return mixed|string
 */
function checkbook_datafeeds_filter_get_default_value($form_state, $field_name, $first_time_load, $default_val = '')
{
  if ($first_time_load) {
    return $default_val;
  }
  return isset($form_state['values'][$field_name]) || $form_state['values'][$field_name] === "0" ? $form_state['values'][$field_name] : $default_val;
}


/**
 * Ajax callback to update department and expense_category fields based on year.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Array of ajax commands
 */
function checkbook_datafeeds_year_ajax($form, &$form_state)
{

  $html = array($form['filter']['dept'], $form['filter']['expense_category']);
  $html = drupal_render($html);
  $commands[] = ajax_command_replace('#dynamic-fields', $html);
  return array('#type' => 'ajax', '#commands' => $commands);
}

//Reusable functions

/**
 * Get years from Data Controller and format into a FAPI select input #options array.
 *
 * @param string|null $yeartype
 *   All Years or Budget Fiscal Years
 * @param $datasource
 * @param $domain
 * @return mixed
 *   Array of years formatted for FAPI select box #options
 */
function _year_options($yeartype = NULL, $datasource = Datasource::CITYWIDE, $domain = NULL)
{
  switch ($yeartype) {
    case 'all-years':
      try {
        $fydata = CheckbookDateUtil::getFiscalYearOptionsRange($datasource);
        $fyarray = array();
        foreach ($fydata as $row) {
          $fyarray['FY' . $row['year_value']] = 'FY ' . $row['year_value'];
        }
        $results = array_merge(array('0' => 'All Years'), $fyarray);
        return $results;
      } catch (Exception $e) {
        log_error("Error getting data from controller: \n" . $e->getMessage());
        return;
      }
      break;

    case 'budget-fiscal-years':
      $query = 'SELECT DISTINCT budget_fiscal_year, budget_fiscal_year_id FROM budget WHERE budget_fiscal_year > 2010 ORDER BY budget_fiscal_year_id DESC';
      $fy_data = _checkbook_project_execute_sql($query);
      $years = array();
      foreach ($fy_data as $year) {
        $years[$year['budget_fiscal_year']] = $year['budget_fiscal_year'];
      }
      return $years;
      break;

    default:
      try {
        $fydata = CheckbookDateUtil::getFiscalYearOptionsRange($datasource);
        $cydata = CheckbookDateUtil::getCalendarYearOptionsRange($datasource);
        $fyarray = $cyarray = [];
        foreach ($fydata as $row) {
          $fyarray['FY ' . $row['year_value']] = 'FY ' . $row['year_value'];
        }
        foreach ($cydata as $row) {
          $cyarray['CY ' . $row['year_value']] = 'CY ' . $row['year_value'];
        }
        $results = array_merge($cyarray, $fyarray);
        return $results;
      } catch (Exception $e) {
        log_error("Error getting data from controller: \n" . $e->getMessage());
        return;
      }
      break;
  }
}


/**
 * Get Agencies from Data Controller and format into a FAPI select input #options array.
 *
 * @param string $data_source
 * @param bool $json_output
 * @return mixed
 *   Agency names and codes
 */
function _agency_options($data_source = null, $json_output = false) {
    try {
        $dataController = data_controller_get_instance();
        switch($data_source){
            case 'checkbook_oge':
                $data = $dataController->queryDataset("checkbook_oge:agency", array(
                    'agency_code',
                    'agency_name',
                ), array("is_display" => "Y","is_oge_agency" => "Y"), 'agency_name');
                break;
            case 'checkbook_nycha':
                $data = $dataController->queryDataset("checkbook_nycha:agency", array(
                    'agency_code',
                    'agency_name',
                ), array("is_display" => "Y"), 'agency_name');
                break;
            case 'checkbook_oge_nycha':
                $oge_data = $dataController->queryDataset("checkbook_oge:agency", array(
                    'agency_code',
                    'agency_name',
                ), array("is_display" => "Y","is_oge_agency" => "Y"), 'agency_name');

                $nycha_data = $dataController->queryDataset("checkbook_nycha:agency", array(
                    'agency_code',
                    'agency_name',
                ), array("is_display" => "Y"), 'agency_name');
                $data = array_merge($nycha_data, $oge_data);
                break;
            default:
                $data = $dataController->queryDataset("checkbook:agency", array(
                    'agency_code',
                    'agency_name',
                ), array("is_display" => "Y"), 'agency_name');
                break;
        }
        return _checkbook_datafeeds_agency_options($data,$data_source, $json_output);
    }
    catch (Exception $e) {
        log_error("Error getting data from controller: \n" . $e->getMessage());
        return;
    }
}

/**
 * Get the agency options, for IE8, the text will be shortened to fit the width and a title attribute is there
 * @param $data
 * @param null $data_source
 * @param bool $json_output
 * @return mixed
 */
function _checkbook_datafeeds_agency_options($data,$data_source = null, $json_output = false) {

    //IE8 - handle drop down width issue
    if($data_source == 'checkbook'){
        $menu_options = array('Citywide (All Agencies)' => 'Citywide (All Agencies)');
        $json_menu_options[] = array('label'=> 'Citywide (All Agencies)','value' => 'Citywide (All Agencies)', 'code' => '');
        $title = 'Citywide (All Agencies)';
    }

    $menu_options_attributes = array($title => array('title' => $title));

    foreach ($data as $row) {
        $option = $row['agency_name'] . ' [' . $row['agency_code'] . ']';
        //Menu options
        $menu_options[$option] = (strlen($option) > 20) ? substr($option, 0, 20) . '...' : $option;
        $json_menu_options[] = array('label'=> $menu_options[$option],'value' => $option, 'code' => $option);
        //Menu option titles
        $menu_options_attributes[$option] = array('title' => $option);
    }
    $results['options'] = $menu_options;
    $results['options_attributes'] = $menu_options_attributes;
    if ($json_output) {
        drupal_json_output($json_menu_options);
    }else {
          return $results;
    }
}


/**
 * Get Sub Vendor Status in PIP from Data Controller and format into a FAPI select input #options array.
 *
 * @return mixed
 *   Sub Vendor Status In PIP ids and nammes
 */
function _sub_vendor_status_in_pip()
{
  $statuses[0] = 'Select Status';
  try {
    $dataController = data_controller_get_instance();
    $data = $dataController->queryDataset('checkbook:subcontract_approval_status',
      array('aprv_sta_id', 'aprv_sta_value'),
      NULL, 'sort_order', 0, 10, NULL);

    $menu_options = array('0' => 'Select Status');
    $title = 'Select Status';
    $menu_options_attributes = array($title => array('title' => $title));

    foreach ($data as $row) {
      if ($row['aprv_sta_id'] != "7") {
        $option = $row['aprv_sta_value'].'['.$row['aprv_sta_id'] .']';
        //Menu options
        $menu_options[$row['aprv_sta_id']] = _ckbk_excerpt($option);
        //Menu option titles
        $menu_options_attributes[$row['aprv_sta_id']] = array('title' => $option);
      }
    }
    $results['options'] = $menu_options;
    $results['options_attributes'] = $menu_options_attributes;
    return $results;
  } catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}


/**
 * Get Fund Classes from Data Controller and format into a FAPI select input #options array.
 *
 * @return mixed
 *   Fund classes and fund class names
 */
function _fund_class_options()
{
  try {
    $dataController = data_controller_get_instance();
    $data = $dataController->queryDataset('checkbook:fund_class', array(
      'fund_class_code',
      'fund_class_name',
    ), NULL, 'fund_class_name');
    //$results = array('All Fund Classes' => 'All Fund Classes');
    foreach ($data as $row) {
      if ($row['fund_class_name']) {
        if (strtolower($row['fund_class_name']) == 'general fund')
          $results[$row['fund_class_name'] . ' [' . $row['fund_class_code'] . ']'] = $row['fund_class_name'] . ' [' . $row['fund_class_code'] . ']';
      }
    }
    return array_unique($results);
  } catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}

/**
 * Get Revenue Categories from Data Controller and format into a FAPI select input #options array.
 *
 * @return mixed
 *   Revenue categories and revenue category names
 */
function _revenue_category_options()
{
  try {
    $dataController = data_controller_get_instance();
    $data = $dataController->queryDataset('checkbook:revenue_category', array(
      'revenue_category_code',
      'revenue_category_name',
    ), NULL, 'revenue_category_name');
    $results = array('All Revenue Categories' => 'All Revenue Categories');
    foreach ($data as $row) {
      $results[$row['revenue_category_name'] . ' [' . $row['revenue_category_code'] . ']'] = $row['revenue_category_name'] . ' [' . $row['revenue_category_code'] . ']';
    }
    return array_unique($results);
  } catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}

/**
 * Get Funding Sources from Data Controller and format into a FAPI select input #options array.
 *
 * @return mixed
 *   Funding source codes and funding source names
 */
function _funding_class_options()
{
  try {
    $dataController = data_controller_get_instance();
    $data = $dataController->queryDataset('checkbook:ref_funding_class', array(
      'funding_class_code',
      'funding_class_name',
    ), NULL, 'funding_class_name');
    $results = array('All Funding Classes' => 'All Funding Classes');
    foreach ($data as $row) {
      $results[$row['funding_class_name'] . ' [' . $row['funding_class_code'] . ']'] = $row['funding_class_name'] . ' [' . $row['funding_class_code'] . ']';
    }
    return array_unique($results);
  } catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}

/**
 * @param string $data_source
 * @return array|void
 */
function _funding_source_options($data_source = Datasource::NYCHA)
{
  $options = ['Select Funding Source' => 'Select Funding Source'];
  $menu_options_attributes = ['Select Funding Source' =>['title'=> 'Select Funding Source']];

  switch ($data_source) {
    case Datasource::NYCHA:
      try {
        $dataController = data_controller_get_instance();
        $data = $dataController->queryDataset('checkbook_nycha:funding_source', array(
          'funding_source_code',
          'funding_source_description',
        ), NULL, 'funding_source_description');
        if ($data) {
          foreach ($data as $row) {
            $key = $row['funding_source_description'] . ' [' . $row['funding_source_code'] . ']';
            $options[$key] = _ckbk_excerpt($key);
            $menu_options_attributes[$key] = ['title' => $key];
          }
        }
      } catch (Exception $e) {
        log_error("Error getting data from controller: \n" . $e->getMessage());
        return;
      }
      break;
    default:
      break;
  }
  return [
    'options' => $options,
    'option_attributes' => $menu_options_attributes
  ];
}

/**
 * Get Expense Type from Data Controller and format into a FAPI select input options array.
 *
 * @param string $data_source
 * @return mixed
 *   Spending category codes and display names
 */
function _expense_type_options($data_source = Datasource::CITYWIDE)
{
  try {
    $dataController = data_controller_get_instance();

    switch ($data_source) {
      case Datasource::NYCHA:
        $data = $dataController->queryDataset($data_source . ':spending_category', array(
          'spending_category_code',
          'display_spending_category_name',
        ), null, 'spending_category_code');
        break;
      default:
        $data = $dataController->queryDataset($data_source . ':spending_category', array(
          'spending_category_code',
          'display_name',
          'spending_category_name',
        ), null, 'display_order');
    }

    $results = _checkbook_datafeeds_expense_type_options($data, $data_source);
    return $results;
  } catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}

/**
 * Get the expense type options, for IE8, the text will be shortened to fit the width and a title attribute is there
 * @param $data
 * @param null $data_source
 * @return mixed
 */
function _checkbook_datafeeds_expense_type_options($data, $data_source = null)
{

  //IE8 - handle drop down width issue
  foreach ($data as $row) {
    $option = ($row['spending_category_name'] ?? $row['display_spending_category_name']) . ' [' . $row['spending_category_code'] . ']';
    if ($row['spending_category_code'] == 'ts') {
      $option = 'Total Spending [ts]';
      //Menu options
      $menu_options[''] = 'Total Spending [ts]';
      //Menu option titles
      $menu_options_attributes[$option] = array('title' => $option);
    } else {
      //$display_option = $row['spending_category_name'] ?? $row['display_spending_category_name'];
      //Menu options
      $menu_options[$option] = $option;
      //Menu option titles
      $menu_options_attributes[$option] = array('title' => $option);
    }
  }
  $results['options'] = $menu_options;
  $results['options_attributes'] = $menu_options_attributes;
  return $results;
}

/**
 * Format pay frequencies into a FAPI select input #options array.
 *
 * @return array
 *   Pay frequencies
 */
function _pay_frequency_options()
{
  return array(
    'All Pay Frequencies' => 'Select Pay Frequency',
    'Bi-weekly' => 'Bi-weekly',
    'Monthly' => 'Monthly',
    'Supplemental' => 'Supplemental',
  );
}

/**
 * Get Contract Type from Data Controller and format into a FAPI select input #options array.
 *
 * @return mixed
 *   Agreement type codes and agreement type names
 */
function _contract_type_options()
{
  try {
    $dataController = data_controller_get_instance();
    $data = $dataController->queryDataset('checkbook:agreement_type', array(
      'agreement_type_code',
      'agreement_type_name'
    ), NULL, 'agreement_type_name');
    $results = _checkbook_datafeeds_contract_type_options($data);
    return $results;
  } catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}

/**
 * Get the Contract Type options, for IE8, the text will be shortened to fit the width and a title attribute is there
 *
 * @param $data
 * @return mixed
 */
function _checkbook_datafeeds_contract_type_options($data)
{

  //IE8 - handle drop down width issue
  $title = 'Select Contract Type';
  $menu_options['No Contract Type Selected'] = $title;
  $menu_options_attributes = array($title => array('title' => $title));

  foreach ($data as $row) {
    $option = $row['agreement_type_name'] . ' [' . $row['agreement_type_code'] . ']';
    //Menu options
    $menu_options[$option] = _ckbk_excerpt($option);
    //Menu option titles
    $menu_options_attributes[$option] = array('title' => $option);
  }
  $results['options'] = $menu_options;
  $results['options_attributes'] = $menu_options_attributes;
  return $results;
}

/**
 * Get Award Method from Data Controller and format into a FAPI select input #options array.
 *
 * @return mixed
 *   Award method codes and award method names
 */
function _award_method_options()
{
  try {
    $dataController = data_controller_get_instance();
    $data = $dataController->queryDataset('checkbook:award_method', array(
      'award_method_code',
      'award_method_name',
    ), NULL, 'award_method_name');
    $results = _checkbook_datafeeds_award_method_options($data);
    return $results;
  } catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }
}

/**
 * Get the Award Method options, for IE8, the text will be shortened to fit the width and a title attribute is there
 *
 * @param $data
 * @return mixed
 */
function _checkbook_datafeeds_award_method_options($data)
{

  //IE8 - handle drop down width issue
  $title = 'Select Award Method';
  $menu_options['No Award Method Selected'] = $title;
  $menu_options_attributes = array($title => array('title' => $title));

  foreach ($data as $row) {
    $option = $row['award_method_name'] . ' [' . $row['award_method_code'] . ']';
    //Menu options
    $menu_options[$option] = _ckbk_excerpt($option);
    //Menu option titles
    $menu_options_attributes[$option] = array('title' => $option);
  }
  $results['options'] = $menu_options;
  $results['options_attributes'] = $menu_options_attributes;
  return $results;
}

/**
 * Get Department from Data Controller and format into a FAPI select input #options array.
 *
 * @param $year
 *   Year
 *
 * @param $agency
 *   Agency code
 * @return mixed Department codes and department names filtered by agency, year
 *  Department codes and department names filtered by agency, year
 */
function _budget_dept_options($year, $agency)
{
  $agency = emptyToZero(urldecode($agency));
  if ($agency) {
    $agencystring = " agency_code = '" . $agency . "' ";
    $yearstring = " AND budget_fiscal_year = " . $year . " ";
    $query = "SELECT DISTINCT department_name || ' [' || department_code || ']' department_name FROM budget WHERE"
      . $agencystring . $yearstring . "ORDER BY department_name ASC";
    $results = _checkbook_project_execute_sql($query);
    if (count($results) > 0) {
      foreach ($results as $result) {
        $options[$result['department_name']] = $result['department_name'];
      }
    }
    $matches = array();
    foreach ($options as $key => $value)
      $matches[] = htmlentities($value);
    drupal_json_output($matches);
  }
}

/**
 * Get Expenditure Category from Data Controller and format into a FAPI select input #options array.
 *
 * @param $domain
 * @param $year
 *   Year
 * @param $agency
 *   Agency code
 * @param $dept
 *   Department code
 * @param $dataSource
 * @param $feeds
 * @return mixed Expenditure object codes and expenditure object names, filtered by agency, department, year
 *   Expenditure object codes and expenditure object names, filtered by agency, department, year
 */
function _budget_expcat_options($domain, $year, $agency, $dept, $dataSource = Datasource::CITYWIDE, $feeds = true){
  switch ($dataSource){
    case Datasource::NYCHA :
        $query = "SELECT DISTINCT expenditure_type_description || ' [' || expenditure_type_code || ']' AS expenditure_object_code,
                                  expenditure_type_id, expenditure_type_description
                  FROM {$domain} ORDER BY expenditure_object_code ASC";
        $results = _checkbook_project_execute_sql_by_data_source($query, $dataSource);
        $title = 'Select Expense Category';
        $options[''] = $title;
        $option_attributes = array($title => array('title' => $title));
        foreach ($results as $row) {
          if($feeds) {
            $text = $row['expenditure_object_code'];
            $option_attributes[$text] = array('title' => $text);
            $options[$text] = _ckbk_excerpt($text);
          }else{
            $text = $row['expenditure_type_description'];
            $option_attributes[$row['expenditure_type_id']] = array('title' => $text);
            $options[$row['expenditure_type_id']] = _ckbk_excerpt($text);
          }
        }
        return array('options' => $options, 'option_attributes' => $option_attributes);
      break;
    default:
      $agency = emptyToZero(urldecode($agency));
      $dept = emptyToZero(urldecode($dept));
      if ($agency) {
        $agencyString = " agency_code = '" . $agency . "' ";
        $yearString = ($year) ? " AND budget_fiscal_year = " . ltrim($year, 'FY') . " " : "";
        $deptString = ($dept) ? " AND department_code = '" . $dept . "' " : "";

        $query = "SELECT DISTINCT object_class_name || ' [' || object_class_code || ']' expenditure_object_code  FROM {$domain} WHERE"
          . $agencyString . $yearString . $deptString . "ORDER BY expenditure_object_code ASC";
        $results = _checkbook_project_execute_sql_by_data_source($query, $dataSource);
        $options = array();
        if (count($results) > 0) {
          foreach ($results as $result) {
            $options[$result['expenditure_object_code']] = $result['expenditure_object_code'];
          }
        }
        $matches = array();
        foreach ($options as $key => $value) {
          $matches[] = htmlentities($value);
        }
        drupal_json_output($matches);
      }
  }
}

/**
 * Get Program Phase from Data Controller and format into a FAPI select input #options array.
 * @param $dataSource
 * @param $feeds
 * @return array of Program Phase data
 */
function _budget_program_options($dataSource = Datasource::CITYWIDE, $feeds = true){
  switch ($dataSource){
    case Datasource::NYCHA :
      $query = "SELECT DISTINCT program_phase_description || ' [' || program_phase_code  || ']' AS program,
                  program_phase_description, program_phase_id
                FROM ref_program_phase ORDER BY program ASC";
      $data = _checkbook_project_execute_sql_by_data_source($query, $dataSource);
      $title = 'Select Program';
      $options[''] = $title;
      $option_attributes = array($title => array('title' => $title));
      foreach ($data as $row) {
        if($feeds) {
          $text = $row['program'];
          $option_attributes[$text] = array('title' => $text);
          $options[$text] = _ckbk_excerpt($text);
        }else{
          $text = $row['program_phase_description'];
          $option_attributes[$row['program_phase_id']] = array('title' => $text);
          $options[$row['program_phase_id']] = _ckbk_excerpt($text);
        }
      }
      return array('options' => $options, 'option_attributes' => $option_attributes);
      break;
  }
}

/**
 * Get Program Phase from Data Controller and format into a FAPI select input #options array.
 * @param $dataSource
 * @return array of Program Phase data
 */
function _budget_project_options($dataSource = Datasource::CITYWIDE, $feeds = true){
  switch ($dataSource){
    case Datasource::NYCHA :
      $query = "SELECT gl_project_description || ' [' || gl_project_code  || ']' AS project,
                gl_project_description, gl_project_id FROM ref_gl_project
                WHERE gl_project_code NOT IN ('SP0024','SP0025') ORDER BY gl_project_description ASC";
      $data = _checkbook_project_execute_sql_by_data_source($query, $dataSource);
      $title = 'Select Project';
      $options[''] = $title;
      $option_attributes[''] = array('title' => $title);
      foreach ($data as $row) {
        if($feeds) {
          $text = $row['project'];
          $option_attributes[$text] = array('title' => $text);
          $options[$text] = _ckbk_excerpt($text);
        }else{
          $text = $row['gl_project_description'];
          $option_attributes[$row['gl_project_id']] = array('title' => $text);
          $options[$row['gl_project_id']] = _ckbk_excerpt($text);
        }
      }
      return array('options' => $options, 'option_attributes' => $option_attributes);
      break;
  }
}

/**
 * Get Budget Type from Data Controller and format into a FAPI select input #options array.
 * @param $domain
 * @param $dataSource
 * @param $budgetName
 * @param $json
 * @return array of Budget Type data
 */
function _budget_type_options($domain, $dataSource = Datasource::CITYWIDE, $budgetName = null, $json = false){
  switch ($dataSource){
    case Datasource::NYCHA :
      $where = (isset($budgetName) && !in_array($budgetName, array('Select Budget Name', '', 0, '0'), true)) ? "WHERE budget_name = '". $budgetName ."' ":"";
      $query = "SELECT DISTINCT budget_type FROM {$domain} {$where} ORDER BY budget_type ASC";
      $data = _checkbook_project_execute_sql_by_data_source($query, $dataSource);
      $title = 'Select Budget Type';
      $options[''] = $title;
      $option_attributes = array($title => array('title' => $title));
      $matches = array();
      foreach ($data as $row) {
        $text = $row['budget_type'];
        $option_attributes[$text] = array('title' => $text);
        $options[$text] = _ckbk_excerpt($text);
        if( $text != 'N/A') {
          $matches[] = array('value' => $text, 'text' => $options[$text]);
        }
      }
      if($json) {
        drupal_json_output($matches);
      }else{
        return array('options' => $options, 'option_attributes' => $option_attributes);
      }
      break;
  }
}

/**
 * Get Budget Name from Data Controller and format into a FAPI select input #options array.
 * @param $dataSource
 * @param $budgetType
 * @param $json
 * @return array of Budget Name data
 */
function _budget_name_options($domain, $dataSource = Datasource::CITYWIDE, $budgetType = null, $json = false){
  switch ($dataSource){
    case Datasource::NYCHA :
      $where = (isset($budgetType) && !in_array($budgetType, array('Select Budget Type', '', 0, '0'), true)) ? "WHERE budget_type = '". $budgetType ."' ":"";
      $query = "SELECT DISTINCT budget_name FROM {$domain} {$where} ORDER BY budget_name ASC";
      $data = _checkbook_project_execute_sql_by_data_source($query, $dataSource);
      $title = 'Select Budget Name';
      $options[''] = $title;
      $option_attributes = array($title => array('title' => $title));
      $matches = array();
      foreach ($data as $row) {
        $text = $row['budget_name'];
        $option_attributes[$text] = array('title' => $text);
        $options[$text] = _ckbk_excerpt($text);
        if($text != 'N/A') {
          $matches[] = array('value' => $text, 'text' => $options[$text]);
        }
      }
      if($json) {
        drupal_json_output($matches);
      }else{
        return array('options' => $options, 'option_attributes' => $option_attributes);
      }
      break;
  }
}
/**
 * Get Department from Data Controller and format into a FAPI select input #options array.
 *
 * @param $agency
 *   Agency code
 * @param $sc
 *   Spending category
 * @param $year
 *   Year
 * @param $data_source
 *   optional parameter to specify the data source (i.e. checkbook, checkbook_oge)
 *
 * @return array
 *  Department codes and department names filtered by agency, spending category, year
 */
function _dept_options($agency, $sc, $year, $data_source = null)
{
  switch ($data_source) {
    case Datasource::OGE:
      $agency = emptyToZero($agency);
      $sc = emptyToZero($sc);
      if ($year && startsWith($year, 'F')) {
        $year = ltrim($year, 'FY');
        $yearstring = "AND disbursement_line_item_details.fiscal_year = '" . $year . "' ";
      } elseif ($year && startsWith($year, 'C')) {
        $year = ltrim($year, 'CY');
        $yearstring = "AND disbursement_line_item_details.calendar_fiscal_year = '" . $year . "' ";
      }
      if ($agency) {
        $agencystring = "AND disbursement_line_item_details.agency_code = '" . $agency . "' ";
      }
      if ($sc) {
        $scstring = "AND ref_spending_category.spending_category_code = '" . $sc . "' ";
      }
      $query = "SELECT DISTINCT department_name || ' [' || department_code || ']' department_name FROM disbursement_line_item_details, ref_spending_category WHERE disbursement_line_item_details.spending_category_id = ref_spending_category.spending_category_id " . $agencystring . $yearstring . $scstring . "ORDER BY department_name ASC";
      $data = _checkbook_project_execute_sql_by_data_source($query, $data_source);
      $results = _checkbook_datafeeds_dept_options($data, $data_source);
      break;
    default:
      $agency = emptyToZero($agency);
      $sc = emptyToZero($sc);
      if ($year && startsWith($year, 'F')) {
        $year = ltrim($year, 'FY');
        $yearstring = "AND disbursement_line_item_details.fiscal_year = '" . $year . "' ";
      } elseif ($year && startsWith($year, 'C')) {
        $year = ltrim($year, 'CY');
        $yearstring = "AND disbursement_line_item_details.calendar_fiscal_year = '" . $year . "' ";
      }
      if ($agency) {
        $agencystring = "AND disbursement_line_item_details.agency_code = '" . $agency . "' ";
      }
      if ($sc) {
        $scstring = "AND ref_spending_category.spending_category_code = '" . $sc . "' ";
      }
      $query = "SELECT DISTINCT department_name || ' [' || department_code || ']' department_name FROM disbursement_line_item_details, ref_spending_category WHERE disbursement_line_item_details.spending_category_id = ref_spending_category.spending_category_id " . $agencystring . $yearstring . $scstring . "ORDER BY department_name ASC";
      $data = _checkbook_project_execute_sql($query);
      $results = _checkbook_datafeeds_dept_options($data, $data_source);
      break;
  }
  return $results;
}

/**
 * Get the department options, for IE8, the text will be shortened to fit the width and a title attribute is there
 * @param $data
 * @param null $data_source
 * @return mixed
 */
function _checkbook_datafeeds_dept_options($data, $data_source = null)
{

  //IE8 - handle drop down width issue
  $title = 'Select Department';
  $menu_options[''] = $title;
  $menu_options_attributes = array($title => array('title' => $title));

  foreach ($data as $row) {
    $option = $row['department_name'];
    //Menu options
    $menu_options[$option] = _ckbk_excerpt($option);
    //Menu option titles
    $menu_options_attributes[$option] = array('title' => $option);
  }
  $results['options'] = $menu_options;
  $results['options_attributes'] = $menu_options_attributes;
  return $results;
}

/**
 * Get Expenditure Category from Data Controller and format into a FAPI select input #options array.
 *
 * @param $agency
 *   Agency code
 * @param $dept
 *   Department code
 * @param $sc
 *   Spending category code
 * @param $year
 *   Year
 *
 * @param null $data_source
 * @return array
 *   Expenditure object codes and expenditure object names, filtered by agency, department, spending category, year
 */
function _expcat_options($agency, $dept, $sc, $year, $data_source = null)
{
  switch ($data_source) {
    case Datasource::OGE:
      $agency = emptyToZero($agency);
      $dept = emptyToZero($dept);
      $sc = emptyToZero($sc);
      if ($year && startsWith($year, 'F')) {
        $year = ltrim($year, 'FY');
        $yearstring = "AND disbursement_line_item_details.fiscal_year = '" . $year . "' ";
      } elseif ($year && startsWith($year, 'C')) {
        $year = ltrim($year, 'CY');
        $yearstring = "AND disbursement_line_item_details.calendar_fiscal_year = '" . $year . "' ";
      }
      if ($agency) {
        $agencystring = "AND disbursement_line_item_details.agency_code = '" . $agency . "' ";
      }
      if ($sc) {
        $scstring = "AND ref_spending_category.spending_category_code = '" . $sc . "' ";
      }
      if ($dept) {
        $deptstring = "AND disbursement_line_item_details.department_code = '" . $dept . "' ";
      }
      $query = "SELECT DISTINCT expenditure_object_name|| '[' || expenditure_object_code || ']' expenditure_object_code
                FROM disbursement_line_item_details, ref_spending_category
                WHERE disbursement_line_item_details.spending_category_id = ref_spending_category.spending_category_id "
                . $yearstring . $agencystring . $scstring . $deptstring . "ORDER BY expenditure_object_code ASC";
      $data = _checkbook_project_execute_sql_by_data_source($query, Datasource::OGE);
      break;

    default:
      $agency = emptyToZero($agency);
      $dept = emptyToZero($dept);
      $sc = emptyToZero($sc);
      if ($year && startsWith($year, 'F')) {
        $year = ltrim($year, 'FY');
        $yearstring = "AND disbursement_line_item_details.fiscal_year = '" . $year . "' ";
      } elseif ($year && startsWith($year, 'C')) {
        $year = ltrim($year, 'CY');
        $yearstring = "AND disbursement_line_item_details.calendar_fiscal_year = '" . $year . "' ";
      }
      if ($agency) {
        $agencystring = "AND disbursement_line_item_details.agency_code = '" . $agency . "' ";
      }
      if ($sc) {
        $scstring = "AND ref_spending_category.spending_category_code = '" . $sc . "' ";
      }
      if ($dept) {
        $deptstring = "AND disbursement_line_item_details.department_code = '" . $dept . "' ";
      }
      $query = "SELECT DISTINCT expenditure_object_name|| '[' || expenditure_object_code || ']' expenditure_object_code
                FROM disbursement_line_item_details, ref_spending_category
                WHERE disbursement_line_item_details.spending_category_id = ref_spending_category.spending_category_id "
                . $yearstring . $agencystring . $scstring . $deptstring . "ORDER BY expenditure_object_code ASC";
      $data = _checkbook_project_execute_sql($query);
      break;
  }
  $results = _checkbook_datafeeds_expcat_options($data, $data_source);
  return $results;
}


/**
 * Get the expense category options, for IE8, the text will be shortened to fit the width and a title attribute is there
 * @param $data
 * @param null $data_source
 * @return mixed
 */
function _checkbook_datafeeds_expcat_options($data, $data_source = null){
  //IE8 - handle drop down width issue
  $title = 'Select Expense Category';
  $menu_options[''] = $title;
  $menu_options_attributes = array($title => array('title' => $title));

  foreach ($data as $row) {
    $option = $row['expenditure_object_code'];
    //Menu options
    $menu_options[$option] = _ckbk_excerpt($option);
    //Menu option titles
    $menu_options_attributes[$option] = array('title' => $option);
  }
  $results['options'] = $menu_options;
  $results['options_attributes'] = $menu_options_attributes;
  return $results;
}

/**
 * Get mwbe category name and id using mapping
 *
 * Total M/WBE 2,3,4,5,7,9,11
 * Asian American 4,5
 * Black American 2
 * Women 9
 * Hispanic American 3
 * Emerging ?
 * Non-M/WBE 7
 * Individuals and Others 11
 * @return array
 */
function _mwbe_category_options()
{
  $minority_cat_map = MappingUtil::getMinorityCategoryMappings();
  $results = array('' => 'Select Category');
  foreach ($minority_cat_map as $category => $minority_types) {
    $results[implode('~', $minority_types)] = $category;
  }
  return $results;
}

/**
 * Get the industry type name and id using the data controller
 * @param string $data_source
 * @return array|void
 */
function _industry_options($data_source = Datasource::CITYWIDE)
{
  $industries = ['Select Industry'];

  $industry_id_column = 'industry_type_id';
  $industry_name_column = 'industry_type_name';
  if (Datasource::NYCHA == $data_source) {
    $industry_id_column = 'industry_type_code';
    $industry_name_column = 'display_industry_type_name';
  }

  try {
    $dataController = data_controller_get_instance();
    $industry_types = $dataController->queryDataset($data_source.':industry_type', array($industry_id_column, $industry_name_column), NULL, $industry_name_column);
    foreach ($industry_types as $industry_type) {
      $industries[$industry_type[$industry_name_column] . ' [' . $industry_type[$industry_id_column] . ']'] = $industry_type[$industry_name_column] . ' [' . $industry_type[$industry_id_column] . ']';
    }
  } catch (Exception $e) {
    log_error("Error getting data from controller: \n" . $e->getMessage());
    return;
  }

  return $industries;
}

/**
 * Submit handler for Download Data button.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_confirmation_download_submit($form, &$form_state)
{
  $data = $form_state['step_information']['confirmation']['response'];
  global $conf;
  $query_records_limit = $conf['check_book']['data_feeds']['query_records_limit'] ?? 10000;

  //Store request in db
  $criteria = $form_state['step_information']['confirmation']['stored_values']['criteria'];
  unset($criteria['global']['max_records']);
  $responsetype = $form_state['step_information']['type']['stored_values']['format'];
  $searchCriteria = new QueueCriteria($criteria, $responsetype);
  $user_criteria = $form_state['step_information']['confirmation']['stored_values']['user_criteria'];
  $searchCriteria->setUserCriteria($user_criteria);
  try {
    $checkBookApi = new CheckBookAPI($searchCriteria);
  } catch (Exception $e) {
    drupal_set_message('An error occurred processing your request. Please try again later.', 'error');
    log_error($e->getMessage());
  }

  $record_count = $checkBookApi->getRecordCount();
  if ($record_count <= $query_records_limit) {
    LogHelper::log_notice("DataFeeds :: <=" . $query_records_limit);
    if (isset($checkBookApi)) {
      if ($checkBookApi->validateRequest()) {
        try {
          //Make sure e-mail address is passed to the call.
          $details = $checkBookApi->queueImmediateRequest();
        } catch (Exception $e) {
          log_error($e->getMessage());
        }
      } else {
        log_error($checkBookApi->getErrorResponse());
      }
    }

    if ($form_state['step_information']['type']['stored_values']['format'] == 'xml') {
      drupal_add_http_header('Content-Type', 'text/xml; utf-8');
      drupal_add_http_header('Content-Disposition', 'attachment; filename="nyc-data-feed.xml"');
      echo $data;
      module_invoke_all('exit');
      exit;
    } elseif ($form_state['step_information']['type']['stored_values']['format'] == 'csv') {
      drupal_add_http_header('Content-Type', 'text/csv; utf-8');
      drupal_add_http_header('Content-Disposition', 'attachment; filename="nyc-data-feed.csv"');
      echo $data;
      module_invoke_all('exit');
      exit;
    }
  } else {
    LogHelper::log_notice("DataFeeds :: >" . $query_records_limit);
    if (isset($checkBookApi)) {
      if ($checkBookApi->validateRequest()) {
        try {
          // Output file
          $filename = $form_state['step_information']['confirmation']['filename'];
          if ($filename) {
            $checkBookApi->outputFile($filename);
          }
        } catch (Exception $e) {
          log_error($e->getMessage());
        }
      } else {
        log_error($checkBookApi->getErrorResponse());
      }
    } else {
      LogHelper::log_notice("DataFeeds :: >" . $query_records_limit . " :: \$checkBookApi not set");
    }
    module_invoke_all('exit');
    exit;
  }
}

/**
 * Submit handler for Confirm button; queues a data request.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_confirmation_queue_submit($form, &$form_state)
{

  $response_type = $form_state['step_information']['type']['stored_values']['format'];
  $email = $form_state['values']['email_address'];
  $criteria = $form_state['step_information']['confirmation']['stored_values']['criteria'];

  //Update Criteria with overridden column order on export only
  $domain = strtolower($criteria['global']['type_of_data']);
  //Contracts Only
  if ($domain == 'contracts') {
    $data_source = Datasource::CITYWIDE;
    $category = $criteria['value']['category'];
    $status = $criteria['value']['status'];
    $year = $criteria['value']['fiscal_year'];
    $intended_order = _checkbook_datafeeds_contracts_override_column_options($response_type, $data_source, $status, $category, $year);
    $criteria['responseColumns'] = checkbook_datafeeds_override_column_order($criteria['responseColumns'], $intended_order);
  }

  unset($criteria['global']['max_records']);
  $searchCriteria = new QueueCriteria($criteria, $response_type);
  $user_criteria = $form_state['step_information']['confirmation']['stored_values']['user_criteria'];
  $searchCriteria->setUserCriteria($user_criteria);


  try {
    $checkBookApi = new CheckBookAPI($searchCriteria);
  } catch (Exception $e) {
    drupal_set_message('An error occurred processing your request. Please try again later.', 'error');
    log_error($e->getMessage());
  }
  if (isset($checkBookApi)) {
    if ($checkBookApi->validateRequest()) {
      try {
        //Make sure e-mail address is passed to the call.
        $details = $checkBookApi->queueRequest($email);
      } catch (Exception $e) {
        log_error($e->getMessage());
      }
    } else {
      log_error($checkBookApi->getErrorResponse());
    }
  }
  $current_step = &$form_state['step'];
  $form_state['step_information']['queue']['stored_values'] = $form_state['values'];
  if ($details) {
    $form_state['step_information']['queue']['stored_values']['details'] = $details;
  }
  $current_step = 'queue_final';
  if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  } else {
    $form_state['values'] = array();
  }
  $form_state['rebuild'] = TRUE; // Force rebuild with next step.
}

/**
 * Final confirmation page after queueing a request.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 *
 * @return array
 *   Renderable array confirming request has been queued
 */
function checkbook_datafeeds_queue_final($form, &$form_state)
{
  drupal_set_title('Thank You');
  $email = $form_state['step_information']['queue']['stored_values']['email_address'];
  $token = $form_state['step_information']['queue']['stored_values']['details']['token'];
  $status = $form_state['step_information']['queue']['stored_values']['details']['status'];
  if ($email) {
    $email_message = '<strong>Thank You</strong><br /><br />Your request has been received.<br /><br />You will receive a confirmation email for the request created at ' . $email . ' with the tracking number.  You will also receive another email with the link to download the data feed once the request is completed.<br /><br />Please note that due to a possible high number of requests, there may be a delay in notification.<br /><br />You can track the status of your request by entering your tracking number: <strong>' . $token . '</strong>&nbsp;in the "Track Status of Data Feed" box on this page.<br /><br />You will have 7 days to use this tracking number to return to your results.<br /><br />';
    $form['text'] = array(
      '#markup' => $email_message . checkbook_datafeeds_get_confirmation_search_criteria_message($form_state),
    );
    if ($status == '2') {
      $request = QueueUtil::getPendingEmailInfo($token);
      global $conf;
      $dir = variable_get('file_public_path', 'sites/default/files')
        . '/' . $conf['check_book']['data_feeds']['output_file_dir'];

      $file = $dir . '/' . $request[0]['filename'];
      $params = array(
        "download_url" => $file,
        "download_url_compressed" => $file . '.zip',
        "expiration_date" => date('d-M-Y', $request[0]['end_time'] + 3600 * 24 * 7),
        "contact_email" => $request[0]['contact_email'],
        "tracking_num" => $request[0]['token'],
      );
      LogHelper::log_debug($params);
      $response = drupal_mail('checkbook_datafeeds', "download_notification", $request[0]['contact_email'], NULL, $params);
      LogHelper::log_debug($response);
      if ($response['result']) {
        QueueUtil::updateJobRequestEmailStatus($request[0]['rid']);
      }
    }
  } else {
    $email_message = '<strong>Thank You</strong><br /><br />Your request has been received.<br /><br />You can track the status of your request by entering your tracking number <strong>' . $token . '</strong>&nbsp;in the "Track Status of Data Feed" box on this page.<br /><br />Please note that due to a possible high number of requests, there may be delay in notification.<br /><br />You will have 7 days to use this tracking number to return to your results.<br /><br />';
    $form['text'] = array(
      '#markup' => $email_message . checkbook_datafeeds_get_confirmation_search_criteria_message($form_state),
    );
  }
  return $form;
}

/**
 * Function will parse the form the get the search criteria text to show in the confirmation screens/email
 *
 * @param $form_state
 * @return string
 */
function checkbook_datafeeds_get_confirmation_search_criteria_message($form_state)
{

  $formatted_search_criteria = $form_state['step_information']['confirmation']['stored_values']['user_criteria']['Formatted'];

  $message = 'Below is the search criteria of your request for your reference:<br />';
  foreach ($formatted_search_criteria as $key => $value) {
    $message .= "<strong>{$key}</strong>:&nbsp;{$value}<br />";
  }
  return $message;
}


/**
 * A function used in range parameters to replace empty values with NULL.
 *
 * @param string $value
 *
 * @return null
 */
function checknull($value)
{
  if ($value === '') {
    $value = NULL;
  }
  return $value;
}

/**
 * Submit handler for Previous button on second step of wizard; returns the user to first page of wizard.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function previous_submit($form, &$form_state)
{
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  $current_step = 'type';
  $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Generates the end of a confirmation page based on number of results returned by API.
 *
 * @param $form
 *   Data Feeds wizard form array
 * @param $form_state
 *   Data Feeds wizard form_state array
 * @param $criteria
 *   Search criteria
 * @param $responsetype
 *   Response type (csv or xml)
 * @param $domain
 *   Domain
 *
 * @return array
 *   Renderable array of results from Data Controller request
 */
function checkbook_datafeeds_end_of_confirmation_form($form, &$form_state, $criteria, $responsetype, $domain)
{
  $searchCriteria = new SearchCriteria($criteria, $responsetype);
  global $conf;
  $query_records_limit = $conf['check_book']['data_feeds']['query_records_limit'] ?? 10000;
  $max_record_limit = $conf['check_book']['data_feeds']['max_record_limit'] ?? 200000;

  try {
    $checkBookApi = new CheckBookAPI($searchCriteria);
  } catch (Exception $e) {
    drupal_set_message('An error occurred processing your request. Please try again later.', 'error');
    log_error($e->getMessage());
  }
  if (isset($checkBookApi)) {
    if ($checkBookApi->validateRequest()) {
      $recordcount = $checkBookApi->getRecordCount();
    } else {
      drupal_set_message('An error occurred.', 'error');
      log_error($checkBookApi->getErrorResponse());
    }
  }
  if ($recordcount == 0) {
    $form['count'] = array(
      '#type' => 'fieldset',
    );
    $form['count']['no_records'] = array(
      '#markup' => 'There are no records for the search criteria.',
    );
    $form['start_over'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
    );
  } elseif ($recordcount > 0 && $recordcount < $max_record_limit) {
    /**
     * see docs
     * http://wiki.reisys.com:8080/display/USASv2/Data+Feeds+Documentation
     */
    if (isset($checkBookApi)) {
      if ($checkBookApi->validateRequest()) {
        if ($recordcount <= $query_records_limit) {
          LogHelper::log_notice("DataFeeds :: <=" . $query_records_limit . " :: generatingData()");
          $form_state['step_information']['confirmation']['response'] = $checkBookApi->getData();
        } else {
          LogHelper::log_notice("DataFeeds :: >" . $query_records_limit . " :: generatingFile()");
          $filename = $checkBookApi->generateFile();
          $form_state['step_information']['confirmation']['filename'] = $filename;
        }
      } else {  // invalid request
        $form_state['step_information']['confirmation']['response'] = $checkBookApi->getErrorResponse();
      }
    }
    $form['count'] = array(
      '#markup' => '<div class="records-result">There are ' . number_format($recordcount) . ' records for the selected filter criteria.</div>',
    );
    $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Previous'),
      '#name' => 'prev',
      '#submit' => array('checkbook_datafeeds_' . $domain . '_confirmation_previous_submit'),
      '#limit_validation_errors' => array(),
    );
    $form['download'] = array(
      '#type' => 'submit',
      '#value' => t('Download Data'),
      '#submit' => array('checkbook_datafeeds_confirmation_download_submit'),
    );
    $form['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
    );
  } else {  // > 200,000
    $form_state['step_information']['confirmation']['stored_values']['user_criteria']['Record Count'] = $recordcount;
    $form['count'] = array(
      '#type' => 'fieldset',
    );
    $form['count']['count_message'] = array(
      '#markup' => '<div><p>Please note this request has <strong>' . number_format($recordcount) . ' transactions</strong>.  It will be queued to be generated in the background.</p><p>If you decide to proceed, please confirm the transaction below.  Upon confirmation, a tracking number will be generated for the user to track the status of the request.</p></div>',
    );
    $form['email'] = array(
      '#type' => 'fieldset',
    );
    $form['email']['email_text'] = array(
      '#markup' => '<div><p>You can also provide your e-mail address for notification when the data is ready to be downloaded.  Please note, providing email address is optional.</p></div>',
    );
    $form['email']['email_address'] = array(
      '#type' => 'textfield',
      '#title' => 'Enter E-mail:',
    );
    $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Previous'),
      '#name' => 'prev',
      '#submit' => array('checkbook_datafeeds_' . $domain . '_confirmation_previous_submit'),
      '#limit_validation_errors' => array(),
    );
    $form['confirm'] = array(
      '#type' => 'submit',
      '#value' => t('Confirm'),
      '#validate' => array('checkbook_datafeeds_validate_queue'),
      '#submit' => array('checkbook_datafeeds_confirmation_queue_submit'),
    );
    $form['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
    );
  }
  return $form;
}

/**
 * Validates an email before adding to a queue request.
 *
 * @param array $form
 *   Data Feeds wizard form array
 * @param array $form_state
 *   Data Feeds wizard form_state array
 */
function checkbook_datafeeds_validate_queue($form, &$form_state)
{
  if ($form_state['values']['email_address']) {
    $valid = valid_email_address($form_state['values']['email_address']);
    if (!$valid) {
      form_set_error('email_address', 'E-mail address is not valid. Please enter a valid email address');
    }
  }
}

/**
 * Convert bytes to human-readable amounts.
 *
 * @param int $bytes
 *   Number of bytes
 *
 * @return string
 *   Formatted human readable number of bytes
 */
function format_bytes($bytes)
{
  if ($bytes == 0) {
    return '0 B';
  } elseif ($bytes < 1024) {
    return $bytes . ' B';
  } elseif ($bytes < 1048576) {
    return round($bytes / 1024, 2) . ' kB';
  } elseif ($bytes < 1073741824) {
    return round($bytes / 1048576, 2) . ' MB';
  } elseif ($bytes < 1099511627776) {
    return round($bytes / 1073741824, 2) . ' GB';
  } else {
    return round($bytes / 1099511627776, 2) . ' TB';
  }
}

/**
 * Check whether a date is valid using RegEx
 *
 * @param string $date
 *   Date string
 *
 * @return bool
 *   TRUE if valid, FALSE if not
 */
function checkDateFormat($date)
{
  // Match the format of the date:
  if (preg_match("/^([0-9]{4})-([0-9]{2})-([0-9]{2})$/", $date, $parts)) {
    // Check whether the date is valid:
    if (checkdate($parts[2], $parts[3], $parts[1])) {
      return TRUE;
    } else {
      return FALSE;
    }
  } else {
    return FALSE;
  }
}

/**
 * Maintains the selected column order
 *
 * @param null $domain
 * @param null $data_source
 * @return array
 *   re-ordered columns
 */
function checkbook_datafeeds_format_columns($domain = null, $data_source = null)
{
  //Used to maintain the order of the columns
  $hidden_selected_values = $_POST['hidden_multiple_value']; //get the values from the hidden field
  if ($domain == Domain::$CONTRACTS && $data_source == Datasource::NYCHA) {
    $year = $_POST['nycha_year'];
  } else {
    $year = $_POST['year'];
  }
  if ($year == 'ALL') {
    if (strpos($hidden_selected_values, "|year|")) {
      $hidden_selected_values = str_replace("|year|", "", $hidden_selected_values);
    }
    if (strpos($hidden_selected_values, "|Year|")) {
      $hidden_selected_values = str_replace("|Year|", "", $hidden_selected_values);
    }
  }
  $array_selected_values = explode("|", $hidden_selected_values); //convert the values into array
  $filter_array = array_filter($array_selected_values); //remove empty index

  $selected_columns = array();
  foreach ($filter_array as $column) {
    $selected_columns[$column] = $column;
  }
  return $selected_columns;
}

/*
 * Function to hook into link to download the zip file for the data feeds from the server.
 * Used to track number of users that have downloaded the file.
 */
/**
 * @param $token
 * @return null
 */
function checkbook_datafeeds_download_zip_ajax($token)
{
  QueueUtil::incrementDownloadCount($token);
  return null;
}

/**
 * Output download links and expiration date message.
 *
 * @param array $results
 *   Result from tracking page request
 *
 * @return array
 *   Renderable array that outputs file paths and expiration dates
 */
function checkbook_datafeeds_file_download_page($results)
{
  global $conf;
  $datestamp = strtotime($results['file_generated_time'] . ' + 1 week');
  $expiration = date('F j, Y g:ia', $datestamp);
  $output = array();
  $output['status-fieldset'] = array(
    '#type' => 'fieldset',
  );
  $filesize = filesize($results['file_path']);
  $file_name = $conf['check_book']['data_feeds']['site_url'] . '/' . $results['file_path'];
  $output['status-fieldset']['uncompressed'] = array(
    '#markup' => '<strong>Status:</strong><br>The file is ready for download: <a href="/' . $results['file_path'] . '" class="link-download-datafeeds-zip" oncontextmenu="return false;">' . $file_name . '</a> (' . format_bytes($filesize) . ')',
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  $output['status-fieldset']['available_date'] = array(
    '#markup' => 'Your files will be available until ' . $expiration,
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  return $output;
}

/**
 * Implementation of hook_mail().
 * @param $key
 * @param $message
 * @param $params
 */
function checkbook_datafeeds_mail($key, &$message, $params)
{
  switch ($key) {
    case "download_notification":
      checkbook_datafeeds_download_notification($key, $message, $params);
      break;
    case "confirmation_notification":
      checkbook_datafeeds_confirmation_notification($key, $message, $params);
      break;
  }
}

/**
 * Function to implement the hook_mail function for data feeds download email notification
 * @param $key
 * @param $message
 * @param $params
 */
function checkbook_datafeeds_download_notification($key, &$message, $params)
{
  global $conf;
  $user_criteria = $params['user_criteria'];
  $search_criteria = "";
  foreach ($user_criteria['Formatted'] as $key => $value) {
    $search_criteria .= "{$key}: {$value} \n";
  }
  $variables['@tracking_num'] = $params['tracking_num'];
  $variables['@expiration_date'] = $params['expiration_date'];
  $variables['@download_link'] = $conf['check_book']['data_feeds']['site_url'] . "/" . "track-data-feed?code=" . $params['tracking_num'];
  $variables['@search_criteria'] = $search_criteria;

  $message['subject'] = "Your requested file is ready for download";
  $message['body'][] = t("
Your data feed is ready to download.  Please click the following link to download the results: \n
@download_link \n
The file is available to download until @expiration_date \n
You had provided your email address at Checkbook NYC for notification when the data feed with the tracking number @tracking_num was ready to be downloaded. \n
Below is the search criteria of the request for your reference:
@search_criteria", $variables);

}

/**
 * Function to implement the hook_mail function for data feeds confirmation email notification
 * @param $key
 * @param $message
 * @param $params
 */
function checkbook_datafeeds_confirmation_notification($key, &$message, $params)
{
  $user_criteria = $params['user_criteria'];
  $search_criteria = "";
  foreach ($user_criteria['Formatted'] as $key => $value) {
    $search_criteria .= "{$key}: {$value} \r\n";
  }
  $email = $params['email'];
  if (filter_var($email, FILTER_VALIDATE_EMAIL)) {

    $tracking_number = $params['tracking_number'];

    $body = "Thank You \n\nYour request has been received. \n\n";
    $body .= "Here is the tracking number: {$tracking_number} for the request. You can track the status of your request by entering your tracking number in the \"Track Status of Data Feed\" box on Data feeds page. \n\n";

    global $conf;
    if (isset($conf['check_book']['data_feeds']['site_url'])) {
      $download_link = $conf['check_book']['data_feeds']['site_url'] . "/" . "track-data-feed?code=" . $tracking_number;
      $body .= "Or just use this direct url: \n{$download_link}  \n\n";
    }
    $body .= "You will have 7 days to use this tracking number to return to your results. \n\n";
    $body .= "You will receive another email at {$email} when requested data feed is ready. \n\n";
    $body .= "Please note that due to a possible high number of requests, there may be a delay in notification. \n\n";
    $body .= "Below is the search criteria of the request for your reference: \n{$search_criteria} \n";

    $message['subject'] = "Your data feeds request is submitted";
    $message['body'][] = $body;
  }
}

/**
 * Gets the created date for records within a domain to display at the top of Data Feeds page.
 *
 * @param string $domain
 *   Domain
 *
 * @return string
 *   Formatted date from domain's created_date column
 */
function _checkbook_datafeeds_get_updated_date($domain)
{
  switch ($domain) {
    case 'spending':
      $query = ('SELECT MAX(COALESCE(created_date)) FROM {disbursement}');
      break;

    case 'contracts':
      $query = ('SELECT MAX(COALESCE(created_date)) FROM {history_agreement}');
      break;

    case 'payroll':
      $query = ('SELECT MAX(COALESCE(created_date)) FROM {payroll}');
      break;
    case 'budget':
      $query = ('SELECT MAX(COALESCE(updated_date, created_date)) FROM {budget}');
      break;
    case 'revenue':
      $query = ('SELECT MAX(COALESCE(last_modified_date)) FROM {revenue_details}');
      break;
  }
  $results = _checkbook_project_execute_sql($query);
  $max = $results[0]['max'];
  $date = date('F j, Y h:ia', strtotime($max));
  return $date;
}
