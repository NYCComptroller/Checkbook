{
    "stickyHeader":true,
    "widgetType": "data_tables",
    "widgetSubType": "dataTableList",
    "cleanURLParameters":["agency","year","calyear","yeartype","month","title","grosspayytd","annualsalary","overtimepayment","emptype","ratetype"],
    "urlParamMap":{
        "agency":"agency_id",
        "year":"fiscal_year_id",
        "calyear":"fiscal_year_id",
        "yeartype":"type_of_year",
        "month":"month_id",
        "title":"civil_service_title_code.civil_service_title_code",
        "grosspayytd":"gross_pay.gross_pay",
        "annualsalary":"annual_salary.annual_salary",
        "overtimepayment":"overtime_pay.overtime_pay",
        "emptype":"employment_type.employment_type",
        "ratetype": "amount_basis_name.amount_basis_name"
    },
    "paramTypeConfig":{
        "grosspayytd":"rangeid3",
        "annualsalary":"rangeid3",
        "overtimepayment":"rangeid3"
    },
    "allowRequestParams":["dtsmnid","smnid"],
    "defaultParameters":{"type_of_year":"B"},
    "header":"
        $header = NULL;
        $header .= widget_data_tables_export_link($node);
        return $header;
    ",
    "getTotalDataCount":true,
    "limit":"35",
    "stickyHeader":true,
    "noDataInitialLoad":true,
    "html_class": "initiative-table transaction-table",
    "no_results_content":"No Results Found",
    "dataset": "checkbook:payroll_employee_agency",
    "preProcessConfiguration":"
    $datasource = RequestUtilities::getRequestParamValue('datasource');
    if($datasource=='checkbook_nycha'){
    $node->widgetConfig->dataset='checkbook_nycha:payroll_employee_agency_basis';
     }
    ",
    "uniqueSortColumn":["employee_employee"],
    "columns": ["agency.agency", "agency.agency.agency_short_name", "agency.agency.agency_name", "pay_date.pay_date",
                "civil_service_title.civil_service_title","civil_service_title_code.civil_service_title_code", "year_type.year_type", "year.year",
                "employee.employee", "employee_number.employee_number", "employment_type.employment_type", "max_hourly_rate", "max_daily_wage",
                "total_salaried_amount","total_non_salaried_amount","total_gross_pay","total_base_salary","total_other_payments","total_overtime_amount"],
    "derivedColumns": {
        "employee_name_formatted": {
          "expression": "_get_tooltip_markup($row['civil_service_title_civil_service_title'],30)"
        },
        "employee_name_link": {
          "expression": "'<a href=/payroll/title_landing' . _checkbook_project_get_year_url_param_string() . '/title/' . $row['civil_service_title_code_civil_service_title_code'] . '>'. $row['employee_name_formatted'] .'</a>'"
        },
        "agency_name_formatted": {
          "expression": "_get_tooltip_markup($row['agency_agency_agency_name'],30)"
        },
        "formatted_salary_amount": {
          "expression": " isset($row['total_salaried_amount']) ? custom_number_formatter_basic_format($row['total_salaried_amount'])  : '-'  "
        },
        "annual_salary_link": {
          "expression": "isset($row['total_salaried_amount']) ? '<a class =\"bottomContainerReload\" href=/panel_html/payroll_employee_transactions/payroll/employee/transactions/agency/' . $row['agency_agency'] . _checkbook_project_get_year_url_param_string() . RequestUtilities::_getUrlParamString('datasource') . '/salamttype/1/abc/' . $row['employee_employee'] . '>'. $row['formatted_salary_amount'] .'</a>' : '-'"
        },
        "formatted_non_salary_amount": {
          "expression": " isset($row['total_non_salaried_amount']) ? custom_number_formatter_basic_format($row['total_non_salaried_amount']) : '-'"
        },
        "non_salary_link": {
          "expression": " isset($row['total_non_salaried_amount']) ? '<a class =\"bottomContainerReload\" href=/panel_html/payroll_employee_transactions/payroll/employee/transactions/agency/' . $row['agency_agency'] . _checkbook_project_get_year_url_param_string() . RequestUtilities::_getUrlParamString('datasource')  . '/salamttype/2~3/abc/' . $row['employee_employee'] . '>'. $row['formatted_non_salary_amount'] .'</a>' : '-'"
        },
        "formatted_daily_wage_amount": {
          "expression": " isset($row['max_daily_wage']) ? custom_number_formatter_basic_format($row['max_daily_wage']) : '-'"
        },
        "formatted_hourly_rate_amount": {
          "expression": " isset($row['max_hourly_rate']) ? custom_number_formatter_basic_format($row['max_hourly_rate']) : '-'"
        },
        "daily_wage_link": {
          "expression": " isset($row['max_daily_wage']) ? '<a class =\"bottomContainerReload\" href=/panel_html/payroll_employee_transactions/payroll/employee/transactions/agency/' . $row['agency_agency'] . _checkbook_project_get_year_url_param_string() . RequestUtilities::_getUrlParamString('datasource')  . '/salamttype/2~3/abc/' . $row['employee_employee'] . '>'. $row['formatted_daily_wage_amount'] .'</a>' : '-'"
        },
        //NYCHA Daily Wage Link - Show hyphen when the amount is zero
        "nycha_daily_wage_link": {
          "expression": " (isset($row['max_daily_wage']) && $row['max_daily_wage'] > 0) ? $row['daily_wage_link'] : '-'"
        },
        "hourly_rate_link": {
          "expression": " isset($row['max_hourly_rate']) ? '<a class =\"bottomContainerReload\" href=/panel_html/payroll_employee_transactions/payroll/employee/transactions/agency/' . $row['agency_agency'] . _checkbook_project_get_year_url_param_string() . RequestUtilities::_getUrlParamString('datasource')  . '/salamttype/2~3/abc/' . $row['employee_employee'] . '>'. $row['formatted_hourly_rate_amount'] .'</a>' : '-'"
        },
        //NYCHA Hourly Rate Link - Show hyphen when the amount is zero
        "nycha_hourly_rate_link": {
          "expression": " (isset($row['max_hourly_rate']) && $row['max_hourly_rate'] > 0) ? $row['hourly_rate_link'] : '-'"
        },
        "export_salary_amount": {
          "expression": " $row['employment_type_employment_type'] == 'Salaried' ? $row['total_salaried_amount']  : NULL "
        },
        "export_non_salary_amount": {
          "expression": " $row['employment_type_employment_type'] == 'Salaried' ? NULL : $row['total_non_salaried_amount']"
        },
        "formatted_gross_pay_amount": {
          "expression": "custom_number_formatter_basic_format($row['total_gross_pay'])"
        },
        "formatted_base_salary_amount": {
          "expression": "custom_number_formatter_basic_format($row['total_base_salary'])"
        },
        "formatted_other_payments_amount": {
          "expression": "custom_number_formatter_basic_format($row['total_other_payments'])"
        },
        "formatted_overtime_pay_amount": {
          "expression": "custom_number_formatter_basic_format($row['total_overtime_amount'])"
        },
        "payroll_type_formatted": {
          "expression": "_get_tooltip_markup($row['employment_type_employment_type'],20)"
        },
        "employee_number": {
          "expression": "$row['employee_number_employee_number']"
        }
    },
    "table_columns": [
            {"labelAlias": "title","column": "employee_name_formatted","sortSourceColumn":"civil_service_title.civil_service_title"},
            {"labelAlias": "agency_name","column":"agency_name_formatted","sortSourceColumn":"agency.agency.agency_name"},
            {"labelAlias": "annual_salary","column": "annual_salary_link","sortSourceColumn": "total_salaried_amount"},
            {"labelAlias": "hourly_rate","column": "hourly_rate_link","sortSourceColumn": "max_hourly_rate"},
            {"labelAlias": "daily_wage","column": "daily_wage_link","sortSourceColumn": "max_daily_wage"},
            {"labelAlias": "gross_pay_ytd","column": "formatted_gross_pay_amount","sortSourceColumn": "total_gross_pay"},
            {"labelAlias": "base_pay","column": "formatted_base_salary_amount","sortSourceColumn": "total_base_salary"},
            {"labelAlias": "other_pays","column": "formatted_other_payments_amount","sortSourceColumn": "total_other_payments"},
            {"labelAlias": "overtime_pay","column": "formatted_overtime_pay_amount","sortSourceColumn": "total_overtime_amount"},
            {"labelAlias": "payroll_type","column": "payroll_type_formatted","sortSourceColumn": "employment_type.employment_type"}
          ],
    "adjustDataTableOptions":"
            $adjustDataTableOptions = $node->widgetConfig->dataTableOptions;
            $nid = RequestUtilities::getRequestParamValue('smnid');
            $payroll_type = PayrollUtil::getPayrollType();
            $datasource = RequestUtilities::getRequestParamValue('datasource');
             $monthId = RequestUtilities::getRequestParamValue('month');

        foreach($node->widgetConfig->table_columns as $key => $table_column){
           //daily wage column must not be included in citywide
            if(($table_column->labelAlias == 'daily_wage' )&& ($datasource!='checkbook_nycha' )){
               unset($node->widgetConfig->table_columns[$key]);
               unset($adjustDataTableOptions->aoColumns[$key]);
            }
            //hourly rate column for nycha
            if(($table_column->labelAlias == 'hourly_rate' )&& ($datasource=='checkbook_nycha' )){
                $table_column->column= 'nycha_hourly_rate_link';
           }
            //daily wage column must be sorted by default for nycha
            if($table_column->labelAlias == 'daily_wage' && ($datasource=='checkbook_nycha' ) ){
                if(isset($monthId)){
                    $adjustDataTableOptions->aaSorting = array(array(5, 'desc'));
                } else{
                    $adjustDataTableOptions->aaSorting = array(array(4, 'desc'));
                }
                $table_column->column= 'nycha_daily_wage_link';
              }
            }
            if(!isset($nid)) {
            $nid = !isset($nid) ? RequestUtilities::getRequestParamValue('dtsmnid') : $nid;
            }
            if(isset($nid)){
            switch($nid){
            case 322:
            case 491:
            case 492:
            if($datasource=='checkbook_nycha'){
              $node->widgetConfig->dataTableOptions->aaSorting = array(array(8,'desc'));
                  }
             else{
               $node->widgetConfig->dataTableOptions->aaSorting = array(array(7, 'desc'));
            }
            break;
            case 320:
            case 325:
            $node->widgetConfig->dataTableOptions->aaSorting = array(array(2,'desc'));
            break;
            case 323:
            if($datasource=='checkbook_nycha'){
            $node->widgetConfig->dataTableOptions->aaSorting = array(array(5, 'desc'));
            }
            break;
            default:
            break;
            }
            }
$node->widgetConfig->table_columns = array_values($node->widgetConfig->table_columns);
$adjustDataTableOptions->aoColumns = array_values($adjustDataTableOptions->aoColumns);
    ",
    "adjustParameters":"
        $sortingCol = $_REQUEST['iSortCol_0'];
        if($sortingCol == 2){//annual sal
            array_unshift($config->orderBy, '-employment_type.employment_type');
        }
        else if($sortingCol == 3){//hourly rate
            array_unshift($config->orderBy, 'employment_type.employment_type');
        }
        else if($sortingCol == 4){//daily wage
        array_unshift($config->orderBy, 'employment_type.employment_type');
        }



        $monthId = RequestUtilities::getRequestParamValue('month');
        $datasource = RequestUtilities::getRequestParamValue('datasource');

        if(isset($monthId) && $datasource=='checkbook_nycha' ){
        $node->widgetConfig->dataset = 'checkbook_nycha:payroll_employee_agency_month_basis';
        }
        else if(isset($monthId)){
        $node->widgetConfig->dataset = 'checkbook:payroll_employee_agency_month';
        }

  $adjustedParameters = $parameters;
        if(isset($parameters['annual_salary.annual_salary'])){
            $parameters['type_of_employment'] = 'Salaried';
        }
        if(function_exists('_checkbook_project_applyParameterFilters')){
            $adjustedParameters = _checkbook_project_applyParameterFilters($node,$parameters);
        }
        return $adjustedParameters;
    ",
"skipCustomPadding":true,
    "dataTableOptions":{
        "bRetrieve": true,
        "bServerSide": true,
        "bProcessing":true,
        "bFilter": false,
        "iDisplayLength":35,
        "bPaginate": true,
        "sPaginationType":"full_numbers",
        "bLengthChange": false,
        "sDom":"<pr><t><ip>",
        "oLanguage": {
        "sInfo": "Displaying transactions _START_ - _END_ of _TOTAL_",
        "sProcessing":"<img src='/sites/all/themes/checkbook/images/loading_large.gif' title='Processing...'/>"
        },
        "bInfo": true,
        "aaSorting":[[4,"desc"]],
        "aoColumns": [
            {"sClass":"text", "sWidth":"175px","asSorting": [ "asc","desc" ]},
            {"sClass":"text","sWidth":"190px","asSorting": [ "asc","desc" ]},
            {"sClass":"number","sWidth":"110px","asSorting": [ "desc","asc" ]},
            {"sClass":"number","sWidth":"110px","asSorting": [ "desc","asc" ]},
            {"sClass":"number","sWidth":"110px","asSorting": [ "desc","asc" ]},
            {"sClass":"number","sWidth":"110px","asSorting": [ "desc","asc" ]},
            {"sClass":"number","sWidth":"110px","asSorting": [ "desc","asc" ]},
            {"sClass":"number","sWidth":"110px","asSorting": [ "desc","asc" ]},
            {"sClass":"number","sWidth":"110px","asSorting": [ "desc","asc" ]},
            {"sClass":"text pad-left endCol","sWidth":"110px", "asSorting": [ "asc","desc" ]}
        ],
        "sScrollX": "100%",
        "bScrollCollapse": true,
        "sScrollXInner":"970px",
        "bScrollCollapse": true,
        "fnInitComplete": "##function () { new FixedColumns( oTable, {
        \"iLeftColumns\": 1,
        \"iLeftWidth\": 150
        } );}##"
    },
    "customExternalJS":"function prepareTableListFilterUrl(){
        var oTitles = getNamedFilterCriteria('ftitle');
        var oAgencyIds = getNamedFilterCriteria('fagencyId');
        if(oAgencyIds.length==0 && eval(document.getElementById('fHideAgencyId'))){
            oAgencyIds = document.getElementById('fHideAgencyId').value;
        }
        var oGrossPayYtd = getNamedFilterCriteria('fgrossPayYtd');
        var oAnnualSalary = getNamedFilterCriteria('fannualSalary');
        var oOvertimePayment = getNamedFilterCriteria('fovertimePayment');
        var oEmpType = getNamedFilterCriteria('fempType');
        var oRateType = getNamedFilterCriteria('frateType');

        var cUrl = oTable.fnSettings().sAjaxSource;
        var cUrlArray = cUrl.split('/');
        var dtsmnidNameIndex = jQuery.inArray('dtsmnid', cUrlArray);

        cUrl = adjustUrlParameter(cUrl,'title',oTitles);
        cUrl = adjustUrlParameter(cUrl,'agency',oAgencyIds);
        cUrl = adjustUrlParameter(cUrl,'grosspayytd',oGrossPayYtd);
        cUrl = adjustUrlParameter(cUrl,'annualsalary',oAnnualSalary);
        cUrl = adjustUrlParameter(cUrl,'overtimepayment',oOvertimePayment);
        cUrl = adjustUrlParameter(cUrl,'emptype',oEmpType);
        cUrl = adjustUrlParameter(cUrl,'ratetype',oRateType);

        return cUrl;
    }"
}
