{
"widgetType": "highcharts",
"widgetDatahandler": "highcharts",
"html_class":"chart-left",
"header":"
       $header = '<h2 class=\"chart-title\" style=\"display:none;\">'. $node->widgetConfig->chartTitle . '</h2>';
       $header .= ChartUtil::generateGridViewLink($node);
       return $header;
    ",
 "gridConfig":{
        "template":"highchart_spending_fy_grid_view",
        "html_class":"chart-grid-view-table three-columns",
        "table_columns": [
            {
                  "labelAlias": "month",
              "column": "month_month_month_name",
                  "sortColumn":"sort_order"
             },
            {
                  "colLabel": "$node->widgetConfig->chartConfig->series[0]->name",
              "column": "previous_spending",
                   "eval":true
            },
            {
                  "colLabel": "$node->widgetConfig->chartConfig->series[1]->name",
              "column": "current_spending",
                   "eval":true
            }
        ]
},
"no_results_content":"No Results Found",
"defaultParameters":{"type_of_year":"B"},
"cleanURLParameters":["year","agency","yeartype","awdmethod","vendor","status","csize","cindustry","mwbe"],
"urlParamMap":{"year":"fiscal_year_id","mwbe":"minority_type_id","agency":"agency_id","yeartype":"type_of_year","awdmethod":"award_method_id","vendor":"vendor_id",
	"status":"status_flag","csize":"award_size_id","cindustry":"industry_type_id"},
"chartTitle":"Top 10 M/WBE Active Expense Contracts by Current Amount",
"widgetDataLoader":"
    
    $where_filters = array();
    foreach($node->widgetConfig->requestParams as $param=>$value){
        $where_filters[] = _widget_build_sql_condition(' a1.' . $param, $value);
    }
    
    if(count($where_filters) > 0){
        $where_filter = ' where ' . implode(' and ' , $where_filters);
    }

    if(preg_match('/revenue/',$_GET['q'])){
    	$where_filter .= \" and rd.document_code in ('RCT1') \";
    }else if(preg_match('/pending/',$_GET['q'])){
    	
    }else{
    	$where_filter .= \" and rd.document_code in ('CT1','CTA1') \";
    }
    
    $sql = ' select
		maximum_contract_amount,
		agency_name,
		contract_number,
		legal_name		
	from {aggregateon_mwbe_contracts_cumulative_spending} a1     
    join {vendor} v on v.vendor_id =  a1.vendor_id
    join {ref_agency} ra on ra.agency_id =  a1.agency_id
    join {ref_document_code} rd on a1.document_code_id = rd.document_code_id
   ' . $where_filter . '       
    order by 1 desc limit 10';
    
    $node->data  = _checkbook_project_execute_sql($sql);
    
",
"widgetUpdateJSONConfig":"
	
	$series_new = array();
	
	
	$index = 0;
	foreach($node->data as $row){
	 		$tooltip_label = 
	 						'Contract ID: ' . $row['contract_number'].  '<br/>' .
	 						'Amount: ' . custom_number_formatter_format($row['maximum_contract_amount'] ,2, '$').  '<br/>' .
	 						'Prime Vendor: ' . $row['legal_name'] .  '<br/>' .
	 						'Contracting Agency: ' . $row['agency_name'] .  '<br/>' 
	 						; 
			$series_new[$index]->y = (float)$row['maximum_contract_amount'];
			$series_new[$index]->tooltip_label = $tooltip_label;
			$index += 1;
	}

	$node->widgetConfig->chartConfig->series[0]->name = 'Fiscal Years';
	$node->widgetConfig->chartConfig->series[0]->type = 'column';
	$node->widgetConfig->chartConfig->series[0]->pointWidth = 30;
	$node->widgetConfig->chartConfig->series[0]->data = $series_new;
	
",
"chartConfig" : {
	"colors":["#7DB7E5"],
    "plotOptions": {
            "series": {
                "cursor": "pointer"   ,
                "stacking": "normal",
                "dataLabels": {
                    "enabled": false
                }             
            }
    },
    "xAxis": {
        "categories": [0,1,2,3,4,5,6,7,8,9],
        "labels": {"enabled": false}
    },
    "series": [
        {
            "name": "FY",
            "type": "column",
            "pointWidth": 50,
            "data": []
        }
    ],
    "title": {"text": ""},
    "yAxis": {
        "startOnTick":true,
        "title": {"text": ""},
        "labels":{"rotation": 0,"function":"yAxisFormatter"}
    } ,
    "legend": {
        "enabled": false       
    },
    "tooltip":{"function":"tooltipformatter"}
    }
}


<function>
yAxisFormatter^^'formatter' : function(){return yAxisLabelFormatter(this);}##
tooltipformatter^^'formatter' :
function() {return this.point.tooltip_label ;
}
</function>