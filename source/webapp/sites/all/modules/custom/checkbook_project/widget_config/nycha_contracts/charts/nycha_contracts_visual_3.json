{
  "widgetType": "highcharts",
  "widgetDatahandler": "highcharts",
  "no_results_content":"No Results Found",
  "header":"
  $header = '<h2 class=\"chart-title\" style=\"display:none;\">'. $node->widgetConfig->chartTitle . '</h2>';
  $header .= ChartUtil::generateWidgetGridViewLink($node);
  return $header;
  ",
  "gridConfig":{
    "template":"chart_grid_view",
    "domain":"contracts",
    "html_class":"chart-grid-view-table four-columns",
    "sortColumn":0,
    "table_columns": [
      {
        "labelAlias": "Year",
        "columnType": "text"
      },
      {
        "labelAlias": "Agreement TYpe",
        "columnType": "number"
      },
      {
        "labelAlias": "Total Number of Contracts",
        "columnType": "number"
      }
    ]
  },
  "chartTitle":"Year Comparison By Agreement Types",
  "widgetDataLoader":"
      $where_filters = array();
      foreach($node->widgetConfig->requestParams as $param=>$value){
        if($param == 'fiscal_year_id'){
            $where_filters[] = '('. $value . ' BETWEEN agreement_start_year_id and agreement_end_year_id )';
        }else{
          $where_filters[] = _widget_build_sql_condition( $param, $value);
        }
      }
      if(count($where_filters) > 0){
        $where_filter = ' WHERE ' . implode(' AND ' , $where_filters);
      }
      $datasource = RequestUtilities::getRequestParamValue('datasource');
$sql = 'select agreement_type_code, year,ct from
        (select agreement_type_code,(year+1899) as year,count(distinct contract_id) as ct
        from (select agreement_type_code,contract_id,generate_series(agreement_start_year_id,agreement_end_year_id) as year
        from all_agreement_transactions_by_release_by_line)a
        group by agreement_type_code,year) b where year between 2010 AND 2019 ';
//$sql = ' select agreement_type_code, release_approved_year,release_approved_year_id , max(release_total_amount) as total_amount, count(contract_id) as total_contracts from all_agreement_transactions  where release_approved_year_id between  113 and 120 group by agreement_type_code,release_approved_year_id,release_approved_year';

$node->data  = _checkbook_project_execute_sql($sql,'main',$datasource);
  ",
"widgetUpdateJSONConfig":"
$series_previous_temp = array(array());

$categories = array('2012','2013','2014','2015','2016','2017','2018','2019');
$codes = array('BA','PO','PA');
foreach($node->data as $row){
$series_previous_temp[$row['agreement_type_code']][$row['year']] = (float)$row['ct'];
foreach($categories as $category){
  if ($row['year'] == $category){
  $node->widgetConfig->gridConfig->data[] = array($row['year'],$row['agreement_type_code'],$row['ct']);
}
//$node->widgetConfig->gridConfig->data[] = array($row['year'],$row['agreement_type_code'],$row['ct']);
}
}
$series_previous = array();
foreach($codes as $code){
$prev_series_obj = new stdClass();
  foreach($categories as $category){
     $series_previous[] = $series_previous_temp[$code][$category] ;
   }
$prev_series_obj->name = $code;
$prev_series_obj->data = $series_previous;
$node->widgetConfig->chartConfig->series[] = $prev_series_obj;
unset($series_previous);
}
$node->widgetConfig->chartConfig->xAxis->categories = $categories;



",
  "chartConfig" : {
"chart": {
"type": "area"
 },
  "colors":["#D78E35","#7DB7E5","#122E46"],
"legend": {"align": "left",  "verticalAlign": "bottom", "layout": "horizontal",
"padding":1, "itemMarginTop": 3, "itemMarginBottom": 3},
"xAxis":{"labels":{"enabled":"true"}},
"yAxis": {"title": {"text": ""}} ,
"tooltip": {
"split":true,
"function":"splittooltip"
},
"plotOptions": {
"area": {
"stacking": "normal",
"lineColor": "#666666",
"lineWidth": 1,
"marker": {
"lineWidth": 1,
"lineColor": "#666666"
}
}
},

"title": {"text": ""}
}
}

<function>
splittooltip^^'formatter' :
function() {
  var s = [];
  s.push(this.x);
  this.points.forEach(function(point) {
  s.push('<b>' + point.series.name + '</b>: ' +Highcharts.numberFormat(point.y, 0, '.', ',') + ' Contracts');
  });
return s;
}
</function>

