{
    "stickyHeader":true,
    "widgetType": "data_tables",
    "widgetSubType": "dataTableList",
    "cleanURLParameters":["year","calyear","yeartype","month","title","grosspayytd","annualsalary","overtimepayment"],
    "urlParamMap":{
        "year":"fiscal_year_id",
        "calyear":"fiscal_year_id",
        "yeartype":"type_of_year",
        "month":"month_id",
        "title":"civil_service_title.civil_service_title",
        "grosspayytd":"total_gross_pay.total_gross_pay",
        "annualsalary":"total_annual_salary.total_annual_salary",
        "overtimepayment":"total_overtime_amount.total_overtime_amount"
    },
    "paramTypeConfig":{
        "title":"eqignorecase",
        "grosspayytd":"rangeid3",
        "annualsalary":"rangeid3",
        "overtimepayment":"rangeid3"
    },
    "defaultParameters":{"type_of_year":"B", "employment_type.employment_type" : "Salaried"},
    "header":"
        $header = NULL;
        $header .= widget_data_tables_export_link($node);
        return $header;
    ",
    "getTotalDataCount":true,
    "limit":"35",
    "stickyHeader":true,
    "noDataInitialLoad":true,
    "html_class": "initiative-table transaction-table",
    "no_results_content":"No Results Found",
    "dataset": "checkbook:payroll_employee_agency_title",
    "columns": ["employee_count.employee_count", "civil_service_title.civil_service_title",  "total_annual_salary.total_annual_salary", "total_gross_pay.total_gross_pay", "total_base_salary.total_base_salary", "total_other_payments.total_other_payments", "total_overtime_amount.total_overtime_amount", "year_type.year_type", "year.year", "employment_type.employment_type"],
    "derivedColumns": {
        "employee_name_formatted": {
               "type": "expression2",
               "expression": "_get_tooltip_markup($row['civil_service_title_civil_service_title'],30)"
        },
        "employee_name_link": {
          "type": "expression2",
           "expression": "  '<a href=\"/payroll/yeartype/'. $row[year_type_year_type] . '/year/' . $row[year_year] . '/title/' . urlencode($row['civil_service_title_civil_service_title']) . '\">'. $row['employee_name_formatted'] . '</a>'"
        },
        "total_no_of_employees_formatted": {
        "type": "expression2",
        "expression": "number_format($row['employee_count_employee_count'])"
        },
        "total_gross_pay_formatted":{
        "type":"expression2",
        "expression": "custom_number_formatter_format($row['total_gross_pay_total_gross_pay'],2,'$')"
        },
        "total_base_salary_formatted":{
        "type":"expression2",
        "expression": "custom_number_formatter_format($row['total_base_salary_total_base_salary'],2,'$')"
        },
        "total_other_payments_formatted":{
        "type":"expression2",
        "expression": "custom_number_formatter_format($row['total_other_payments_total_other_payments'],2,'$')"
        },
        "total_overtime_amount_formatted":{
        "type":"expression2",
        "expression": "custom_number_formatter_format($row['total_overtime_amount_total_overtime_amount'],2,'$')"
        },
        "annual_salary_formatted":{
        "type":"expression2",
        "expression": "custom_number_formatter_format($row['total_annual_salary_total_annual_salary'],2,'$')"
        },
        "export_salary_amount": {
        "type": "expression2",
        "expression": " $row['employment_type.employment_type'] == 'Salaried' ? $row['total_annual_salary']  : NULL "
        }
    },
    "table_columns": [
            {"labelAlias": "title","column": "employee_name_link","sortSourceColumn":"civil_service_title.civil_service_title"},
            {"labelAlias": "no_of_employees","column":"total_no_of_employees_formatted","sortSourceColumn":"employee_count"},
            {"labelAlias": "combined_annual_salary","column": "annual_salary_formatted","sortSourceColumn": "total_annual_salary","exportColumn":"export_salary_amount"},
            {"labelAlias": "combined_gross_pay_ytd","column": "total_gross_pay_formatted","sortSourceColumn": "total_gross_pay"},
            {"labelAlias": "combined_base_pay_ytd","column": "total_base_salary_formatted","sortSourceColumn": "total_base_salary"},
            {"labelAlias": "combined_other_pay_ytd","column": "total_other_payments_formatted","sortSourceColumn": "total_other_payments"},
            {"labelAlias": "combined_overtime_pay_ytd","column": "total_overtime_amount_formatted","sortSourceColumn": "total_overtime_amount"}
          ],
    "adjustDataTableOptions":"
            $smnid = _getRequestParamValue('smnid');
            if(isset($smnid)){
                switch($smnid){
                    case 322:
                        $node->widgetConfig->dataTableOptions->aaSorting = array(array(8,'desc'));
                    break;
                    case 320:
                    case 325:
                        $node->widgetConfig->dataTableOptions->aaSorting = array(array(2,'desc'));
                    break;
                    case 323:
                    break;
                    default:
                    break;
                }
            }
    ",
    "adjustParameters":"

                $sortingCol = $_REQUEST['iSortCol_0'];
                if($sortingCol == 2){//annual sal
                    array_unshift($config->orderBy, '-employment_type.employment_type');
                }else if($sortingCol == 3){//hourly rate
                    array_unshift($config->orderBy, 'employment_type.employment_type');
                }

               $monthId = _getRequestParamValue('month');
                if( isset($monthId)){
                   $node->widgetConfig->dataset = 'checkbook:payroll_employee_agency_month';
                }

                $adjustedParameters = $parameters;
                if(function_exists('_checkbook_project_applyParameterFilters')){
                      $adjustedParameters = _checkbook_project_applyParameterFilters($node,$parameters);
                }
                return $adjustedParameters;
    ",
"skipCustomPadding":true,
    "dataTableOptions":{
        "bRetrieve": true,
        "bServerSide": true,
        "bProcessing":true,
        "bFilter": false,
        "iDisplayLength":35,
        "bPaginate": true,
        "sPaginationType":"full_numbers",
        "bLengthChange": false,
        "sDom":"<pr><t><ip>",
        "oLanguage": {
        "sInfo": "Displaying transactions _START_ - _END_ of _TOTAL_",
        "sProcessing":"<img src='/sites/all/themes/checkbook/images/loading_large.gif' title='Processing...'/>"
        },
        "bInfo": true,
        "aaSorting":[[1,"desc"]],
        "aoColumns": [
            {"sClass":"text", "sWidth":"200px","asSorting": [ "asc","desc" ]},
            {"sClass":"text pad-left","asSorting": [ "asc","desc" ]},
            {"sClass":"number","asSorting": [ "desc","asc" ]},
            {"sClass":"number pad-left","asSorting": [ "desc","asc" ]},
            {"sClass":"number pad-left","asSorting": [ "desc","asc" ]},
            {"sClass":"number pad-left","asSorting": [ "desc","asc" ]},
            {"sClass":"number pad-left endCol","asSorting": [ "desc","asc" ]}
        ],
        "sScrollX": "100%",
        "bScrollCollapse": true,
        "sScrollXInner":"970px",
        "bScrollCollapse": true,
        "fnInitComplete": "##function () { new FixedColumns( oTable, {
        \"iLeftColumns\": 1,
        \"iLeftWidth\": 200
        } );}##"
    },
    "customExternalJS":"function prepareTableListFilterUrl(){
        var oTitles = getNamedFilterCriteria('ftitle');
        var oGrossPayYtd = getNamedFilterCriteria('fgrossPayYtd');
        var oAnnualSalary = getNamedFilterCriteria('fannualSalary');
        var oOvertimePayment = getNamedFilterCriteria('fovertimePayment');

        var cUrl = oTable.fnSettings().sAjaxSource;
        var cUrlArray = cUrl.split('/');
        var dtsmnidNameIndex = jQuery.inArray('dtsmnid', cUrlArray);

        cUrl = adjustUrlParameter(cUrl,'title',oTitles);
        cUrl = adjustUrlParameter(cUrl,'grosspayytd',oGrossPayYtd);
        cUrl = adjustUrlParameter(cUrl,'annualsalary',oAnnualSalary);
        cUrl = adjustUrlParameter(cUrl,'overtimepayment',oOvertimePayment);

        return cUrl;
    }"
}