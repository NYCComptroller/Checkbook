{
    "widgetType": "data_tables",
    "cleanURLParameters":["magid"],
    "urlParamMap":{"magid":"master_agreement_id"},
    "allowRequestParams":["year","calyear","yeartype"],
    "useList":true,
    "getTotalDataCount":false,
    "dataset": "checkbook:all_agreement_transactions",
    "orderBy":"-maximum_contract_amount",
    "columns": ["sub_contract_id","is_prime_or_sub","minority_type_id","minority_type_name","ending_year_id","document_code@checkbook:ref_document_code","has_children","original_agreement_id","contract_number","master_agreement_id","master_contract_number","description","document_version","original_contract_amount","maximum_contract_amount","rfed_amount","vendor_name","agency_name","vendor_id","agency_id","agreement_type_name","award_method_name","expenditure_object_names","effective_begin_date","effective_end_date","registered_date","brd_awd_no","tracking_number","master_agreement_yn","industry_type_name","dollar_difference","percent_difference"],
    "caption":"",
    "adjustParameters":"
if(isset($parameters['vendor_type'])){
$parameters['vendor_type'] = MappingUtil::getVendorTypeValue($parameters['vendor_type']);
}

$subvendor = _getRequestParamValue('subvendor');
$mwbe = _getRequestParamValue('mwbe');
if($subvendor) $parameters['is_prime_or_sub'] = 'S';
else if($mwbe) $parameters['is_prime_or_sub'] = 'P';

    $year = _getRequestParamValue('year');
$calYear = _getRequestParamValue('calyear');
if(!isset($year) && isset($calYear)){
$year = $calYear;
}

if(!isset($year)){
unset($config->model);
$parameters['latest_flag'] = 'Y';
}

$yearType = _getRequestParamValue('yeartype');
if($yearType == 'C' || isset($calYear) ){
$config->dataset = 'checkbook:all_agreement_transactions_cy';
}

return $parameters;
",
"model": {
"join": {
"method": "Union"
},
"series": [
{
"dataset": "checkbook:all_agreement_transactions",
"useList":true,
"columns": ["is_prime_or_sub","minority_type_id","minority_type_name","ending_year_id","document_code@checkbook:ref_document_code","has_children","original_agreement_id","contract_number","master_agreement_id","master_contract_number","description","document_version","original_contract_amount","maximum_contract_amount","rfed_amount","vendor_name","agency_name","vendor_id","agency_id","agreement_type_name","award_method_name","expenditure_object_names","effective_begin_date","effective_end_date","registered_date","brd_awd_no","tracking_number","master_agreement_yn","industry_type_name","dollar_difference","percent_difference"],
"orderBy":"-maximum_contract_amount",
"seriesDefaultParameters":{"master_agreement_id":-1},//default master_agreement_id to avoid load
"adjustSerieParameters":"
$year = _getRequestParamValue('year');
$calYear = _getRequestParamValue('calyear');
if(!isset($year) && isset($calYear)){
$year = $calYear;
}

if(isset($year)){
$data_controller_instance = data_controller_get_operator_factory_instance();
$serieParameters['starting_year_id'] = $data_controller_instance->initiateHandler(LessOrEqualOperatorHandler::$OPERATOR__NAME, $year);
$serieParameters['ending_year_id'] = $data_controller_instance->initiateHandler(GreaterOrEqualOperatorHandler::$OPERATOR__NAME, $year);

$yearType = _getRequestParamValue('yeartype');
if($yearType == 'C' || isset($calYear) ){
$serieDatasetName = 'checkbook:all_agreement_transactions_cy';
}

}

return $serieParameters;
"
},
{
"dataset": "checkbook:all_agreement_transactions",
"useList":true,
"columns": ["ending_year_id","document_code@checkbook:ref_document_code","has_children","original_agreement_id","contract_number","master_agreement_id","master_contract_number","description","document_version","original_contract_amount","maximum_contract_amount","rfed_amount","vendor_name","agency_name","vendor_id","agency_id","agreement_type_name","award_method_name","expenditure_object_names","effective_begin_date","effective_end_date","registered_date","brd_awd_no","tracking_number","master_agreement_yn","industry_type_name","dollar_difference","percent_difference"],
"orderBy":"-maximum_contract_amount",
"seriesDefaultParameters":{"master_agreement_id":-1},//default master_agreement_id to avoid load
"adjustSerieParameters":"
$year = _getRequestParamValue('year');
$calYear = _getRequestParamValue('calyear');
if(!isset($year) && isset($calYear)){
$year = $calYear;
}

if(isset($year)){
$data_controller_instance = data_controller_get_operator_factory_instance();
$serieParameters['latest_flag'] = 'Y';
$serieParameters['ending_year_id'] = $data_controller_instance->initiateHandler(LessThanOperatorHandler::$OPERATOR__NAME, $year);

$yearType = _getRequestParamValue('yeartype');
if($yearType == 'C' || isset($calYear) ){
$serieDatasetName = 'checkbook:all_agreement_transactions_cy';
}

}
return $serieParameters;
"
}
]
},
"transformationPHP":"
if(isset($config->model) && is_array($node->data)){
$resultData = $node->data;
sort_records($resultData, new PropertyBasedComparator_DefaultSortingConfiguration('maximum_contract_amount',FALSE));
return  $resultData;
}else{
return $node->data;
}
",
"derivedColumns": {
"child_contrats_link":{
"type": "expression2",
"expression": "''"
},
"contract_link": {
"type": "expression2",
"expression": "ContractURLHelper::prepareExpenseContractLink($row, $node)"
},
"parent_contract_link": {
"type": "expression2",
"expression": " $row['master_contract_number']  "
},
"parent_contract_actual": {
"type": "expression2",
"expression": " '<a href=\"/contract_details/magid/' . $row['master_agreement_id']  .  '\">'. $row['master_contract_number'] . '</a>'  "
},
"formatted_original_amount": {
"type": "expression2",
"expression": " ($row['document_code@checkbook:ref_document_code'] == 'DO1') ? 'N/A' : custom_number_formatter_basic_format($row['original_contract_amount']) "
},
"formatted_current_amount": {
"type": "expression2",
"expression": " ($row['document_code@checkbook:ref_document_code'] == 'DO1') ? 'N/A' : custom_number_formatter_basic_format($row['maximum_contract_amount']) "
},
"formatted_spent_to_date": {
"type": "expression2",
"expression": " '<a href=\"/spending/transactions'
.  ($row['master_agreement_yn'] == 'Y' ? '/magid/' : '/agid/') . $row['original_agreement_id']
.  ( _getRequestParamValue('yeartype') == 'B' ? ('/year/'. _getRequestParamValue('year').'/syear/'. _getRequestParamValue('year')) :
(_getRequestParamValue('yeartype') == 'C' ? ('/calyear/'. _getRequestParamValue('year').'/scalyear/'. _getRequestParamValue('year')) :
('/year/'.$row['ending_year_id']. '/syear/'.$row['ending_year_id']) )
)
.  '/newwindow\" class=\"new_window\">'. custom_number_formatter_basic_format($row['rfed_amount']) . '</a>'
"
},
"vendor_name_link_old": {
"type": "expression2",
"expression": " '<a href=\"/contracts_landing/vendor/' . $row['vendor_id']
.  _checkbook_project_get_year_url_param_string()
.  '\">'. $row['vendor_name'] . '</a>'  "
},
"vendor_formatted": {
"type": "expression2",
"expression": "_get_tooltip_markup($row['vendor_name'],30)"
},
"vendor_name_link": {
"type": "expression2",
"expression": " '<a href=\"/contracts_landing'
.  (isset($row['fiscal_year_id@checkbook:all_contracts_coa_aggregates']) ? ('/year/'.$row['fiscal_year_id@checkbook:all_contracts_coa_aggregates'] . '/yeartype/'.$row['type_of_year@checkbook:all_contracts_coa_aggregates']) : _checkbook_project_get_year_url_param_string())
.  _checkbook_project_get_url_param_string(\"contstatus\",\"status\")
.  '/vendor/' . $row['vendor_id']
.  '?expandBottomCont=true\">'. $row['vendor_formatted'] . '</a>'  "
},
"agency_name_link_old": {
"type": "expression2",
"expression": " '<a href=\"/contracts_landing/agency/' . $row['agency_id']
.  _checkbook_project_get_year_url_param_string()
.  '\">'. $row['agency_name'] . '</a>'  "
},
"agency_formatted": {
"type": "expression2",
"expression": "_get_tooltip_markup($row['agency_name'],30)"
},
"agency_name_link": {
"type": "expression2",
"expression": " '<a href=\"/contracts_landing'
.  (isset($row['fiscal_year_id@checkbook:all_contracts_coa_aggregates']) ? ('/year/'.$row['fiscal_year_id@checkbook:all_contracts_coa_aggregates'] . '/yeartype/'.$row['type_of_year@checkbook:all_contracts_coa_aggregates']) : _checkbook_project_get_year_url_param_string())
.  _checkbook_project_get_url_param_string(\"contstatus\",\"status\")
.  '/agency/' . $row['agency_id']
.  '?expandBottomCont=true\">'. $row['agency_formatted'] . '</a>'  "
},
"display_effective_begin_date": {
"type": "expression2",
"expression": " ($row['document_code@checkbook:ref_document_code'] == 'DO1') ? 'N/A' : $row['effective_begin_date'] "
},
"display_effective_end_date": {
"type": "expression2",
"expression": " ($row['document_code@checkbook:ref_document_code'] == 'DO1') ? 'N/A' : $row['effective_end_date'] "
},
"display_registered_date": {
"type": "expression2",
"expression": " ($row['document_code@checkbook:ref_document_code'] == 'DO1') ? 'N/A' : $row['registered_date'] "
},
"purpose_formatted": {
"type": "expression2",
"expression": "_get_tooltip_markup($row['description'],36)"
},
"expense_cat_formatted": {
"type": "expression2",
"expression": "_get_tooltip_markup($row['expenditure_object_names'],36)"
},
"award_method_formatted": {
"type": "expression2",
"expression": "_get_tooltip_markup($row['award_method_name'],36)"
},
"contract_type_formatted": {
"type": "expression2",
"expression": "_get_tooltip_markup($row['agreement_type_name'],36)"
},
"industry_name_formatted": {
"type": "expression2",
"expression": "_get_tooltip_markup($row['industry_type_name'],36)"
},
"formatted_dollar_diff": {
"type": "expression2",
"expression": " ($row['document_code@checkbook:ref_document_code'] == 'DO1') ? 'N/A' : custom_number_formatter_basic_format($row['dollar_difference']) "
},
"formatted_percent_diff": {
"type": "expression2",
"expression": " ($row['document_code@checkbook:ref_document_code'] == 'DO1') ? 'N/A' : (round($row['percent_difference'],2) . '%')"
},
"formatted_minority_name": {
"type": "expression2",
"expression": "MappingUtil::getMinorityCategoryById($row['minority_type_id'])"
}
},
"table_columns": [
{"label": "&nbsp;","column": "child_contrats_link"},
{"label": "Contract ID","column": "contract_link","sortSourceColumn":"contract_number"},
{"label": "sub_contract_reference_id","column": "sub_contract_id"},
{"label": "<span>Purpose</span>","column": "purpose_formatted","sortSourceColumn":"description"},
{"label": "Version","column": "document_version","type":"number"},
{"label": "FMS Document/ Parent Contract ID","column":"parent_contract_link"},
{"label": "Original Amount","column": "formatted_original_amount","sortSourceColumn":"original_contract_amount","type":"number"},
{"label": "Current Amount","column": "formatted_current_amount","sortSourceColumn":"maximum_contract_amount","type":"number"},
{"label": "Spent to date","column": "formatted_spent_to_date","sortSourceColumn":"rfed_amount","type":"number"},
{"label": "Dollar Difference","column": "formatted_dollar_diff","sortSourceColumn":"dollar_difference","type":"number"},
{"label": "Percent Difference","column": "formatted_percent_diff","sortSourceColumn":"percent_difference","type":"number"},
{"label": "Vendor","column": "vendor_name_link","sortSourceColumn":"vendor_name"},
{"label": "sub_vendor_name","column": "is_prime_or_sub"},
{"label": "Agency","column": "agency_name_link","sortSourceColumn":"agency_name"},
{"label": "Contract<br/>Type","column":"contract_type_formatted","sortSourceColumn": "agreement_type_name"},
{"label": "Award Method","column":"award_method_formatted","sortSourceColumn": "award_method_name"},
{"label": "Expense Category","column":"expense_cat_formatted","sortSourceColumn": "expenditure_object_names"},
{"label": "Industry","column": "industry_name_formatted","sortSourceColumn": "industry_type_name"},
{"label": "Start Date","column": "display_effective_begin_date","sortSourceColumn": "effective_begin_date"},
{"label": "End Date","column": "display_effective_end_date","sortSourceColumn": "effective_end_date"},
{"label": "Registration<br/>Date","column": "display_registered_date","sortSourceColumn": "registered_date"},
{"label": "PIN","column": "tracking_number"},
{"label": "APT PIN","column": "brd_awd_no"},
{"label": "mwbe_category","column":"formatted_minority_name","sortSourceColumn": "minority_type_name"}

]
}