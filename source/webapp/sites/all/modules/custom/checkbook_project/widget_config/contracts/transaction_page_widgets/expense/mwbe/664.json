{
    "widgetType":"phpparser",
    "parentNid":656,
    "autocomplete":false,
    "no_results_content":"No Results Found",
    "defaultParameters":{
        "all_cum_spend.all_cum_spend.status_flag":"A"
    },
    "limit":10,
    "startWith":0,
    "urlParamMap":{
        "doctype":"document_code.document_code.document_code",
        "contstatus":"all_cum_spend.all_cum_spend.status_flag",
        "calyear":"all_cum_spend.all_cum_spend.fiscal_year_id",
        "year":"all_cum_spend.all_cum_spend.fiscal_year_id",
        "yeartype":"all_cum_spend.all_cum_spend.type_of_year",
        "vendor":"all_cum_spend.all_cum_spend.vendor_id",
        "mwbe_vendor":"all_cum_spend.all_cum_spend.vendor_id",
        "mwbe":"all_cum_spend.all_cum_spend.minority_type_id"
    }  ,
    "columns":["minority_type.minority_type", "minority_type.minority_type.minority_type_name", "txcount"],
    "orderBy":"-txcount",
    "getTotalDataCount":true,
    "facetPager":true,
    "filterName":"M/WBE Category",
    "urlParameterName":"mwbe",
    "autocompleteParamName":"mwbe_auto",
    "autocompleteID":"fminorityTypeId",
    "autocompleteField":"minority_type_name",
    "maxSelect":5,
    "adjustParameters":"
if(isset($parameters['vendor_type'])){
$parameters['vendor_type'] = MappingUtil::getVendorTypeValue($parameters['vendor_type']);
}


$subvendor = _getRequestParamValue('subvendor');
$mwbe = _getRequestParamValue('mwbe');
if($subvendor) $parameters['is_prime_or_sub'] = 'S';
else if($mwbe) $parameters['is_prime_or_sub'] = 'P';

    checkbook_faceted_search_adjust_param($node);
if(function_exists('_checkbook_project_adjustContractParameterFilters')){
_checkbook_project_adjustContractParameterFilters($node,$parameters,'active_registered');
}
if(function_exists('_checkbook_project_applyParameterFilters')){
$adjustedParameters = _checkbook_project_applyParameterFilters($node,$parameters);
$adjustedParameters['minority_type.minority_type'][] = data_controller_get_operator_factory_instance()->initiateHandler(NotEmptyOperatorHandler::$OPERATOR__NAME);
return $adjustedParameters;
}
return $parameters;
",
"transformationPHP":"
$data = array();
$count = 0;$ids='';
foreach($node->data as $row){
    if(MappingUtil::getMinorityCategoryById($row['minority_type_minority_type']) != 'Asian American'){
        $new_row = array('minority_type_minority_type' => $row['minority_type_minority_type'],
                         'minority_type_minority_type_minority_type_name' => MappingUtil::getMinorityCategoryById($row['minority_type_minority_type']),
                         'txcount' => $row['txcount']
        );
        array_push($data, $new_row);
    }else if(MappingUtil::getMinorityCategoryById($row['minority_type_minority_type']) == 'Asian American'){
        $count = $count+$row['txcount'];
        $ids .= $row['minority_type_minority_type'].'~';
    }
}
$ids = isset($ids)?trim($ids,'~'):'';
if($count > 0){
    array_push($data, array('minority_type_minority_type' => $ids,
                        'minority_type_minority_type_minority_type_name' => 'Asian American',
                        'txcount' => $count
                        ));
}
return $data;
",
"template":"individual_filter"
}