{
  "widgetType":"highcharts",
  "widgetSubType":"ajaxSimple",
  "header":"
  $header = '<h2 class=\"chart-title\" style=\"display:none;\">'. $node->widgetConfig->chartTitle . '</h2>';
  $header .= ChartUtil::generateWidgetGridViewLink($node);
  return $header;
  ",
  "gridConfig":{
    "template":"highchart_nycha_revenue_categories_grid_view",
    "html_class":"chart-grid-view-table",
    "table_columns": [
      {
        "labelAlias": "revenue_category",
        "column": "revenue_category_revenue_category",
        "sortColumn": "revenue_category_revenue_category"
      },
      {
        "colLabel": "recognized",
        "column": "revenue_recognized_amount",
        "eval":true
      },
      {
        "colLabel": "remaining",
        "column": "revenue_funds_available",
        "eval":true
      }
    ]
  },
  "dataset":"checkbook_nycha:revenue",
  "columns":[
    "year_id.year_id",
    "revenue_category_id.revenue_category_id",
    "revenue_category.revenue_category",
    "revenue_recognized_amount",
    "revenue_funds_available"
  ],
  "orderBy":"-revenue_recognized_amount",
  "limit": 10,
  "defaultParameters":{
    "year_id.year_id":119
  },
  "cleanURLParameters":[
    "year",
    "expcategory",
    "project",
    "program",
    "fundsrc",
    "respcenter"
  ],
  "urlParamMap":{
    "year":"year_id.year_id",
    "expcategory": "expenditure_type_id.expenditure_type_id",
    "project": "gl_project_id.gl_project_id",
    "program": "program_phase_id.program_phase_id",
    "fundsrc": "funding_source_id.funding_source_id",
    "respcenter": "responsibility_center_id.responsibility_center_id"
  },
  "transformationPHP":"
  $transactions_page = '/' . current_path()  . '?expandBottomContURL=/panel_html/nycha_revenue_transactions/nycha_revenue/transactions/datasource/checkbook_nycha/widget/wt_year';
  $year = ($node->widgetConfig->requestParams['year_id.year_id']) ? '/year/' . $node->widgetConfig->requestParams['year_id.year_id'] : '';
$expcategory = ($node->widgetConfig->requestParams['expenditure_type_id.expenditure_type_id']) ? '/expcategory/' . $node->widgetConfig->requestParams['expenditure_type_id.expenditure_type_id'] : '';
$resp = ($node->widgetConfig->requestParams['responsibility_center_id.responsibility_center_id']) ? '/respcenter/' . $node->widgetConfig->requestParams['responsibility_center_id.responsibility_center_id'] : '';
$fundsrc = ($node->widgetConfig->requestParams['funding_source_id.funding_source_id']) ? '/fundsrc/' . $node->widgetConfig->requestParams['funding_source_id.funding_source_id'] : '';
$prog = ($node->widgetConfig->requestParams['program_phase_id.program_phase_id']) ? '/program/' . $node->widgetConfig->requestParams['program_phase_id.program_phase_id'] : '';
$proj = ($node->widgetConfig->requestParams['gl_project_id.gl_project_id']) ? '/project/' . $node->widgetConfig->requestParams['gl_project_id.gl_project_id'] : '';
$rev_committed = '/revtype/recognized';
$rev_remaining = '/revtype/remaining';
$url_recognized =  $transactions_page . $rev_committed . $year . $expcategory . $resp . $fundsrc . $proj . $prog;
$url_remaining =  $transactions_page . $rev_remaining . $year . $expcategory . $resp . $fundsrc . $proj . $prog;
  $allZero = TRUE;
  foreach ($node->data as $row) {
  if (abs($row['revenue_recognized_amount']) > 0){
  $allZero = FALSE;
  }
  if (abs($row['revenue_funds_available']) > 0){
  $allZero = FALSE;
  }
  $url = null;

$categories[] = html_entity_decode($row['revenue_category_revenue_category'],ENT_QUOTES);
$recognized_data[] = array('name' => html_entity_decode($row['revenue_category_revenue_category'],ENT_QUOTES), 'y' => $row['revenue_recognized_amount'], 'url' => $url_recognized);
$remaining_data[] = array('name' => html_entity_decode($row['revenue_category_revenue_category'],ENT_QUOTES), 'y' => $row['revenue_funds_available'], 'url' => $url_remaining);
}
if($allZero){$node->totalDataCount = 0;}
$node->widgetConfig->chartTitle = 'Top Ten Revenue Categories by Revenue';
$node->widgetConfig->chartConfig->xAxis->categories = $categories;

$node->widgetConfig->chartConfig->series = array(array('name' => 'Recognized', 'data' => $recognized_data),array('name' => 'Remaining', 'data' => $remaining_data));
return $node->data;
",
"chartConfig":{
"chart":{
"defaultSeriesType":"column"
},
"legend":{
"align":"left",
"verticalAlign":"bottom"
},
"xAxis":{
"categories":[]
},
"yAxis":{
"title":{
"text":""
},
"labels":{
"function":"yAxisFormatter"
}
},
"tooltip":{
"function":"budgetTooltip"
},
"plotOptions":{
"column":{
"minPointLength":3,
"pointWidth":17
},
"series":{
"cursor":"pointer",
"point":{
"events":{
"function":"clickEvent"
}
}
}
},
"series":[],
"title":{
"text":""
}
}
}
<function>
yAxisFormatter^^"formatter" : function(){return yAxisLabelFormatter(this);}##
budgetTooltip^^"formatter" : function() {return 'Revenue Category: '+this.point.name + '<br>Amount: ' + abbrNum(this.y, 2, '$')}##
clickEvent^^"click": function(){
  if (this.options.url){
  location.href = this.options.url
  }
}
</function>
