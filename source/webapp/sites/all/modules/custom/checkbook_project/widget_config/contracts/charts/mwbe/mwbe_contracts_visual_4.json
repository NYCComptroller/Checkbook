{
"widgetType": "highcharts",
"widgetDatahandler": "highcharts",
"html_class":"",
"header":"
       $header = '<h2 class=\"chart-title\" style=\"display:none;\">'. $node->widgetConfig->chartTitle . '</h2>';
       $header .= ChartUtil::generateWidgetGridViewLink($node);
       return $header;
    ",
 "gridConfig":{
        "template":"chart_grid_view",
        "domain":"contracts",
        "html_class":"chart-grid-view-table three-columns",
        "table_columns": [
            {
                  "labelAlias": "Contract ID",
                  "columnType": "text"
             },
             {
                  "labelAlias": "Amount",
                  "columnType": "number",
                  "formatType": "amount"
             },
             {
                  "labelAlias": "Prime Vendor",
                  "columnType": "text number-left"
             },
             {
                  "labelAlias": "Contracting Agency",
                  "columnType": "text"
             }
        ]
},
"no_results_content":"No Results Found",
"cleanURLParameters":["agency","yeartype","awdmethod","vendor","status","csize","cindustry","mwbe","year"],
"cleanURLParametersPending":["agency","awdmethod","vendor","status","csize","cindustry","mwbe"],
"urlParamMap":{"year":"fiscal_year_id","mwbe":"minority_type_id","agency":"agency_id","yeartype":"type_of_year","awdmethod":"award_method_id","vendor":"vendor_id",
	"status":"status_flag","csize":"award_size_id","cindustry":"industry_type_id"},	
"urlParamMapPending":{"mwbe":"minority_type_id","agency":"document_agency_id","vendor":"vendor_id",			
			"awdmethod":"award_method_id",
			"csize":"award_size_id","cindustry":"industry_type_id"},
"widgetPreprocessJSON":"
	if(preg_match('/pending/',$_GET['q'])){
		$node->widgetConfig->urlParamMap = $node->widgetConfig->urlParamMapPending;
		$node->widgetConfig->defaultParameters = $node->widgetConfig->defaultParametersPending;
		$node->widgetConfig->cleanURLParameters = $node->widgetConfig->cleanURLParametersPending;
	}
	
",	
"chartTitle":"Top Ten M/WBE Active Expense Contracts by Current Amount",
"widgetDataLoader":"
    
    $where_filters = array();
    foreach($node->widgetConfig->requestParams as $param=>$value){
        $where_filters[] = _widget_build_sql_condition(' a1.' . $param, $value);
    }
    
    if(count($where_filters) > 0){
        $where_filter = ' where ' . implode(' and ' , $where_filters);
    }

    if(preg_match('/revenue/',$_GET['q'])){
    	$where_filter .= \" and rd.document_code in ('RCT1') \";
    }else if(preg_match('/pending/',$_GET['q'])){
    	
    }else{
    	$where_filter .= \" and rd.document_code in ('CT1','CTA1') \";
    }
    if(preg_match('/pending/',$_GET['q'])){    
    	$sql = ' select
			revised_maximum_amount maximum_contract_amount,
			a1.document_agency_name agency_name,
			fms_contract_number contract_number,
			vendor_legal_name legal_name		
		from {pending_contracts} a1     
    	join {vendor} v on v.vendor_id =  a1.vendor_id
    	join {ref_agency} ra on ra.agency_id =  a1.document_agency_id
    	join {ref_document_code} rd on a1.document_code_id = rd.document_code_id
   		' . $where_filter . '       
    	order by 1 desc limit 10';
    }else{
    	$sql = ' select
			maximum_contract_amount,
			agency_name,
			contract_number,
			legal_name		
		from {aggregateon_mwbe_contracts_cumulative_spending} a1     
    	join {vendor} v on v.vendor_id =  a1.vendor_id
    	join {ref_agency} ra on ra.agency_id =  a1.agency_id
    	join {ref_document_code} rd on a1.document_code_id = rd.document_code_id
   		' . $where_filter . '       
    	order by 1 desc limit 10';
    
    }
    
    $node->data  = _checkbook_project_execute_sql($sql);
	    
",
"widgetUpdateJSONConfig":"
	
	$series_new = array();
	
	
	$index = 0;
	foreach($node->data as $row){
	 		$tooltip_label = 
	 						'Contract ID: ' . $row['contract_number'].  '<br/>' .
	 						'Amount: ' . custom_number_formatter_format($row['maximum_contract_amount'] ,2, '$').  '<br/>' .
	 						'Prime Vendor: ' . $row['legal_name'] .  '<br/>' .
	 						'Contracting Agency: ' . $row['agency_name'] .  '<br/>' 
	 						; 
			$series_new[$index]->y = (float)$row['maximum_contract_amount'];
			$series_new[$index]->tooltip_label = $tooltip_label;
			$node->widgetConfig->gridConfig->data[] = array($row['contract_number'],$row['maximum_contract_amount'],$row['legal_name'], $row['agency_name']  );
			$index += 1;
	}

	$node->widgetConfig->chartConfig->series[0]->name = 'Fiscal Years';
	$node->widgetConfig->chartConfig->series[0]->type = 'column';
	$node->widgetConfig->chartConfig->series[0]->pointWidth = 30;
	$node->widgetConfig->chartConfig->series[0]->data = $series_new;
	if(_getRequestParamValue('status') == 'A'){
		$status = 'Active';
	}else if(_getRequestParamValue('status') == 'R'){
		$status = 'Registered';
	}
	
	if(preg_match('/revenue/',$_GET['q'])){
		$contract_type = 'Revenue';
	}if(preg_match('/pending_expense/',$_GET['q'])){
		$contract_type = 'Pending Expense';
	}if(preg_match('/pending_revenue/',$_GET['q'])){
		$contract_type = 'Pending Revenue';
	}else{
		$contract_type = 'Expense';
	}
	$node->widgetConfig->chartTitle = 'Top Ten ' . MappingUtil::getCurrenEhtnicityName() . ' ' . $status . ' ' . $contract_type .  ' Contracts  by Current Amount';
",
"chartConfig" : {
	"colors":["#7DB7E5"],
    "plotOptions": {
            "series": {
                "cursor": "pointer"   ,
                "stacking": "normal",
                "dataLabels": {
                    "enabled": false
                }             
            }
    },
    "xAxis": {
        "categories": [0,1,2,3,4,5,6,7,8,9],
        "labels": {"enabled": false}
    },
    "series": [
        {
            "name": "FY",
            "type": "column",
            "pointWidth": 50,
            "data": []
        }
    ],
    "title": {"text": ""},
    "yAxis": {
        "startOnTick":true,
        "title": {"text": ""},
        "labels":{"rotation": 0,"function":"yAxisFormatter"}
    } ,
    "legend": {
        "enabled": false       
    },
    "tooltip":{"function":"tooltipformatter"}
    }
}


<function>
yAxisFormatter^^'formatter' : function(){return yAxisLabelFormatter(this);}##
tooltipformatter^^'formatter' :
function() {return this.point.tooltip_label ;
}
</function>