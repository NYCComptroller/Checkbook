<?php

/**
 * This function returns current NYC fiscal year ID
 * @return year_id
 */
function _getFiscalYearID(){
    static $fiscalYearId;

    if(!isset($fiscalYearId)){
        $year=date("Y");
        if(date("m") >= 7 ){
            $year += 1;
        }
        $fiscalYearId = _getYearIDFromValue($year);
    }

    return $fiscalYearId;
}

/**
 * This function returns Calendar year ID
 * @return year_id
 */
function _getCalendarYearID(){
    static $calYearId;

    if(!isset($calYearId)){
        $year=date("Y");
        $calYearId = _getYearIDFromValue($year);
    }

    return $calYearId;
}

/**
 * This function returns the current NYC year  ...
 * @return year_id
 */
function _getCurrentYearID(){
	STATIC $currentNYCYear;	
	if(!isset($currentNYCYear)){
	
        $currentNYCYear=date("Y");
        $currentMonth=date("m");
        if($currentMonth > 6 )
         $currentNYCYear +=1; 
        $currentNYCYear = _getYearIDFromValue($currentNYCYear);
	 }
     return $currentNYCYear;
}

/**
 * returns NYC year id for a giver year ...
 * @param string $year_value
 * @return year_id
 */
function _getYearIDFromValue($year_value){
	STATIC $NYCYearIDs;
	if(!isset($NYCYearIDs)){
		$yearIDs = _checkbook_project_querydataset('checkbook:year',array('year_id','year_value'));	
	foreach($yearIDs as $row){
		$NYCYearIDs[$row['year_value']] = $row['year_id'];
	}

	}
	return $NYCYearIDs[$year_value];
}

/**
 * return year value for a give year id ...
 * @param string $year_id
 * @return year_value
 */
function _getYearValueFromID($year_id){
	STATIC $NYCYearValues;
	if(!isset($NYCYearValues)){
		$yearIDs = _checkbook_project_querydataset('checkbook:year',array('year_id','year_value'));		
		foreach($yearIDs as $row){
			$NYCYearValues[$row['year_id']] = $row['year_value'];
		}
	}
	return $NYCYearValues[$year_id];
}

/**
 * return full year text value for a give year id ...
 * @param string $year_id
 * @return year
 */
function _getFullYearString(){

   $year_id = _getRequestParamValue('year');
   if(empty($year_id)){
       $year_id = _getRequestParamValue('calyear');
   }
   $yearType = _getRequestParamValue('yeartype');
    if(empty($yearType)){
        $yearType = 'B';
    }

    if(empty($year_id)){
        $year_id = _getCurrentYearID();
    }

    $yearValue = _getYearValueFromID($year_id);
    $yearString = ($yearType == 'B') ? "FY $yearValue" : "CY $yearValue";
    $yearString .= ($yearType == 'B') ? " (July 1, ".($yearValue-1)." - June 30, $yearValue)" : " (January 1, {$yearValue} - December 31, $yearValue)";

    return $yearString;
}

/**
 * return replacment patter for long text string with markup ...
 * @param string $text
 * @param integer $length
 */
function _get_shortened_text($text , $length = 20){
	return $text;
    //return substr($text,0,$length);
}
/**
 * return replacment patter for title ...
 * @param string $text
 * @param integer $length
 */
function _get_tooltip_markup($text, $length = 20, $no_of_lines = 2){
/*  if(trim(strip_tags($text)) == "" or $text == null   )
    return "<div class='blanktext'>-</div>";
 */ 
  return _break_text_custom($text, $length, $no_of_lines );
  //return "<span title='" . $text . "'>". str_replace(" ","&nbsp;", $text ) . "</span>";
  
}

/**
 * return replacment patter for title ...
 * @param string $text
 * @param integer $length
 */
function _break_text_custom($text, $length = 20, $no_of_lines = 2){
  $text_array = explode(" ",$text);
  $offset = 0;
  $remaining_original = $remaining = ($length%2 == 0) ? ($length/$no_of_lines) : (round($length/$no_of_lines)-1);
  $first_line = true;

  $index= 0 ;
  if(strlen($text_array[0]) >= 2 * $remaining_original ){
    return "<span title='" . $text . "'>". substr($text, 0, $length -3 ) . "...</span>";
  }
  else{
    foreach($text_array as $key=>$value){
      if($first_line){
        if(strlen($value) >= $remaining && $index ==0){
          $first_line = false;
          $second_line = true;
          $remaining = 2* $remaining_original -  strlen($value) -1;
          $offset = strlen($value)+1;
        }
        else{
          $remaining = $remaining - (strlen($value)+1);
          if($remaining <= 0){
            $first_line = false;
            $second_line = true;
            $remaining = $remaining_original;
          }
          else{
            $offset += strlen($value)+1;
          }
        }
      }
      if($second_line){
        $prev_remaining = $remaining;
        $remaining = $remaining - (strlen($value)+1)  ;
        if($remaining >= 0){
          $offset = $offset + strlen($value)+1;
        }else{
          $offset = $offset+( $prev_remaining - 3  );
          $second_line = false;
        }
      }
      $index +=1;
    }

    if($offset < strlen($text) )
      return "<span title='" . $text . "'>". substr($text, 0, $offset ) . "...</span>";
    else
      return "<span title='" . $text . "'>". substr($text, 0, $offset ) . "</span>";
  }


}

/**
 * return replacment patter for title ...
 * @param string $text
 * @param integer $length
 */
function _break_text_custom2($text, $length = 18){
  $text_array = explode(" ",$text);
  $breaked_text = "";
  foreach($text_array as $key => $value){
    if(strlen($value) >= $length)
      $value = implode(" ", str_split($value,$length));
    $breaked_text = $breaked_text . " " . $value ;
  } 

  return $breaked_text;

}

/**
 * returns request parameter value from URL($_REQUEST['q'])
 * @param string $paramName
 * @param boolean $fromRequestPath
 * @return request parameter value
 */
function _getRequestParamValue($paramName,$fromRequestPath = 'TRUE'){
    if(empty($paramName)){
        return NULL;
    }
    $value = NULL;
    if($fromRequestPath){
      $urlPath = drupal_get_path_alias($_GET['q']);
      $pathParams = explode('/', $urlPath);
      $index = array_search($paramName,$pathParams);
      if($index !== FALSE){
          $value =  filter_xss($pathParams[($index+1)]);
      }
      if(trim($value) == ""){
        return NULL;
      }
      if(isset($value) || $fromRequestPath){
          return htmlspecialchars_decode($value,ENT_QUOTES);
      }
    }else{
      return filter_xss(htmlspecialchars_decode($_GET[$paramName],ENT_QUOTES));
    }
}

/**
 * Page callback for grid view popupdatatable..
 * @param unknown_type $node
 */
function _checkbook_project_grid_view_popup($node){
    $url = $_GET['q'];
    $_GET['original_q'] = drupal_get_path_alias($_GET['q']);
    $_GET['q'] = drupal_get_path_alias($_GET['refURL']);
    
    //widget_set_uid($node,"gridpopup");
    widget_config($node);

    if(isset($node->widgetConfig->gridConfig->adjustWidgetConfig)){
        eval($node->widgetConfig->gridConfig->adjustWidgetConfig);
    }

    $node->widgetConfig->getTotalDataCount=true;
    $node->widgetConfig->displayType = 'gridview';

    //prepare anything we'll need before loading
    widget_prepare($node);
    //invoke widget specific prepare
    widget_invoke($node, 'widget_prepare');
    widget_data($node);
    $themekey = $node->widgetConfig->gridConfig->template;

    $html = theme($themekey,array('node'=>$node));
    $_GET['q'] = $url;
    return $html;
}

/**
 * Page callback for popupdatatable.. Only called on initial load ...
 * @param unknown_type $node
 */
function _checkbook_project_view_all_popup($node){
  $_GET['q'] = drupal_get_path_alias($_GET['refURL']);
  widget_set_uid($node,"popup");
  widget_config($node);
  //prepare anything we'll need before loading
  widget_prepare($node);
  //invoke widget specific prepare
  widget_invoke($node, 'widget_prepare');
  $node->widgetConfig->dataTableOptions->bPaginate = true;
  $node->widgetConfig->dataTableOptions->sPaginationType = "full_numbers";
  $node->widgetConfig->dataTableOptions->sDom = "<pir><t><p>";
  $node->widgetConfig->disableViewAll = true;
  $node->widgetConfig->ajaxDataPopup = true;
  if(_getRequestParamValue('gridview')){
    $node->widgetConfig->displayType = 'gridview';
    $node->widgetConfig->dataTableOptions->fnDrawCallback = NULL;
    $nodeHTML = widget_invoke($node, 'widget_view');
    $data_url = "/checkbook/view_all_popup_data/node/" . $node->nid . "?refURL=" .  drupal_get_path_alias($_GET['q']) ;
    $nodeHTML = preg_replace('/"sAjaxSource":".*"/','"sAjaxSource":"' . $data_url . '"', $nodeHTML);
    return  $nodeHTML;
  }else{
    $nodeHTML = widget_invoke($node, 'widget_view');
    $data_url = "/checkbook/view_all_popup_data/node/" . $node->nid . "?refURL=" .  drupal_get_path_alias($_GET['q']) ;
    $nodeHTML = preg_replace('/"sAjaxSource":".*"/','"sAjaxSource":"' . $data_url . '"', $nodeHTML);
    echo   $nodeHTML;
  }
}

/**
 * Page callback for  datatable popup pager.. 
 * @param unknown_type $node
 */
function _checkbook_project_view_all_popup_data($node){
	$_GET['q'] = drupal_get_path_alias($_GET['refURL']);	
	$limitPerPage = (isset($node->widgetConfig->limitPerPage) ? $node->widgetConfig->limitPerPage : 10);
	
	widget_config($node);
	//prepare anything we'll need before loading
	widget_prepare($node);
	//invoke widget specific prepare
	widget_invoke($node, 'widget_prepare');
	$node->widgetConfig->limit = $limitPerPage;
	$node->widgetConfig->getTotalDataCount = true;
    if(_getRequestParamValue('gridview')){
        $node->widgetConfig->displayType = 'gridview';
    }
	//load data
	widget_data($node);
	
	switch ($node->widgetConfig->widgetSubType){
		case "ajaxSimple":
			$response = array(
			    "sEcho"=> $_REQUEST['sEcho'],
		        "iTotalRecords"=> $node->totalDataCount,
		        "iTotalDisplayRecords"=>$node->totalDataCount,
				"iDisplayLength"=> $limitPerPage	
			);
			$response['aaData'] = array();
			foreach ($node->data as $datarow) {
				$rowarray = array();
		        foreach ($node->widgetConfig->table_columns as $row){
		              	 $rowarray[] =  $datarow[$row->column];
		        }
				$response['aaData'][] = $rowarray;
			}
			$response = json_encode($response);
			break;
			
		case "dataTableWidgets":
			$response = _widget_data_tables_list_wt_prepare_json($node);
			break;			
		default:
			return "";
			break;			
	}
	
	
	echo $response;
	
}

/**
 * Page callback for displaying node view
 * @param unknown_type $node
 */
function _checkbook_project_node_display($node){
    widget_config($node);

    //prepare anything we'll need before loading
    widget_prepare($node);
    //invoke widget specific prepare
    widget_invoke($node, 'widget_prepare');
    widget_data($node);

    $themekey = $node->widgetConfig->template;
    echo theme($themekey,array('node'=>$node));
}

/**
 * Return the name for the reference object... this will be used to get agency name, department name, vendor name etc from a give id
 * @param unknown_type $object_name
 * @param unknown_type $ref_id
 */
function _checkbook_project_get_name_for_argument($keyword,$id){

	switch ($keyword){
		case "agency_id":
			$agencies = _checkbook_project_querydataset('checkbook:agency',array('agency_id','agency_name'),array($keyword=>$id));
			return htmlentities(ucwords(strtolower($agencies[0]['agency_name'])));
			break;
        case "object_class_id":
            $objects = _checkbook_project_querydataset('checkbook:object_class',array('object_class_id','object_class_name'),array($keyword=>$id));
            return ucwords(strtolower($objects[0]['object_class_name']));
            break;
        case "budget_code_id":
            $budget_codes = _checkbook_project_querydataset('checkbook:budget_code',array('budget_code_id','attribute_name'),array($keyword=>$id));
            return ucwords(strtolower($budget_codes[0]['attribute_name']));
            break;
        case "revenue_category_id":
            $revcat_ids = _checkbook_project_querydataset('checkbook:revenue_category',array('revenue_category_id','revenue_category_name'),array($keyword=>$id));
            return ucwords(strtolower($revcat_ids[0]['revenue_category_name']));
            break;
        case "funding_class_id":
            $fundsrc_ids = _checkbook_project_querydataset('checkbook:ref_funding_class',array('funding_class_id','funding_class_name'),array($keyword=>$id));
            return ucwords(strtolower($fundsrc_ids[0]['funding_class_name']));
            break;
        case "funding_class_code":
            $revcat_codes = _checkbook_project_querydataset('checkbook:funding_class',array('funding_class_code','funding_class_name'),array($keyword=>$id));
            return ucwords(strtolower($revcat_codes[0]['funding_class_name']));
            break;
        case "vendor_id":
            $vendors = _checkbook_project_querydataset('checkbook:vendor',array('vendor_id','legal_name'),array($keyword=>$id));
            return ucwords(strtolower($vendors[0]['legal_name']));
            break;
        case "year_id":
            $years = _checkbook_project_querydataset('checkbook:year',array('year_id','year_value'),array($keyword=>$id));
            return ucwords(strtolower($years[0]['year_value']));
            break;
        case "department_id":
			$depts = _checkbook_project_querydataset('checkbook:department',array('department_id','department_name'),array($keyword=>$id));
			return ucwords(strtolower($depts[0]['department_name']));
			break;
		case "award_method_id":
		    $award_methods = _checkbook_project_querydataset('checkbook:award_method',array('award_method_id','award_method_name'),array($keyword=>$id));
		    return ucwords(strtolower($award_methods[0]['award_method_name']));
		    break;
        case "award_size_id":
            $award_sizes = _checkbook_project_querydataset('checkbook:award_size',array('award_size_id','award_size_name'),array($keyword=>$id));
            return ucwords(strtolower('Contracts ' . $award_sizes[0]['award_size_name']));
            break;
        case "industry_type_id":
            $industry_types = _checkbook_project_querydataset('checkbook:industry_type',array('industry_type_id','industry_type_name'),array($keyword=>$id));
            return ucwords(strtolower($industry_types[0]['industry_type_name']));
            break;
        case "pending_contracts_vendor_id":
            $keyword = 'vendor_id';
            $pending_contracts_vendors = _checkbook_project_querydataset('checkbook:pending_contracts',array('vendor_id','vendor_legal_name'),array($keyword=>$id));
            return ucwords(strtolower($pending_contracts_vendors[0]['vendor_legal_name']));
            break;
        case "pending_contracts_award_method":
            $keyword = 'award_method_code';
            $pending_contracts_award_method = _checkbook_project_querydataset('checkbook:pending_contracts',array('award_method_code','award_method_name'),array($keyword=>$id));
            return ucwords(strtolower($pending_contracts_award_method[0]['award_method_name']));
            break;
        case "employee_id":
              $employees = _checkbook_project_querydataset('checkbook:employee',array('civil_service_title','employee_id'),array($keyword=>$id));
              return ucwords(strtolower($employees[0]['civil_service_title']));
              break;
        case "expenditure_object_id":
          $exp_categorys = _checkbook_project_querydataset('checkbook:expenditure_object',array('expenditure_object_name','expenditure_object_id'),array($keyword=>$id));
          return ucwords(strtolower($exp_categorys[0]['expenditure_object_name']));
          break;
        case "agreement_id":
            $contracts = _checkbook_project_querydataset('checkbook:history_agreement',array('contract_number','agreement_id'),array($keyword=>$id));
            return ucwords(strtolower($contracts[0]['contract_number']));
            break;
        case "master_agreement_id":
              $contracts = _checkbook_project_querydataset('checkbook:history_master_agreement',array('contract_number','master_agreement_id'),array($keyword=>$id));
              return ucwords(strtolower($contracts[0]['contract_number']));
              break;

		default:
			return $id;
			break;
	}

}

/**
 * query the dataset and get data ...
 * @param unknown_type $dataset
 * @param unknown_type $columns
 * @return void|Ambiguous
 */
function _checkbook_project_querydataset($dataset,$columns,$parameters = null){
	try{
		$dataController = data_controller_get_instance();
		$data = $dataController->queryDataset($dataset,$columns, $parameters, NULL,0, NULL,NULL);
	 }
 	catch(Exception $exception){
        log_error("Error getting data from the controller: \n" . $exception->getMessage()/*, $e*/);
        return;
 	}
	return $data;
}

/**
 * Function to adjust custom contract parameters passed to data controller module
 * @param $node Node data
 * @param $parameters Widget parsed request parameters
 * @param $contractType Contract Type
 * @return array adjusted parameters
 */
function _checkbook_project_adjustContractParameterFilters(&$node, &$parameters,$contractType){

    //$contractCategoryParam = 'contcat';
    $contractStatusParam = 'contstatus';
    $yearParam = 'year';
    $yearTypeParam = 'yeartype';

    /*$contCategoryCol = $node->widgetConfig->urlParamMap->$contractCategoryParam;
    $reqContCat = $node->widgetConfig->requestParams[$contCategoryCol];*/

    switch($contractType){
        case "active_registered":

           //adjust dataset
           $yearTypeCol = $node->widgetConfig->urlParamMap->$yearTypeParam;
           $reqYearType = $node->widgetConfig->requestParams[$yearTypeCol];
           if(isset($reqYearType) && ($reqYearType == 'C')){
               if(isset($node->widgetConfig->dataset)){
                    $node->widgetConfig->dataset = 'checkbook:agreement_snapshot_cy';
               }else if(isset($node->widgetConfig->model->series) && is_array($node->widgetConfig->model->series)){
                   foreach($node->widgetConfig->model->series as $series){
                       $series->dataset = 'checkbook:agreement_snapshot_cy';
                   }
               }
           }

           //adjust status
           $contractStatusCol = $node->widgetConfig->urlParamMap->$contractStatusParam;
           $contractStatus = $node->widgetConfig->requestParams[$contractStatusCol];
           if(isset($contractStatus)){
               $parameters[$contractStatusCol]= $contractStatus;
           }

           //adjust year
           $yearCol = isset($node->widgetConfig->urlParamMap->$yearParam) ? $node->widgetConfig->urlParamMap->$yearParam : $node->widgetConfig->urlParamMap->calyear;
           $reqYear = $node->widgetConfig->requestParams[$yearCol];
           if(isset($reqYear)){
               $data_controller_instance = data_controller_get_operator_factory_instance();
               $geCondition = $data_controller_instance->initiateHandler(GreaterOrEqualOperatorHandler::$OPERATOR__NAME, array($reqYear));
               $leCondition = $data_controller_instance->initiateHandler(LessOrEqualOperatorHandler::$OPERATOR__NAME, array($reqYear));
               $parameters['starting_year_id']= $leCondition;
               $parameters['ending_year_id']= $geCondition;
               if($contractStatus=='R'){
                   $parameters['registered_year_id']= array($reqYear);
               }else if($contractStatus=='A'){
                   $parameters['effective_begin_year_id']= $leCondition;
                   $parameters['effective_end_year_id']= $geCondition;
               }
           }

           //adjust category
           /*if(isset($reqContCat)){
               if($reqContCat=='revenue'){
                   $docCodes = 'RCT1';
               }else if($reqContCat=='expense'){
                   $docCodes = array("MMA1","MA1","CT1");
               }else if($reqContCat=='allexpense'){
                   $docCodes = array("MMA1","MA1","CT1","DO1","CTA1");
               }

               $node->widgetConfig->requestParams[$contCategoryCol]= $docCodes;
               $node->widgetConfig->originalRequestParams[$contractCategoryParam]= $docCodes;
               $parameters[$contCategoryCol]= $docCodes;
           }*/

        break;

        /*case "pending":
            //adjust category
            if(isset($reqContCat)){
                if($reqContCat=='revenue'){
                    $docCodes = 'RCT1';
                }else if($reqContCat=='expense'){
                    $docCodes = array("MMA1","MA1","CT1","MAR","CTR","CTA1");
                }

                $node->widgetConfig->requestParams[$contCategoryCol]= $docCodes;
                $node->widgetConfig->originalRequestParams[$contractCategoryParam]= $docCodes;
                $parameters[$contCategoryCol]= $docCodes;
            }
        break;*/

        case "active_registered_all":
            /*if(_getRequestParamValue($contractStatusParam) =='A'){
                $data_controller_instance = data_controller_get_operator_factory_instance();
                $leCondition = $data_controller_instance->initiateHandler(LessOrEqualOperatorHandler::$OPERATOR__NAME, array(date('Y-m-d')));
                $parameters['effective_begin_date'] = $leCondition;
            }*/
        break;

        default:
        break;
    }


}

/** Function to adjust spending parametr filters */
function _checkbook_project_adjust_spending_parameter_filters(&$node, &$parameters){
  $cat = $parameters['spending_category_id'];
  if(isset($parameters['ctx.ctx.vendor_id']) || isset($parameters['ctx.ctx.document_agency_id']) || isset($parameters['ctx.ctx.award_method_id']) || isset($parameters['ctx.ctx.award_size_id']) || isset($parameters['ctx.ctx.industry_type_id'])){
    $year = $parameters['check_eft_issued_nyc_year_id'];
    $calyear = $parameters['calendar_fiscal_year_id'];
    if(isset($year)){
      $parameters['ctx.ctx.fiscal_year_id'] = $year;
      $parameters['ctx.ctx.type_of_year'] = 'B';
    }else if(isset($calyear )){
      $parameters['ctx.ctx.fiscal_year_id'] = $calyear ;
      $parameters['ctx.ctx.type_of_year'] = 'C';
    }
  }
  $dtsmnid = _getRequestParamValue('dtsmnid');
  if($dtsmnid == 20){//From spending landing page
    $data_controller_instance = data_controller_get_operator_factory_instance();
    $parameters['agreement_id'] = $data_controller_instance->initiateHandler(NotEqualOperatorHandler::$OPERATOR__NAME, NULL);
    $parameters['contract_number'] = $data_controller_instance->initiateHandler(NotEqualOperatorHandler::$OPERATOR__NAME, NULL);
  }
  return $parameters;
}

/**
 * Function to adjust custom parameters passed to data controller module
 * @param $node Node data
 * @param $parameters Widget parsed request parameters
 * @return array adjusted parameters
 */
function _checkbook_project_applyParameterFilters($node, $parameters){

    /*
        //SAMPLE DATA
        $originalRequestParams = array('reqParam1'=>'1~2','reqParam2'=>'6','reqParam3'=>'~1');

        urlParamMap = array('reqParam1'=>'dbcol1','reqParam2'=>'dbcol1','reqParam3'=>'dbcol2');
        $paramTypeConfig = array('reqParam1'=>'range','reqParam2'=>'rangeid','reqParam3'=>'range');

        //'dbcol1' will have latest value from request. This should be handled differently. Look at 'dbcol1' value.
        $parameters = array('dbcol1'=>array(6),'dbcol2'=>array(null,1));
        //This function hanldes correct value for 'dbcol1' to organise these values by directly accessging original request parameters
        $configurationTypes = array('dbcol1'=>array(
                                                    'range'=>array(1,2),
                                                    'rangeid'=>array(6))
                                                    );
    */

    $adjustedParameters = $parameters;

    //Convert configuration to array for processing
    $paramTypeConfig = isset($node->widgetConfig->paramTypeConfig) ? get_object_vars($node->widgetConfig->paramTypeConfig) : NULL;
    $defaultParamTypeConfig = isset($node->widgetConfig->defaultParamTypeConfig) ? get_object_vars($node->widgetConfig->defaultParamTypeConfig) : NULL;
    if((empty($paramTypeConfig) && empty($defaultParamTypeConfig)) || empty($adjustedParameters)){//Nothing to adjust
        return $adjustedParameters;
    }

    //Convert configuration to array for processing
    $urlParamMap = isset($node->widgetConfig->urlParamMap) ? get_object_vars($node->widgetConfig->urlParamMap) : array();

    $originalRequestParams = $node->widgetConfig->originalRequestParams;

    //adjust request parameter configurations
    $configurationTypes = array();
    if(!empty($paramTypeConfig)){
        foreach($adjustedParameters as $param => $value){
            $flippedParamTypeConfigKeys = array_flip(array_keys($urlParamMap,$param));
            $intersectKeys =  array_intersect_key($flippedParamTypeConfigKeys,$originalRequestParams);

            foreach($intersectKeys as $intersectKey => $value){
                if(isset($paramTypeConfig[$intersectKey]) && $urlParamMap[$intersectKey] == $param){
                    $configurationTypes[$param][$paramTypeConfig[$intersectKey]] = explode("~",$originalRequestParams[$intersectKey]);
                }
            }
        }
    }

    //adjust default parameter configurations if not adjusted above.
    $defaultParameters = $node->widgetConfig->defaultParameters;
    if(isset($defaultParameters) && isset($defaultParamTypeConfig)){
        $defaultConfigParameters = get_object_vars($defaultParameters);
        $defaultParamTypeConfigArray = get_object_vars($node->widgetConfig->defaultParamTypeConfig);
        if(!empty($defaultParamTypeConfigArray)){
            foreach($defaultConfigParameters as $key => $value){
                if(!array_key_exists($key,$configurationTypes) //It might already been adjusted if passed in request URL.
                    && array_key_exists($key,$defaultParamTypeConfigArray))
                {
                    $tempValues = explode("~", isset($originalRequestParams[$key]) ?  $originalRequestParams[$key] : $value);
                    $adjustedParameters[$key] = $tempValues;
                    $configurationTypes[$key][$defaultParamTypeConfigArray[$key]] = $tempValues;
                }
            }
        }
    }

    if(empty($configurationTypes)){//Nothing to adjust
        return $adjustedParameters;
    }


    $data_controller_instance = data_controller_get_operator_factory_instance();
    foreach($adjustedParameters as $param => $value){
        if(!array_key_exists($param,$configurationTypes)){//Configuration for param do not exist
            continue;
        }

        $paramConfigTypes = $configurationTypes[$param];

        $conditions = NULL;

        foreach($paramConfigTypes as $paramConfigType => $paramValues){
            switch($paramConfigType){
                case "like":
                        $localValue = (is_array($paramValues) && count($paramValues) > 1) ? implode('~',$paramValues) : $paramValues[0];
                        $conditions[] = $data_controller_instance->initiateHandler(WildcardOperatorHandler::$OPERATOR__NAME, array($localValue,FALSE,TRUE));
                    break;
                case "nlike":
                      $localValue = (is_array($paramValues) && count($paramValues) > 1) ? implode('~',$paramValues) : $paramValues[0];
                      $conditions[] = $data_controller_instance->initiateHandler(NotWildcardOperatorHandler::$OPERATOR__NAME, array($localValue,FALSE,TRUE));
                      break; 
                case "autocomplete":
                        $localValue = (is_array($paramValues) && count($paramValues) > 1) ? implode('~',$paramValues) : $paramValues[0];
                        $parts =  explode(" ", $localValue);
                        foreach($parts as $part){
                          //$part = str_replace("(","\\(",$part);
                          $part = _checkbook_regex_replace_pattern($part);
                          $pattern= "(.* " . $part . ".*)|(^" . $part . ".*)"; 
                          $conditions[] = $data_controller_instance->initiateHandler(RegularExpressionOperatorHandler::$OPERATOR__NAME, $pattern);
                        }
                        break;  
                case "eqignorecase":
                          $patterns = array();
                          foreach($paramValues as $value){
                            $patterns[] = "(^" . _checkbook_regex_replace_pattern($value) . "$)";
                          }                          
                          $conditions[] = $data_controller_instance->initiateHandler(RegularExpressionOperatorHandler::$OPERATOR__NAME, implode($patterns,"|"));
                          break;  
                case "neqignorecase":
                      $patterns = array();
                      foreach($paramValues as $value){
                        $patterns[] = "(^" . _checkbook_regex_replace_pattern($value) . "$)";
                      }
                      $conditions[] = $data_controller_instance->initiateHandler(NotRegularExpressionOperatorHandler::$OPERATOR__NAME, implode($patterns,"|"));
                      break;                                                                                       
                case "ne":
                      $conditions[] = $data_controller_instance->initiateHandler(NotEqualOperatorHandler::$OPERATOR__NAME, $paramValues);
                      break;                    
                case "gt":
                        $conditions[] = $data_controller_instance->initiateHandler(GreaterThanOperatorHandler::$OPERATOR__NAME, $paramValues[0]);
                    break;
                case "gte":
                        $conditions[] = $data_controller_instance->initiateHandler(GreaterOrEqualOperatorHandler::$OPERATOR__NAME, $paramValues[0]);
                    break;
                case "range":
                        $conditions[] = $data_controller_instance->initiateHandler(RangeOperatorHandler::$OPERATOR__NAME, array($paramValues[0],$paramValues[1]));
                    break;
                case "le":
                        $conditions[] = $data_controller_instance->initiateHandler(LessOrEqualOperatorHandler::$OPERATOR__NAME, $paramValues[0]);
                    break;
                case "rangeid":
                        //Since support for for OR conditions is not present,
                        //currently negating the selection criteria is only alternative.
                        for($i=1; $i<7;$i++){
                            switch($i){
                                case 1:
                                    if(!in_array($i,$paramValues)){
                                        $conditions[] = $data_controller_instance->initiateHandler(GreaterOrEqualOperatorHandler::$OPERATOR__NAME, 1000000);
                                    }
                                    break;
                                case 2:
                                    if(!in_array($i,$paramValues)){
                                        $conditions[] = $data_controller_instance->initiateHandler(NotInRangeOperatorHandler::$OPERATOR__NAME, array(1000000,10000000));
                                    }
                                    break;
                                case 3:
                                    if(!in_array($i,$paramValues)){
                                        $conditions[] = $data_controller_instance->initiateHandler(NotInRangeOperatorHandler::$OPERATOR__NAME, array(10000000.01,25000000));
                                    }
                                    break;
                                case 4:
                                    if(!in_array($i,$paramValues)){
                                        $conditions[] = $data_controller_instance->initiateHandler(NotInRangeOperatorHandler::$OPERATOR__NAME, array(25000000.01,50000000));
                                    }
                                    break;
                                case 5:
                                    if(!in_array($i,$paramValues)){
                                        $conditions[] = $data_controller_instance->initiateHandler(NotInRangeOperatorHandler::$OPERATOR__NAME, array(50000000.01,100000000));
                                    }
                                    break;
                                case 6:
                                    if(!in_array($i,$paramValues)){
                                        $conditions[] = $data_controller_instance->initiateHandler(LessOrEqualOperatorHandler::$OPERATOR__NAME, 100000000);
                                    }
                                    break;
                            }
                        }
                    break;
                    case "rangeid2":
                      //Since support for for OR conditions is not present,
                      //currently negating the selection criteria is only alternative.
                      for($i=1; $i<7;$i++){
                        switch($i){
                          case 1:
                            if(!in_array($i,$paramValues)){
                              $conditions[] = $data_controller_instance->initiateHandler(GreaterOrEqualOperatorHandler::$OPERATOR__NAME, 1000000000);
                            }
                            break;
                          case 2:
                            if(!in_array($i,$paramValues)){
                              $conditions[] = $data_controller_instance->initiateHandler(NotInRangeOperatorHandler::$OPERATOR__NAME, array(1000000000, 2000000000));
                            }
                            break;
                          case 3:
                            if(!in_array($i,$paramValues)){
                              $conditions[] = $data_controller_instance->initiateHandler(NotInRangeOperatorHandler::$OPERATOR__NAME, array(2000000000.01,3000000000));
                            }
                            break;
                          case 4:
                            if(!in_array($i,$paramValues)){
                              $conditions[] = $data_controller_instance->initiateHandler(NotInRangeOperatorHandler::$OPERATOR__NAME, array(3000000000.01,4000000000));
                            }
                            break;
                          case 5:
                            if(!in_array($i,$paramValues)){
                              $conditions[] = $data_controller_instance->initiateHandler(NotInRangeOperatorHandler::$OPERATOR__NAME, array(4000000000.01, 5000000000));
                            }
                            break;
                          case 6:
                            if(!in_array($i,$paramValues)){
                              $conditions[] = $data_controller_instance->initiateHandler(LessOrEqualOperatorHandler::$OPERATOR__NAME, 5000000000);
                            }
                            break;
                        }
                      }
                      break;
                default:
                    break;
            }
        }

        if(empty($conditions)){
            unset($adjustedParameters[$param]);
        }else{
            $adjustedParameters[$param] = $conditions;
        }
    }

    return $adjustedParameters;
}

/**
 * Function to get DB results
 *
 * @param $isList Indicator for list query or cube query
 * @param $datasetName Dataset Name
 * @param null $columns Required Colummns
 * @param null $parameters Parameters
 * @param null $orderBy Sort Column
 * @param int $startWith Offset
 * @param null $limit Limit
 * @param null|ResultFormatter $resultFormatter ResultFormatter
 * @return DB results
 */
function get_db_results($isList, $datasetName, $columns = NULL, $parameters = NULL, $orderBy = NULL, $startWith = 0, $limit = NULL, ResultFormatter $resultFormatter = NULL){
    $controller = data_controller_get_instance();

    $records = NULL;
    if($isList){
        $records = $controller->queryDataset($datasetName, $columns, $parameters, $orderBy, $startWith, $limit, $resultFormatter);
    }else{
        $records = $controller->queryCube($datasetName, $columns, $parameters, $orderBy, $startWith, $limit, $resultFormatter);
    }

    return $records;
}

/**
 * @param $isList Indicator for list query or cube query
 * @param $datasetName Dataset Name
 * @param $columns Required Colummns
 * @param null $parameters Parameters
 * @param null|ResultFormatter $resultFormatter ResultFormatter
 * @return Record Count
 */
function get_db_result_count($isList, $datasetName, $columns, $parameters = NULL, ResultFormatter $resultFormatter = NULL){
    $controller = data_controller_get_instance();

    $recordCount = NULL;
    if($isList){
        $recordCount = $controller->countDatasetRecords($datasetName, $parameters, $resultFormatter);
    }else{
        $recordCount = $controller->countCubeRecords($datasetName, $columns,$parameters, $resultFormatter);
    }

    return $recordCount;
}

/**
 * Function to get prepared DB query
 *
 * @param $isList Indicator for list query or cube query
 * @param $datasetName Dataset Name
 * @param null $columns Required Colummns
 * @param null $parameters Parameters
 * @param null $orderBy Sort Column
 * @param int $startWith Offset
 * @param null $limit Limit
 * @param null|ResultFormatter $resultFormatter ResultFormatter
 * @return null Query
 * @throws Exception Exception
 */
function get_db_query($isList, $datasetName, $columns = NULL, $parameters = NULL, $orderBy = NULL, $startWith = 0, $limit = NULL, ResultFormatter $resultFormatter = NULL){
    $sqlQuery = NULL;

    //Since we are disabling execution mode below, need to make sure meta model is loaded.
    data_controller_get_metamodel();

    $executionMode = AbstractSQLDataSourceHandler::$STATEMENT_EXECUTION_MODE;
    try {
        AbstractSQLDataSourceHandler::$STATEMENT_EXECUTION_MODE = AbstractSQLDataSourceHandler::STATEMENT_EXECUTION_MODE__IGNORE;
        StatementLogMessageKeeper::reset();

        get_db_results($isList,$datasetName, $columns, $parameters, $orderBy, $startWith, $limit, $resultFormatter);

        $sqlQuery = $isList ? StatementLogMessageKeeper::$statements['dataset.query'][0] : StatementLogMessageKeeper::$statements['cube.query'][0];
    }
    catch (Exception $e) {
        AbstractSQLDataSourceHandler::$STATEMENT_EXECUTION_MODE = $executionMode;
        throw $e;
    }
    AbstractSQLDataSourceHandler::$STATEMENT_EXECUTION_MODE = $executionMode;

    return $sqlQuery;
}

/**
 * Function to get connection to data feeds DB
 *
 * @return Database DB connection
 */
function get_datafeed_connection($db_name = "datafeed"){
    try{
        return Database::getConnection($db_name,'checkbook');
    }catch(Exception $e){
        LogHelper::log_error("Exception getting connection for datafeed. Exception is :".$e);
        throw $e;
    }

}

/**
 * Checks the existence of a request parameter value in the current URL.
 * @param $reqParam: Request Parameter name in the query string
 * @param $value: Value to be checked
 * @return true or false
 */
function _checkbook_project_check_parameter($reqParam, $value=null){
    $urlPath = drupal_get_path_alias($_GET['q']);
    $pathParams = explode('/', $urlPath);
    $index = array_search($reqParam,$pathParams);

    if($pathParams[($index+1)] == $value){
            return TRUE;
    }
    return FALSE;
}

/**
 * returns the year type and year values string to be appended to the URL.
 * @return string
 */
function _checkbook_project_get_year_url_param_string($applySpendingYear=false, $applyPreviousYear=false, $spendingTransactions = false){

    $urlPath = drupal_get_path_alias($_GET['q']);
    $pathParams = explode('/', $urlPath);

    $calyrIndex = array_search("calyear",$pathParams);
    $yeartypeIndex = array_search("yeartype",$pathParams);
    $yrIndex = array_search("year",$pathParams);
    if($spendingTransactions){
        $yearId = $calyrIndex ? $pathParams[($calyrIndex+1)]:$pathParams[($yrIndex+1)];
        if($calyrIndex || $pathParams[$yeartypeIndex+1] == "C"){
            return "/yeartype/C/calyear/" .$yearId;
        }else{
            return "/yeartype/B/year/" . $yearId;
        }
    }else{
        if($calyrIndex){
            $calYear = ($applyPreviousYear ? ($pathParams[($calyrIndex+1)]-1) : $pathParams[($calyrIndex+1)]);
            return "/yeartype/C/calyear/" . $calYear . ($applySpendingYear ? ('/scalyear/'.$calYear) : '');
        }
        if($yeartypeIndex && $pathParams[($yeartypeIndex+1)] == "C"){
            $calYear = ($applyPreviousYear ? ($pathParams[($yrIndex+1)]-1) : $pathParams[($yrIndex+1)]);
          return "/yeartype/C/year/" . $calYear . ($applySpendingYear ? ('/syear/'.$calYear) : '');
        }

        if ($yrIndex){
            $year = ($applyPreviousYear ? ($pathParams[($yrIndex+1)]-1) : $pathParams[($yrIndex+1)]);
            return "/yeartype/B/year/" . $year . ($applySpendingYear ? ('/syear/'.$year) : '');
        }

        $curYear = _getCurrentYearID();
        $curYear = ($applyPreviousYear ? ($curYear-1) : $curYear);
        return  "/yeartype/B/year/". $curYear . ($applySpendingYear ? ('/syear/'.$curYear) : '');
    }
}

/**
* returns keyvalue pair string is present in URL
* @return string
*/
function _checkbook_project_get_url_param_string($key,$key_alias =  null){
  
  $urlPath = drupal_get_path_alias($_GET['q']);
  $pathParams = explode('/', $urlPath);

  $keyIndex = (array_search($key,$pathParams))?array_search($key,$pathParams) : array_search($key_alias,$pathParams);

  if($keyIndex){
    if($key_alias == null){
        return "/$key/" . $pathParams[($keyIndex+1)];
    }
    else{
        return "/$key_alias/" . $pathParams[($keyIndex+1)];
    }
  }
  return '';

 }
 
 /**
  * return helper function to get master agreement id from chidl agreement id
  * @return string
  */
 function _get_document_codes(){
   
   $document_codes = get_db_results(true, 'checkbook:ref_document_code', array("document_code_id","document_code"), null,  NULL,  0, null);
   $codes = array();
   foreach($document_codes as $row){
     $codes[$row['document_code_id']] = $row['document_code'];
   } 
   return $codes;
 }

 /**
  * return helper function to get master agreement id from chidl agreement id
  * @return string
  */
 function _get_master_agreement_id(){
   $agid = (_getRequestParamValue('agid') == null)? 1:_getRequestParamValue('agid') ;
   $results = get_db_results(true, 'checkbook:history_agreement', array("master_agreement_id"), array("original_agreement_id"=>$agid),  NULL,  0, 1);
   $magid = ($results[0]['master_agreement_id'] ==null ) ? 0 : $results[0]['master_agreement_id'];
   return $magid;
 
 }

/**
 * return helper function to get master agreement id details
 * @return string
 */
function _get_master_agreement_details($magid){
    if(!isset($magid)){
        return NULL;
    }
    $results = get_db_results(true, 'checkbook:history_master_agreement', array("document_code@checkbook:ref_document_code","contract_number"), array("master_agreement_id"=>$magid),  NULL,  0, 1);
    //$docTypeCode = ($results[0]['document_code@checkbook:ref_document_code'] ==null ) ? '' : $results[0]['document_code@checkbook:ref_document_code'];
    return isset($results[0]) ? $results[0] : NULL;

}

/**
 * return helper function to get child agreement id details
 * @return string
 */
function _get_child_agreement_details($agid){
  if(!isset($agid)){
    return NULL;
  }
  $results = get_db_results(true, 'checkbook:history_agreement', array("document_code@checkbook:ref_document_code","contract_number"), array("agreement_id"=>$agid),  NULL,  0, 1);
  //$docTypeCode = ($results[0]['document_code@checkbook:ref_document_code'] ==null ) ? '' : $results[0]['document_code@checkbook:ref_document_code'];
  return isset($results[0]) ? $results[0] : NULL;

}
/**
 * determines whether contract is master agreement or not based on the contract number
 * @return string
 */
function _get_contract_type($contnum){
    $contnum_3 = substr($contnum, 0, 3); //get first 3 characters from contract number
    $contnum_4 = substr($contnum, 0, 4); //get first 4 characters from contract number
    if(strtolower($contnum_4) == 'mma1'){
        return $contnum_4;
    }else{
        return $contnum_3;
    }
}

/** Returns contract number link */
function _checkbook_project_get_contract_url($contnum, $agreement_id){
    $contract_type = _get_contract_type($contnum);
    if(strtolower($contract_type) == 'mma1' || strtolower($contract_type) == 'ma1'){
        return '/magid/'.$agreement_id.'/doctype/'.$contract_type;
    }else{
        return '/agid/'.$agreement_id.'/doctype/'.$contract_type;
    }
}

/** Returns contract details page URL */
function _pending_contracts_link_contract_details($contract_number, $original_agreement_id, $doctype, $pending_contract_number = null, $version = null, $linktype= null){
    $lower_doctype = strtolower($doctype);
    if($original_agreement_id){
        if(($lower_doctype == 'ma1') || ($lower_doctype == 'mma1') || ($lower_doctype == 'rct1')){
            $url = '/panel_html/contract_transactions/magid/'.$original_agreement_id.'/doctype/'.$doctype;
        }else{
            $url = '/panel_html/contract_transactions/agid/'.$original_agreement_id.'/doctype/'.$doctype;
        }
    }else{
        $url = '/minipanels/pending_contract_transactions/contract/'.$contract_number.'/version/'.$version;
    }

    if($linktype == 'bar'){
        if(preg_match("/contracts_pending_exp_landing/",$_GET['q']))
            return 'contracts_pending_exp_landing'  .  _checkbook_project_get_year_url_param_string() . '?expandBottomContURL='.$url;
        if(preg_match("/contracts_pending_rev_landing/",$_GET['q']))
            return 'contracts_pending_rev_landing'  .  _checkbook_project_get_year_url_param_string() . '?expandBottomContURL='.$url;
    }
    else{
        if(in_array('expense', _getLastRequestParamValue($_SERVER["HTTP_REFERER"], "contcat"))){
            $url = '/contracts_pending_exp_landing'  .  _checkbook_project_get_year_url_param_string() . '?expandBottomContURL='.$url;
            return '<a href = "'.$url.'">'.$pending_contract_number.'</a>';
        }
        else if(in_array('revenue', _getLastRequestParamValue($_SERVER["HTTP_REFERER"], "contcat"))){
            $url = '/contracts_pending_rev_landing'  .  _checkbook_project_get_year_url_param_string() . '?expandBottomContURL='.$url;
            return '<a href = "'.$url.'">'.$pending_contract_number.'</a>';
        }
        else{
            return '<a class="bottomContainerReload" href = "'.$url.'">'.$pending_contract_number.'</a>';
        }
    }
}

/**
 * Callback to delete files modified more than a set time ago.
 */
function _checkbook_project_clean_files($uri) {
    file_scan_directory($uri, '/.*/', array('callback' => '_checkbook_project_delete_file_if_stale'));
}

/**
 * Callback to delete files modified more than a set time ago.
 */
function _checkbook_project_delete_file_if_stale($uri) {
    $timeDiff = intval(floor((REQUEST_TIME - filemtime($uri)) / (3600)));
    if ( $timeDiff > 2) {//More than 2 hours old
        file_unmanaged_delete($uri);
    }
}

/**
 * Callback to delete files modified more than a set time ago.
 */
function _checkbook_project_execute_sql($sql, $datasource = "main") {
  
  $connection = get_datafeed_connection($datasource);
  $results = null;

  try{
    $results = $connection->query($sql);   
  }catch(Exception $e){
    LogHelper::log_error("Erorr executing DB query for generating: ".$sql .". Exception is: ".$e);
  }

  $output=array();
  foreach($results as $row){
    $output[] = get_object_vars($row);
  }
  return $output;
}

/**
 * Function to adjust column label.
 * @param string $label
 * @return string formattedLabel
 */
function _checkbook_project_adjustTableColumnLabel($label) {
    return "";
    //TODO - This function can be remvoed.
    /*static $isCurrentYear;

    if(!isset($isCurrentYear)){
        $reqYearType = _getRequestParamValue('yeartype');
        $reqYear = _getRequestParamValue('year');
        if(!isset($reqYear)){
            $reqYear = _getRequestParamValue('calyear');
        }

        if(!isset($reqYear)){
            $isCurrentYear = false;
        }else if($reqYearType == 'B' && $reqYear == _getFiscalYearID()){
            $isCurrentYear = true;
        }else if($reqYearType == 'C' && date('Y') == _getYearValueFromID($reqYear)){
            $isCurrentYear = true;
        }else{
            $isCurrentYear = false;
        }
    }

    return $isCurrentYear ? $label .' YTD' : $label;*/
}

/**
 * Function to check if records exists
 * @param $nid
 * @return bool
 */
function _checkbook_project_recordsExists($nid) {
    static $recordExists = array();

    if(isset($recordExists[$nid])){
        return $recordExists[$nid];
    }

    $startTime = microtime(TRUE);
    $node = node_load($nid);

    widget_config($node);

    $node->widgetConfig->getTotalDataCount=true;
    $node->widgetConfig->getData=false;

    //prepare anything we'll need before loading
    widget_prepare($node);
    //invoke widget specific prepare
    widget_invoke($node, 'widget_prepare');
    widget_data($node);

    $recordCount = $node->totalDataCount;
    $recordExist = ($recordCount > 0);
    $recordExists[$nid] = $recordExist;

    LogHelper::log_debug("Record Count time for node $nid:". (1000 * ( microtime(TRUE) - $startTime)) ." msec. Total Records: $recordCount");
    return $recordExist;
}

/**
 * Function to return record count
 * @param $node processed node config
 * @return $recordCount
 */
function _checkbook_project_recordCount($node) {
    static $recordCounts = array();

    if(isset($recordCounts[$node->nid])){
        return $recordCounts[$node->nid];
    }

    $startTime = microtime(TRUE);

    $node->widgetConfig->getTotalDataCount=true;
    $node->widgetConfig->getData=false;

    load_widget_data($node,NULL);

    $recordCount = $node->totalDataCount;
    $recordCounts[$node->nid] = $recordCount;

    LogHelper::log_info("Record Count time for node $node->nid:". (1000 * ( microtime(TRUE) - $startTime)) ." msec. Total Records: $recordCount");
    return $recordCount;
}

/** Returns title for visualization. */
function _checkbook_project_getChartTitle($domain,$subTitle,$by = null, $chart=null) {

    $title = NULL;

    $url = $_GET['q'];

    switch(strtolower($domain)){
        case "contracts":
            if(preg_match("/^contracts_landing/",$url)){
                if(_getRequestParamValue("status") == "A"){
                    $title = 'Active Expense Contracts';
                }else if(_getRequestParamValue("status") == "R"){
                    $title = 'Registered Expense Contracts';
                }
            }else if(preg_match("/^contracts_revenue_landing/",$url)){
                if(_getRequestParamValue("status") == "A"){
                    $title = 'Active Revenue Contracts';
                }else if(_getRequestParamValue("status") == "R"){
                    $title = 'Registered Revenue Contracts';
                }
            }else if(preg_match("/^contracts_pending_rev_landing/",$url)){
                $title = 'Pending Revenue Contracts';
            }else if(preg_match("/^contracts_pending_exp_landing/",$url)){
                $title = 'Pending Expense Contracts';
            }
        break;
    }
    if($chart == 'contracts'){
        return 'Top Ten '.$title.' by Current Amount';
    }else{
        if(!$by)
            return $title . ' ' . $subTitle;
        else
            return $subTitle . ' by '.$title;
    }
}

/** Formats date */
function format_string_to_date($string){
  
  if(string == null or trim($string) == '')
      return "";
  
  return date("m/d/Y",strtotime($string));
}

/**
 * returns last paramater value from URL($_REQUEST['q'])
 * @return request parameter value
 */
function _getLastRequestParamValue($url =  null, $param = null){

    $value = NULL;
    if($url == null) $url = $_GET['q'];
    $urlPath = drupal_get_path_alias($url);
    $pathParams = explode('/', $urlPath);
    if($param == null)
        $paramName = $pathParams[count($pathParams)-2];
    else
        $paramName = $param;
    $index = array_search($paramName,$pathParams);

    if($index != FALSE){
        $value =  filter_xss($pathParams[($index+1)]);
    }
    $reqParams = array($paramName => $value);
    return $reqParams;
}

/**  Escapes special characters in the given string */
function _checkbook_regex_replace_pattern($string){
    $string = str_replace(".", "\\.", $string);
    $string = str_replace("^", "\\^", $string);
    $string = str_replace("$", "\\$", $string);
    $string = str_replace("*", "\\*", $string);
    $string = str_replace("+", "\\+", $string);
    $string = str_replace("(", "\\(", $string);
    $string = str_replace(")", "\\)", $string);
    $string = str_replace("[", "\\[", $string);
    $string = str_replace("{", "\\{", $string);

    return $string;
}

/** Checks if contract number's document type from URL is MA1 or MMA1 */
function _checkbook_project_ma1_mma1_exist(){
    $url = $_GET['q'];
    $urlPath = drupal_get_path_alias($url);
    $pathParams = explode('/', $urlPath);
    $index = array_search('contnum',$pathParams);

    if($index != FALSE){
        $value =  $pathParams[($index+1)];
    }
    $doc_type1 = substr($value, 0, 3);
    $doc_type2 = substr($value, 0, 4);

    if(strtolower($doc_type1) == 'ma1' || strtolower($doc_type2) == 'mma1'){
         return true;
    }
    return false;
}

/** Returns number from the given string */
function _get_num_from_string($string){
    return(int)preg_replace('/[^\-\d]*(\-?\d*).*/','$1',$string);
}