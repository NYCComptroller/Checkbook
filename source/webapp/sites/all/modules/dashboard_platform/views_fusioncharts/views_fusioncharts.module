<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
* 
* Copyright (C) 2012, 2013 New York City
* 
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
* 
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/




require_once dirname(__FILE__) . '/views_fusioncharts_common.inc';

function views_fusioncharts_init() {
    global $conf;
    if ($conf['ITDashboard']['fusionchartsversion'] == 'v3')
        drupal_add_js(drupal_get_path('module', 'views_fusioncharts') .'/fusioncharts/FusionCharts.js');
    else
        drupal_add_js(drupal_get_path('module', 'views_fusioncharts') .'/fusioncharts_os/FusionCharts.js');
}

/**
 * Implementation of hook_views_api().
 */
function views_fusioncharts_views_api() {
    return array('api' => 2);
}

/**
 * Implementation of hook_views_plugin().
 */
function views_fusioncharts_views_plugins() {
    $path = drupal_get_path('module', 'views_fusioncharts');
    $theme_path = "$path/theme";
    $config = array(
        'module'  => 'views_fusioncharts',
        'style'   => array( // Declare this style plugin.
            'views_fusioncharts_singleseries' => array(
                'title'           => 'Fusion Charts (Single-Series)',
                'path'            => $path,
                'help'            => 'Displays views as single-series FusionCharts',
                'handler'         => 'views_plugin_style_fusioncharts_singleseries',
                'theme'           => 'views_views_fusioncharts_singleseries_style',
                'theme path'      => $theme_path,
                'uses row plugin' => FALSE,
                'uses fields'     => TRUE,
                'uses options'    => TRUE,
                'type'            => 'normal',
                'even empty'      => TRUE
            ),
            'views_fusioncharts_multipleseries' => array(
                'title'           => 'Fusion Charts (Multiple-Series)',
                'path'            => $path,
                'help'            => 'Displays views as multiple-series FusionCharts',
                'handler'         => 'views_plugin_style_fusioncharts_multipleseries',
                'theme'           => 'views_views_fusioncharts_multipleseries_style',
                'theme path'      => $theme_path,
                'uses row plugin' => FALSE,
                'uses fields'     => TRUE,
                'uses options'    => TRUE,
                'type'            => 'normal',
                'even empty'      => TRUE
            )
        )
    );
    //kpr($config); die();
    return $config;
}

//this is a theme pre-process function where we can prepare variables for the template
function template_preprocess_views_views_fusioncharts_singleseries_style(&$vars) {
    global $conf;
    $options = $vars['options'];
    $view = $vars['view'];
    $rows_in = $vars['rows'];
    $fields = &$view->field;

    $config = new DOMDocument;
    $chart = $config->createElement('graph');
    $config->appendChild($chart);

    $hasStyle = FALSE;
    $styles = $config->createElement('styles');
    $definition = $config->createElement('definition');
    $application = $config->createElement('application');
    $styles->appendChild($definition);
    $styles->appendChild($application);

    // Captioning
    if (drupal_strlen(trim($options['chart_title'])) > 0) {
        $chart->setAttribute('caption', trim($options['chart_title']));
    }
    if (drupal_strlen(trim($options['chart_subtitle'])) > 0) {
        $chart->setAttribute('subcaption', trim($options['chart_subtitle']));
    }
    // Axes
    if (drupal_strlen(trim($options['xaxisname'])) > 0) {
        $chart->setAttribute('xaxisname', trim($options['xaxisname']));
    }
    if (drupal_strlen(trim($options['yaxisname'])) > 0) {
        $chart->setAttribute('yaxisname', trim($options['yaxisname']));
    }
    if (drupal_strlen(trim($options['yaxismax'])) > 0 && floatval($options['yaxismax']) != 00) {
        $chart->setAttribute('yAxisMaxValue', floatval($options['yaxismax']));
    }
    if (drupal_strlen(trim($options['yaxismin'])) > 0 && floatval($options['yaxismin']) != 00) {
        $chart->setAttribute('yAxisMinValue', floatval($options['yaxismin']));
    }
    if (drupal_strlen(trim($options['yaxisvaluesstep'])) > 0) {
        $chart->setAttribute('yAxisValuesStep', trim($options['yaxisvaluesstep']));
    }

    // Formatting of displayed numeric values
    if (isset($options['values']['show'])) {
        $chart->setAttribute('showValues', intval($options['values']['show']));
    }
    if (isset($options['values']['rotate'])) {
        $chart->setAttribute('rotateValues', intval($options['values']['rotate']));
    }
    if (isset($options['values']['inside'])) {
        $chart->setAttribute('placeValuesInside', intval($options['values']['inside']));
    }

    // General number formatting
    if (isset($options['numformat']['commas']) && intval($options['numformat']['commas']) >= 0) {
        $chart->setAttribute('formatNumber', intval($options['numformat']['commas']));
    }
    if (isset($options['numformat']['abbreviate']) && intval($options['numformat']['abbreviate']) >= 0) {
        $chart->setAttribute('formatNumberScale', intval($options['numformat']['abbreviate']));
    }
    if (isset($options['numformat']['decimals']) && intval($options['numformat']['decimals']) >= 0) {
        $chart->setAttribute('decimals', intval($options['numformat']['decimals']));
        $chart->setAttribute('decimalPrecision', intval($options['numformat']['decimals']));
    }
    if (isset($options['numformat']['prefix']) && drupal_strlen($options['numformat']['prefix']) > 0) {
        $chart->setAttribute('numberPrefix', trim($options['numformat']['prefix']));
    }
    if (isset($options['numformat']['suffix']) && drupal_strlen($options['numformat']['suffix']) > 0) {
        $chart->setAttribute('numberSuffix', trim($options['numformat']['suffix']));
    }


    // Formatting of column/bar elements
    if (isset($options['column']['shadow'])) {
        $chart->setAttribute('showColumnShadow', intval($options['column']['shadow']));
    }
    if (isset($options['column']['rotate'])) {
        $chart->setAttribute('rotateNames', intval($options['column']['rotate']));
    }

    // Formatting of tooltips
    if (isset($options['tooltips']['bgcolor']) && preg_match('!^#?[0-9A-Fa-f]{6}$!', $options['tooltips']['bgcolor'])) {
        $chart->setAttribute('toolTipBgColor', ltrim(drupal_strtoupper($options['tooltips']['bgcolor']), '#'));
    }
    if (isset($options['tooltips']['border']) && preg_match('!^#?[0-9A-Fa-f]{6}$!', $options['tooltips']['border'])) {
        $chart->setAttribute('toolTipBorderColor', ltrim(drupal_strtoupper($options['tooltips']['border']), '#'));
    }

    // General appearance formatting
    if (isset($options['appearance']['border'])) {
        $chart->setAttribute('showBorder', intval($options['appearance']['border']));
    }
    $bgTop = ltrim(drupal_strtoupper($options['appearance']['bg_top']), '#');
    $bgBottom = ltrim(drupal_strtoupper($options['appearance']['bg_bottom']), '#');
    if (!preg_match('!^[0-9A-F]{6}$!', $bgTop)) {
        $bgTop = 'FFFFFF';
    }
    if (!preg_match('!^[0-9A-F]{6}$!', $bgBottom)) {
        $bgBottom = 'FFFFFF';
    }
    //$chart->setAttribute('bgColor', "$bgBottom,$bgTop");
    $chart->setAttribute('bgColor', $bgBottom);

    $alphaTop = intval($options['appearance']['alpha_top']);
    $alphaBottom = intval($options['appearance']['alpha_top']);
    $alphaTop = min(100, max(0, $alphaTop));
    $alphaBottom = min(100, max(0, $alphaBottom));
    //$chart->setAttribute('bgAlpha', "$alphaBottom,$alphaTop");
    $chart->setAttribute('bgAlpha', $alphaBottom);

    if (isset($options['appearance']['round'])) {
        $chart->setAttribute('useRoundEdges', intval($options['appearance']['round']));
    }
    if (isset($options['appearance']['showalternate'])) {
        if (strpos($options['chart_type'], 'Bar') !== FALSE) {
            $attribName = 'showAlternateVGridColor';
        }
        else {
            $attribName = 'showAlternateHGridColor';
        }
        $chart->setAttribute($attribName, intval($options['appearance']['showalternate']));
    }

    $rounded = FALSE;

    if (isset($options['appearance']['round'])) {
        $rounded = intval($options['appearance']['round']);
        $chart->setAttribute('useRoundEdges', $rounded);
    }

    if (!$rounded && isset($options['appearance']['border_thickness'])) {
        $chart->setAttribute('plotBorderThickness', intval($options['appearance']['border_thickness']));
    }

    if (isset($options['appearance']['animation'])) {
        $chart->setAttribute('animation', intval($options['appearance']['animation']));
    }
    if (isset($options['appearance']['rotatelabels'])) {
        $chart->setAttribute('rotateLabels', intval($options['appearance']['rotatelabels']));
    }
    if (isset($options['appearance']['rotatenames'])) {
        $chart->setAttribute('rotateNames', intval($options['appearance']['rotatenames']));
    }
    if (isset($options['appearance']['showshadow'])) {
        $chart->setAttribute('showShadow', intval($options['appearance']['showshadow']));
    }
    if (isset($options['appearance']['hidefusionchartmenu'])) {
        $chart->setAttribute('showFCMenuItem', intval($options['appearance']['hidefusionchartmenu']));
    }
    if (isset($options['appearance']['bordercolor'])  && preg_match('!^#?[0-9A-Fa-f]{6}$!', $options['appearance']['bordercolor'])) {
        $chart->setAttribute('plotBorderColor', ltrim(drupal_strtoupper($options['appearance']['bordercolor']), '#'));
    }
    if (isset($options['appearance']['linecolor'])  && preg_match('!^#?[0-9A-Fa-f]{6}$!', $options['appearance']['linecolor'])) {
        $chart->setAttribute('lineColor', ltrim(drupal_strtoupper($options['appearance']['linecolor']), '#'));
    }
    $datasetCount=count($rows_in);
    if (isset($options['appearance']['maxXaxisValue']) && $datasetCount > $options['appearance']['maxXaxisValue'] ) {
        $chart->setAttribute('showLabels', 0);
        $chart->setAttribute('showNames', 0);
    }
    $chart->setAttribute('plotFillRatio', $options['appearance']['plotgradient'] ? 0 : 100);

    // Canvas Settings
    if (isset($options['canvas']['chartcanvasbgcolor'])) {
        $chart->setAttribute('canvasBgColor', ltrim(drupal_strtoupper($options['canvas']['chartcanvasbgcolor']), '#'));
    }
    if (isset($options['canvas']['chartcanvasbordercolor'])) {
        $chart->setAttribute('canvasBorderColor', ltrim(drupal_strtoupper($options['canvas']['chartcanvasbordercolor']), '#'));
    }
    if (isset($options['canvas']['chartcanvasborderthickness'])) {
        $chart->setAttribute('canvasBorderThickness', intval($options['canvas']['chartcanvasborderthickness']));
    }
    if (isset($options['canvas']['chartcanvasbgalpha'])) {
        $chart->setAttribute('canvasBgAlpha', intval($options['canvas']['chartcanvasbgalpha']));
    }
    if (isset($options['canvas']['chartcanvaspadding'])) {
        $chart->setAttribute('canvasPadding', intval($options['canvas']['chartcanvaspadding']));
    }

    // Fonts
    if (isset($options['fonts']['basefamily']) && drupal_strlen(trim($options['fonts']['basefamily'])) > 0) {
        $chart->setAttribute('baseFont', trim($options['fonts']['basefamily']));
    }
    if (isset($options['fonts']['basesize']) && intval($options['fonts']['basesize']) > 0) {
        $chart->setAttribute('baseFontSize', floatval($options['fonts']['basesize']));
    }
    if (isset($options['fonts']['basefontcolor']) && intval($options['fonts']['basefontcolor']) > 0) {
        $chart->setAttribute('baseFontColor', floatval($options['fonts']['basefontcolor']));
    }

    $fontobjects = array('caption', 'datalabels', 'subcaption', 'xaxisname', 'xaxisvalues', 'yaxisname', 'yaxisvalues');
    foreach ($fontobjects as $fontobject) {
        if (views_fusioncharts_add_style($options, $fontobject, $definition, $application)) {
            $hasStyle = TRUE;
        }
    }

    // Dividing lines configuration
    if (isset($options['divlines']['number']) && intval($options['divlines']['number']) > 0) {
        $chart->setAttribute('numDivLines', intval($options['divlines']['number']));
        if (isset($options['divlines']['color']) && preg_match('!^#?[0-9A-Fa-f]{6}$!', $options['divlines']['color'])) {
            $chart->setAttribute('divLineColor', ltrim(drupal_strtoupper($options['divlines']['color']), '#'));
        }
        if (isset($options['divlines']['dashed']) && $options['divlines']['dashed']) {
            $chart->setAttribute('divLineIsDashed', '1');
            if (isset($options['divlines']['dashlen']) && intval($options['divlines']['dashlen']) > 0) {
                $chart->setAttribute('divLineDashLen', intval($options['divlines']['dashlen']));
            }
            if (isset($options['divlines']['dashgap']) && intval($options['divlines']['dashgap']) > 0) {
                $chart->setAttribute('divLineDashGap', intval($options['divlines']['dashgap']));
            }
        }
    }

    $chart->setAttribute('anchorSides', 4);
    $chart->setAttribute('anchorRadius', 5);
    $chart->setAttribute('useEllipsesWhenOverflow', 0);
    if (isset($options['anchor']['anchorbgcolor'])) {
        $chart->setAttribute('anchorBgColor', ltrim(drupal_strtoupper($options['anchor']['anchorbgcolor']), '#'));
    }
    if (isset($options['anchor']['anchorbordercolor'])) {
        $chart->setAttribute('anchorBorderColor', ltrim(drupal_strtoupper($options['anchor']['anchorbordercolor']), '#'));
    }
    // Data fields
    $xfield = views_fusioncharts_get_field_alias($options['xaxisfield'], $fields);
    $yfield = views_fusioncharts_get_field_alias($options['yaxisfield'], $fields);
    $toolfield = isset($options['tooltips']['field']) ? views_fusioncharts_get_field_alias($options['tooltips']['field'], $fields) : NULL;
    $linkfield = isset($options['columns']['linkfield']) ? views_fusioncharts_get_field_alias($options['columns']['linkfield'], $fields) : NULL;
    $colorfield = isset($options['columns']['colorfield']) ? views_fusioncharts_get_field_alias($options['columns']['colorfield'], $fields) : NULL;
    $anchorsides = isset($options['anchor']['anchorsides']) ? views_fusioncharts_get_field_alias($options['anchor']['anchorsides'], $fields) : NULL;
    $anchorradius = isset($options['anchor']['anchorradius']) ? views_fusioncharts_get_field_alias($options['anchor']['anchorradius'], $fields) : NULL;
    $anchorlink = isset($options['anchor']['anchorlink']) ? views_fusioncharts_get_field_alias($options['anchor']['anchorlink'], $fields) : NULL;

    $hasHTMLTooltext = FALSE;
    foreach ($rows_in as $row) {
        $row = views_fusioncharts_views_render_fields($view, $row);
        /*if (!isset($row->$xfield) || !isset($row->$yfield)) {
            continue;
        }*/
        $set = $config->createElement('set');
        $set->setAttribute('name', $row->$xfield);
        $set->setAttribute('value', $row->$yfield);
        if (isset($anchorsides)) {
            $set->setAttribute('anchorSides', $row->$anchorsides);
        }
        if (isset($anchorradius)) {
            $set->setAttribute('anchorRadius', $row->$anchorradius);
        }
        /*if (isset($options['anchor']['anchorbgcolor'])) {
            $set->setAttribute('anchorBgColor', $options['anchor']['anchorbgcolor']);
        }*/
        if (isset($anchorlink) && isset($row->$anchorlink) && drupal_strlen(trim($row->$anchorlink)) > 0) {
            $set->setAttribute('link', trim(str_replace('&amp;', '&', $row->$anchorlink)));
        }
        if (isset($toolfield) && isset($row->$toolfield) && drupal_strlen(trim($row->$toolfield)) > 0) {
            $tooltext = trim($row->$toolfield);
            if (!$hasHTMLTooltext && $tooltext != strip_tags($tooltext)) {
                $hasHTMLTooltext = TRUE;
            }
            $set->setAttribute('toolText', trim(str_replace("\r\n", "\n", $row->$toolfield)));
        }
        if (isset($colorfield) && isset($row->$colorfield) && preg_match('!^[0-9A-F]{6}$!', ltrim($row->$colorfield, '#'))) {
            $set->setAttribute('color', ltrim($row->$colorfield, '#'));
        }
        if (isset($linkfield) && isset($row->$linkfield) && drupal_strlen(trim($row->$linkfield)) > 0) {
            $set->setAttribute('link', trim(str_replace('&amp;', '&', $row->$linkfield)));
        }

        $chart->appendChild($set);
    }


        $style = $config->createElement('style');
        $style->setAttribute('name', 'tooltip_style');
        $style->setAttribute('type', 'font');
        $style->setAttribute('font', 'Lucida Sans Unicode');
        $style->setAttribute('size', '14');
        $style->setAttribute('color', 'FFFFFF');
        $style->setAttribute('isHTML', '1');
        $definition->appendChild($style);

        $style = $config->createElement('style');
        $style->setAttribute('name', 'datalabels_style');
        $style->setAttribute('type', 'font');
        $style->setAttribute('font', 'Lucida Sans Unicode');
        $style->setAttribute('size', '9');
        $style->setAttribute('color', '000000');
        $style->setAttribute('isHTML', '1');
        $definition->appendChild($style);

        $style = $config->createElement('style');
        $style->setAttribute('name', 'animation_style');
        $style->setAttribute('type', 'animation');
        $style->setAttribute('param', '_alpha');
        $style->setAttribute('start', '0');
        $style->setAttribute('duration', '0.6');
        $definition->appendChild($style);

        $style = $config->createElement('style');
        $style->setAttribute('name', 'shadow_style');
        $style->setAttribute('type', 'Shadow');
        $style->setAttribute('alpha', '40');
        $definition->appendChild($style);

        $apply = $config->createElement('apply');
        $apply->setAttribute('toObject', 'TOOLTIP');
        $apply->setAttribute('styles', 'tooltip_style');
        $application->appendChild($apply);

        $apply = $config->createElement('apply');
        $apply->setAttribute('toObject', 'DATALABELS');
        $apply->setAttribute('styles', 'datalabels_style,animation_style,shadow_style');
        $application->appendChild($apply);

        $apply = $config->createElement('apply');
        $apply->setAttribute('toObject', 'YAXISVALUES');
        $apply->setAttribute('styles', 'datalabels_style');
        $application->appendChild($apply);

        $chart->appendChild($styles);

    $configString = $config->saveXML($chart);

    $vars['chartID'] = $view->name . '__' . $view->current_display;
    if ($conf['ITDashboard']['fusionchartsversion'] == 'v3')
        $vars['swf_path'] = base_path() . drupal_get_path('module', 'views_fusioncharts_singleseries') . '/fusioncharts/' . $options['chart_type'] . '.swf';
    else
        $vars['swf_path'] = base_path() . drupal_get_path('module', 'views_fusioncharts_singleseries') . '/fusioncharts_os/' . $options['chart_type'] . '.swf';
    $vars['width'] = $options['width'];
    $vars['height'] = $options['height'];
    $vars['config'] = $configString;
}

function template_preprocess_views_views_fusioncharts_multipleseries_style(&$vars) {
    global $conf;
    $options = $vars['options'];
    $view = $vars['view'];
    $rows_in = $vars['rows'];
    $fields = &$view->field;

    $config = new DOMDocument;
    $chart = $config->createElement('graph');
    $config->appendChild($chart);

    $hasStyle = FALSE;
    $styles = $config->createElement('styles');
    $definition = $config->createElement('definition');
    $application = $config->createElement('application');
    $styles->appendChild($definition);
    $styles->appendChild($application);

    // Captioning
    if (drupal_strlen(trim($options['chart_title'])) > 0) {
        $chart->setAttribute('caption', trim($options['chart_title']));
    }
    if (drupal_strlen(trim($options['chart_subtitle'])) > 0) {
        $chart->setAttribute('subcaption', trim($options['chart_subtitle']));
    }
    // Axes
    if (drupal_strlen(trim($options['xaxisname'])) > 0) {
        $chart->setAttribute('xaxisname', trim($options['xaxisname']));
    }
    if (drupal_strlen(trim($options['yaxisname'])) > 0) {
        $chart->setAttribute('yaxisname', trim($options['yaxisname']));
    }
    $chart->setAttribute('yAxisMinValue', 0);
    if (drupal_strlen(trim($options['yaxismax'])) > 0 && floatval($options['yaxismax']) != 00) {
        $chart->setAttribute('yAxisMaxValue', floatval($options['yaxismax']));
    }

    // Formatting of displayed numeric values
    if (isset($options['values']['show'])) {
        $chart->setAttribute('showValues', intval($options['values']['show']));
    }
    if (isset($options['values']['rotate'])) {
        $chart->setAttribute('rotateValues', intval($options['values']['rotate']));
    }
    if (isset($options['values']['inside'])) {
        $chart->setAttribute('placeValuesInside', intval($options['values']['inside']));
    }

    // General number formatting
    if (isset($options['numformat']['commas']) && intval($options['numformat']['commas']) >= 0) {
        $chart->setAttribute('formatNumber', intval($options['numformat']['commas']));
    }
    if (isset($options['numformat']['abbreviate']) && intval($options['numformat']['abbreviate']) >= 0) {
        $chart->setAttribute('formatNumberScale', intval($options['numformat']['abbreviate']));
    }
    if (isset($options['numformat']['decimals']) && intval($options['numformat']['decimals']) >= 0) {
        $chart->setAttribute('decimals', intval($options['numformat']['decimals']));
        $chart->setAttribute('decimalPrecision', intval($options['numformat']['decimals']));
    }
    if (isset($options['numformat']['prefix']) && drupal_strlen($options['numformat']['prefix']) > 0) {
        $chart->setAttribute('numberPrefix', trim($options['numformat']['prefix']));
    }
    if (isset($options['numformat']['suffix']) && drupal_strlen($options['numformat']['suffix']) > 0) {
        $chart->setAttribute('numberSuffix', trim($options['numformat']['suffix']));
    }

    // Formatting of column/bar elements
    if (isset($options['column']['shadow'])) {
        $chart->setAttribute('showColumnShadow', intval($options['column']['shadow']));
    }
    if (isset($options['column']['rotate'])) {
        $chart->setAttribute('rotateNames', intval($options['column']['rotate']));
    }

    // Formatting of tooltips
    if (isset($options['tooltips']['bgcolor']) && preg_match('!^#?[0-9A-Fa-f]{6}$!', $options['tooltips']['bgcolor'])) {
        $chart->setAttribute('toolTipBgColor', ltrim(drupal_strtoupper($options['tooltips']['bgcolor']), '#'));
    }
    if (isset($options['tooltips']['border']) && preg_match('!^#?[0-9A-Fa-f]{6}$!', $options['tooltips']['border'])) {
        $chart->setAttribute('toolTipBorderColor', ltrim(drupal_strtoupper($options['tooltips']['border']), '#'));
    }

    // Canvas Settings
    if (isset($options['canvas']['chartcanvasbgcolor'])) {
        $chart->setAttribute('canvasBgColor', ltrim(drupal_strtoupper($options['canvas']['chartcanvasbgcolor']), '#'));
    }
    if (isset($options['canvas']['chartcanvasbordercolor'])) {
        $chart->setAttribute('canvasBorderColor', ltrim(drupal_strtoupper($options['canvas']['chartcanvasbordercolor']), '#'));
    }
    if (isset($options['canvas']['chartcanvasborderthickness'])) {
        $chart->setAttribute('canvasBorderThickness', intval($options['canvas']['chartcanvasborderthickness']));
    }
    if (isset($options['canvas']['chartcanvasbgalpha'])) {
        $chart->setAttribute('canvasBgAlpha', intval($options['canvas']['chartcanvasbgalpha']));
    }
    if (isset($options['canvas']['chartcanvaspadding'])) {
        $chart->setAttribute('canvasPadding', intval($options['canvas']['chartcanvaspadding']));
    }
    if (isset($options['canvas']['canvasbasedepth'])) {
        $chart->setAttribute('canvasBaseDepth', intval($options['canvas']['canvasbasedepth']));
    }
    if (isset($options['canvas']['canvasbgdepth'])) {
        $chart->setAttribute('canvasBgDepth', intval($options['canvas']['canvasbgdepth']));
    }

    // General appearance formatting
    if (isset($options['appearance']['border'])) {
        $chart->setAttribute('showBorder', intval($options['appearance']['border']));
    }
    $bgTop = ltrim(drupal_strtoupper($options['appearance']['bg_top']), '#');
    $bgBottom = ltrim(drupal_strtoupper($options['appearance']['bg_bottom']), '#');
    if (!preg_match('!^[0-9A-F]{6}$!', $bgTop)) {
        $bgTop = 'FFFFFF';
    }
    if (!preg_match('!^[0-9A-F]{6}$!', $bgBottom)) {
        $bgBottom = 'FFFFFF';
    }
    $chart->setAttribute('bgColor', $bgBottom);

    $alphaTop = intval($options['appearance']['alpha_top']);
    $alphaBottom = intval($options['appearance']['alpha_top']);
    $alphaTop = min(100, max(0, $alphaTop));
    $alphaBottom = min(100, max(0, $alphaBottom));
    $chart->setAttribute('bgAlpha', $alphaBottom);
    $rounded = FALSE;

    if (isset($options['appearance']['round'])) {
        $rounded = intval($options['appearance']['round']);
        $chart->setAttribute('useRoundEdges', $rounded);
    }
    if (!$rounded && isset($options['appearance']['border_thickness'])) {
        $chart->setAttribute('plotBorderThickness', intval($options['appearance']['border_thickness']));
    }
    if (isset($options['appearance']['showalternate'])) {
        if (strpos($options['chart_type'], 'Bar') !== FALSE) {
            $attribName = 'showAlternateVGridColor';
        }
        else {
            $attribName = 'showAlternateHGridColor';
        }
        $chart->setAttribute($attribName, intval($options['appearance']['showalternate']));
    }
    if (isset($options['appearance']['animation'])) {
        $chart->setAttribute('animation', intval($options['appearance']['animation']));
    }
    if (isset($options['appearance']['bordercolor'])  && preg_match('!^#?[0-9A-Fa-f]{6}$!', $options['appearance']['bordercolor'])) {
        $chart->setAttribute('plotBorderColor', ltrim(drupal_strtoupper($options['appearance']['bordercolor']), '#'));
    }
    if (isset($options['appearance']['chartbordercolor'])  && preg_match('!^#?[0-9A-Fa-f]{6}$!', $options['appearance']['chartbordercolor'])) {
        $chart->setAttribute('borderColor', ltrim(drupal_strtoupper($options['appearance']['chartbordercolor']), '#'));
    }
    if (isset($options['appearance']['use3dlighting'])) {
        $chart->setAttribute('use3DLighting', intval($options['appearance']['use3dlighting']));
    }
    if (isset($options['appearance']['chartbottommargin'])) {
        $chart->setAttribute('chartBottomMargin', intval($options['appearance']['chartbottommargin']));
    }
    if (isset($options['appearance']['maxcolwidth'])) {
        $chart->setAttribute('maxColWidth', intval($options['appearance']['maxcolwidth']));
    }
    if (isset($options['appearance']['showlegend'])) {
        $chart->setAttribute('showLegend', intval($options['appearance']['showlegend']));
    }
    $datasetCount=count($rows_in);
    if (isset($options['appearance']['maxXaxisValue']) && $datasetCount > $options['appearance']['maxXaxisValue'] ) {
        $chart->setAttribute('showLabels', 0);
        $chart->setAttribute('showNames', 0);
    }
    $chart->setAttribute('plotgradient', '!' . $options['appearance']['plotgradient'] . '!');

    $chart->setAttribute('plotFillRatio', isset($options['appearance']['plotgradient']) && $options['appearance']['plotgradient'] ? '0' : '100');

    // Fonts
    if (isset($options['fonts']['basefamily']) && drupal_strlen(trim($options['fonts']['basefamily'])) > 0) {
        $chart->setAttribute('baseFont', trim($options['fonts']['basefamily']));
    }
    if (isset($options['fonts']['basesize']) && intval($options['fonts']['basesize']) > 0) {
        $chart->setAttribute('baseFontSize', floatval($options['fonts']['basesize']));
    }
    if (isset($options['fonts']['basefontcolor']) && intval($options['fonts']['basefontcolor']) > 0) {
        $chart->setAttribute('baseFontColor', ltrim(drupal_strtoupper($options['fonts']['basefontcolor']), '#'));
    }
    $fontobjects = array('caption', 'datalabels', 'subcaption', 'xaxisname', 'xaxisvalues', 'yaxisname', 'yaxisvalues');
    foreach ($fontobjects as $fontobject) {
        if (views_fusioncharts_add_style($options, $fontobject, $definition, $application)) {
            $hasStyle = TRUE;
        }
    }

    // Dividing lines configuration
    if (isset($options['divlines']['number']) && intval($options['divlines']['number']) > 0) {
        $chart->setAttribute('numDivLines', intval($options['divlines']['number']));
        if (isset($options['divlines']['color']) && preg_match('!^#?[0-9A-Fa-f]{6}$!', $options['divlines']['color'])) {
            $chart->setAttribute('divLineColor', ltrim(drupal_strtoupper($options['divlines']['color']), '#'));
        }
        if (isset($options['divlines']['dashed']) && $options['divlines']['dashed']) {
            $chart->setAttribute('divLineIsDashed', '1');
            if (isset($options['divlines']['dashlen']) && intval($options['divlines']['dashlen']) > 0) {
                $chart->setAttribute('divLineDashLen', intval($options['divlines']['dashlen']));
            }
            if (isset($options['divlines']['dashgap']) && intval($options['divlines']['dashgap']) > 0) {
                $chart->setAttribute('divLineDashGap', intval($options['divlines']['dashgap']));
            }
        }
    }
    $chart->setAttribute('adjustDiv', 0);
    // Data fields
    $xfield = views_fusioncharts_get_field_alias($options['xaxisfield'], $fields);
    $seriesConfig = array();
    for ($i = 0; $i < 6; $i++) {
        $thisOpt = $options['series' . $i];
        if (!isset($thisOpt) || empty($thisOpt['yaxisfield']) || empty($thisOpt['label'])) {
            continue;
        }
        $series = array();
        $series['yaxisfield'] = views_fusioncharts_get_field_alias($thisOpt['yaxisfield'], $fields);
        $series['label'] = $thisOpt['label'];
        $series['color'] = $thisOpt['color'];
        if (isset($thisOpt['color']) && preg_match('!^#?[0-9A-F]{6}$!i', $thisOpt['color'])) {
            $series['color'] = ltrim(drupal_strtoupper($thisOpt['color']), '#');
        }

        if (isset($thisOpt['linkfield']) && ($linkfield = views_fusioncharts_get_field_alias($thisOpt['linkfield'], $fields))) {
            $series['linkfield'] = $linkfield;
        }
        if (isset($thisOpt['tooltipfield']) && ($tooltipfield = views_fusioncharts_get_field_alias($thisOpt['tooltipfield'], $fields))) {
            $series['tooltipfield'] = $tooltipfield;
        }
        $seriesConfig[] = $series;
    }

    $hasHTMLTooltext = FALSE;
    $categories = array();
    $datasets = array();

    $i = 0;
    foreach ($rows_in as $row) {
        $i++;
        $row = views_fusioncharts_views_render_fields($view, $row);
        /*if (!isset($row->$xfield)) {
            continue;
        }*/
        $categories[] = $row->$xfield;
        foreach ($seriesConfig as $series) {
            $label = $series['label'];
            if (!isset($datasets[$label])) {
                $datasets[$label] = array();
            }
            $dataset = array();
            $yaxisfield = $series['yaxisfield'];
            $dataset['value'] = $row->$yaxisfield;
            if ($conf['ITDashboard']['fusionchartsversion'] == 'OS') {
                if ($row->$yaxisfield<0.0001) $dataset['value']=0.0001;
                if ($row->$yaxisfield==='*') $dataset['value']="";
            }
            if (isset($series['color'])) {
                $colorfield = $series['color'];
                if (isset($row->$colorfield)) {
                    $dataset['color'] = trim($row->$colorfield);
                }
            }
            if (isset($series['linkfield'])) {
                $linkfield = $series['linkfield'];
                if (isset($row->$linkfield)) {
                    $dataset['link'] = trim(str_replace('&amp;', '&', $row->$linkfield));
                }
            }
            if (isset($series['tooltipfield'])) {
                $tooltextField = $series['tooltipfield'];
                if (isset($row->$tooltextField)) {
                    $tooltext = $row->$tooltextField;
                    $hasHTMLTooltext = TRUE;
                    /*if (!$hasHTMLTooltext && $tooltext != strip_tags($tooltext)) {
                        $hasHTMLTooltext = TRUE;
                    }*/
                    if ($conf['ITDashboard']['fusionchartsversion'] == 'v3')
                        $dataset['toolText'] = str_replace("\r\n", "\n", $tooltext);
                    //else $hovertext = str_replace("\r\n", "\n", $tooltext);
                }
            }
            $datasets[$label][] = $dataset;
        }
    }
    if (empty($datasets)) {
        $catsElement = $config->createElement('categories');
        $catElement = $config->createElement('category');
        $catElement->setAttribute('name', "");
        $catsElement->appendChild($catElement);
        $chart->appendchild($catsElement);
        $datasetElement = $config->createElement('dataset');
        $datasetElement->setAttribute('seriesName', "");
        $setElement = $config->createElement('set');
        //$setElement->setAttribute("", "");
        $datasetElement->appendChild($setElement);
       //$chart->appendChild($datasetElement);
    }
    else {
        $catsElement = $config->createElement('categories');
        foreach ($categories as $catLabel) {
            $catElement = $config->createElement('category');
            $catElement->setAttribute('name', $catLabel);
            //$catElement->setAttribute('hoverText', $hovertext);
            $catsElement->appendChild($catElement);
        }
        $chart->appendchild($catsElement);

        if (empty($datasets)) $datasets="";
        foreach ($datasets as $label => $dataset) {
            $datasetElement = $config->createElement('dataset');
            $datasetElement->setAttribute('seriesName', $label);
            foreach ($dataset as $set) {
                $setElement = $config->createElement('set');
                foreach ($set as $key => $val) {
                    $setElement->setAttribute($key, $val);
                }
                $datasetElement->appendChild($setElement);
            }
            $chart->appendChild($datasetElement);
        }
    }
    if ($hasHTMLTooltext) {
        $hasStyle = TRUE;

        $style = $config->createElement('style');
        $style->setAttribute('name', 'tooltip_style');
        $style->setAttribute('type', 'font');
        $style->setAttribute('font', 'Lucida Sans Unicode');
        $style->setAttribute('size', '14');
        $style->setAttribute('color', 'FFFFFF');
        $style->setAttribute('isHTML', '1');
        $definition->appendChild($style);
        $apply = $config->createElement('apply');
        $apply->setAttribute('toObject', 'TOOLTIP');
        $apply->setAttribute('styles', 'tooltip_style');
        $application->appendChild($apply);
    }
    if ($hasStyle) {
        $chart->appendChild($styles);
    }

    $configstring = $config->saveXML($chart);

    $vars['chartID'] = $view->name . '__' . $view->current_display;
    if ($conf['ITDashboard']['fusionchartsversion'] == 'v3')
        $vars['swf_path'] = base_path() . drupal_get_path('module', 'views_fusioncharts_multipleseries') . '/fusioncharts/' . $options['chart_type'] . '.swf';
    else
        $vars['swf_path'] = base_path() . drupal_get_path('module', 'views_fusioncharts_multipleseries') . '/fusioncharts_os/' . $options['chart_type'] . '.swf';
    $vars['width'] = $options['width'];
    $vars['height'] = $options['height'];
    $vars['config'] = $configstring;
}

