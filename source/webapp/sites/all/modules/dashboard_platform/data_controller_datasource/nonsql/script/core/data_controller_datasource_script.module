<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
* 
* Copyright (C) 2012, 2013 New York City
* 
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
* 
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


function data_controller_datasource_script_dc_datasource() {
    $items[ScriptDataSource::TYPE] = array(
        'extensions' => array(
            'getMaximumEntityNameLength' => 'UnlimitedEntityNameLengthImpl'
        )
    );

    return $items;
}

function data_controller_datasource_script_dc_datasource_query() {
    $items[ScriptDataSource::TYPE] = array(
        'handler' => 'ScriptDataSourceHandler');

    return $items;
}

function data_controller_datasource_script_get_script_file_name(DatasetMetaData $dataset) {
    $filename = NULL;

    if (isset($dataset->source->scriptFile)) {
        if (!isset($dataset->loadedFromFile)) {
            throw new IllegalStateException(t(
                "Source file from which '@datasetName' dataset was loaded is unknown",
                array('@datasetName' => $dataset->publicName)));
        }

        // calculating script location
        $dir = dirname($dataset->loadedFromFile);
        $filename = $dir . $dataset->source->scriptFile;
    }

    return $filename;
}

function data_controller_datasource_script_prepare_version(DatasetMetaData $dataset, $scriptFileName) {
    $scriptVersion = NULL;
    if (isset($scriptFileName)) {
        $scriptVersion = filemtime($scriptFileName);
        if ($scriptVersion === FALSE) {
            $scriptVersion = NULL;
        }
    }

    return MathHelper::max($scriptVersion, $dataset->version);
}

function data_controller_datasource_script_load_dataset_script($datasetName) {
    $response = NULL;

    try {
        MetaModelFactory::getInstance()->registerAdHocMetaModelFilter('DatasetMetaData', 'datasourceName', NULL);

        $metamodel = data_controller_get_metamodel();

        $dataset = $metamodel->getDataset($datasetName);

        $scriptBody = NULL;

        $scriptFileName = data_controller_datasource_script_get_script_file_name($dataset);
        if (isset($scriptFileName)) {
            $scriptBody = file_get_contents($scriptFileName);
            if ($scriptBody === FALSE) {
                LogHelper::log_error(t(
                    "Could not read content of '@datasetName' dataset script file: @filename",
                    array('@datasetName' => $dataset->publicName, '@filename' => $scriptFileName)));
                throw new IllegalStateException(t(
                    'Could not read content of script file for the dataset: @datasetName',
                    array('@datasetName' => $dataset->publicName)));
            }
        }
        elseif (isset($dataset->source->script)) {
            $scriptBody = $dataset->source->script;
        }
        else {
            throw new UnsupportedOperationException(t(
                'Could not access script body for the dataset: @datasetName',
                array('@datasetName' => $dataset->publicName)));
        }

        $response = $scriptBody;

        // preparing version number
        $selectedVersion = data_controller_datasource_script_prepare_version($dataset, $scriptFileName);
        if (isset($selectedVersion)) {
            drupal_add_http_header('ETag', $selectedVersion);
        }

        drupal_add_http_header('Status', '200 OK');
    }
    catch (Exception $e) {
        LogHelper::log_error($e);
        drupal_add_http_header('Status', '500 Internal Server Error: ' . $e->getMessage());
    }

    return $response;
}
