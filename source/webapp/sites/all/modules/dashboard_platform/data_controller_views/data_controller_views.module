<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
* 
* Copyright (C) 2012, 2013 New York City
* 
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
* 
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/




/**
 * Implementation of hook_views_api().
 */
function data_controller_views_views_api() {
    return array('api' => 3);
}

/**
 * Implementation of hook_views_plugins()
 */
function data_controller_views_views_plugins() {
    $plugins = array(
    'module' => 'data_controller_views',
    'query' => array(
      'data_controller_views_query' => array(
        'title' => t('Data Controller Query'),
        'help' => t('Query will be run using the Data Controller.'),
        'handler' => 'data_controller_views_views_plugin_query',
        'path' => drupal_get_path('module', 'data_controller_views') .'/plugins',
    ),
    )
    );
    return $plugins;
}

/**
 * Implementation of hook_views_data()
 *
 * The basic idea here is we iterate through datasets, and fields available
 * to within each dataset.  This information isused to populate the views
 * module's undertanding of our "virtual tables".
 *
 */
function data_controller_views_views_data() {

    //set up dataset grouping
    $data['data_controller']['table']['group'] = t('Data Controller');

    //set up base table
    $data['data_controller']['table']['base'] = array(
        'field' => 'id',
        'title' => t('Data Controller'),
        'help' => t('Data Controller'),
        'query class' => 'data_controller_views_query',
    );

    //set up the dataset filter
    $data['data_controller']['dataset'] = array(
        'title' => t('Dataset'),
        'help' => t('Dataset'),
        'filter' => array(
          'handler' => 'data_controller_views_filter_dataset',
          'dcapi' => array('filter_key' => 'dataset'),
        )
    );

    //set up the cube/list filter
    $data['data_controller']['cube_or_list'] = array(
        'title' => t('Cube/List'),
        'help' => t('Cube/List'),
        'filter' => array(
          'handler' => 'data_controller_views_filter_cube_or_list',
          'dcapi' => array('filter_key' => 'cube_or_list'),
        )
    );

    //set up the row flattener filter
    $data['data_controller']['row_flattener'] = array(
        'title' => t('Row Flattener'),
        'help' => t('Row Flattener'),
        'filter' => array(
          'handler' => 'data_controller_views_filter_row_flattener',
          'dcapi' => array('filter_key' => 'row_flattener'),
        )
    );

    //set up the csv streamer filter
    $data['data_controller']['csv_streamer'] = array(
        'title' => t('CSV Streamer'),
        'help' => t('CSV Streamer'),
        'filter' => array(
          'handler' => 'data_controller_views_filter_csv_streamer',
          'dcapi' => array('filter_key' => 'csv_streamer'),
        )
    );

    //set up the percents caclulator
    $data['data_controller']['percents_calculator'] = array(
        'title' => t('Percents Calculator'),
        'help' => t('Percents Calculator'),
        'filter' => array(
          'handler' => 'data_controller_views_filter_calc_percents',
          'dcapi' => array('filter_key' => 'percents_calculator'),
        )
    );

    //set up the weighted grader
    $data['data_controller']['weighted_grader'] = array(
        'title' => t('Weighted Grader'),
        'help' => t('Weighted Grader'),
        'filter' => array(
          'handler' => 'data_controller_views_filter_weighted_grader',
          'dcapi' => array('filter_key' => 'weighted_grader'),
        )
    );

    //set up the data controller fields
    $data['data_controller']['data_controller_column'] = array(
        'title' => t('Data Controller Column'),
        'help' => t('Data Controller Column'),
        'field' => array(
              'handler' => 'data_controller_views_field_data_controller_column',
              'click sortable' => TRUE,
          ),
        'argument' => array(
          'handler' => 'data_controller_views_argument_equality',
        ),
        'filter' => array(
          'handler' => 'data_controller_views_filter_equality',
        ),
        'sort' => array(
          'handler' => 'data_controller_views_sort',
        ),
      );

      //add support for dynamically added fields
    //set up the data controller fields
    $data['data_controller']['dynamic_column'] = array(
        'title' => t('Data Controller Dynamic Column'),
        'help' => t('Data Controller Dynamic Column'),
        'field' => array(
              'handler' => 'data_controller_views_field_data_controller_dynamic_column',
              'click sortable' => TRUE,
          ),
        'sort' => array(
          'handler' => 'data_controller_views_sort_dynamic_column',
        ),
      );

      //add support for dynamically added fields
    //set up the data controller fields
//    $data['data_controller']['sort_dynamic_column'] = array(
//        'title' => t('Data Controller Dynamic Column'),
//        'help' => t('Data Controller Dynamic Column'),
//        'field' => array(
//              'handler' => 'data_controller_views_sort_dynamic_column',
//              'click sortable' => FALSE,
//          ),
//      );

    return $data;
}

/**
 * Implementation of hook_views_handlers()
 */
function data_controller_views_views_handlers() {
    return array(
        'info' => array(
          'path' => drupal_get_path('module', 'data_controller_views') . '/handlers',
        ),
        'handlers' => array(
          'data_controller_views_filter_equality' => array(
            'parent' => 'views_handler_filter_equality',
          ),
          'data_controller_views_argument_equality' => array(
            'parent' => 'views_handler_argument',
          ),
          'data_controller_views_field_data_controller_column' => array(
            'parent' => 'views_handler_field',
          ),
          'data_controller_views_field_data_controller_dynamic_column' => array(
            'parent' => 'views_handler_field',
          ),
          'data_controller_views_filter_dataset' => array(
            'parent' => 'views_handler_filter',
          ),
          'data_controller_views_filter_row_flattener' => array(
            'parent' => 'views_handler_filter',
          ),
          'data_controller_views_filter_csv_streamer' => array(
            'parent' => 'views_handler_filter',
          ),
          'data_controller_views_filter_calc_percents' => array(
            'parent' => 'views_handler_filter',
          ),
          'data_controller_views_filter_weighted_grader' => array(
            'parent' => 'views_handler_filter',
          ),
          'data_controller_views_sort' => array(
            'parent' => 'views_handler_sort',
          ),
          'data_controller_views_sort_dynamic_column' => array(
            'parent' => 'views_handler_sort',
          ),
          'data_controller_views_filter_cube_or_list' => array(
            'parent' => 'views_handler_filter',
          )
        ),
    );
}

/**
 * Internal Functions
 */

//this function finds the dataset/cube filterd for the view
//then finds all the fields in that dataset/cube and makes one big options list
//extract here because its used in several places
function _data_controller_views_options_list_all_dataset_fields($view) {
    $options = array();

    $filters = $view->get_items('filter');

    //first find out if this uses cube or list
    $useCube = FALSE;
    foreach ($filters as $name => $filter) {
        if ($filter['field'] == 'cube_or_list') {
            if ($filter['value'] == 'Cube')
                $useCube = TRUE;
        }
    }

    //now find appropriate columns
    foreach ($filters as $name => $filter) {
        if ($filter['field'] == 'dataset') {
            $datasetName = $filter['value'];

            $dataQueryController = data_controller_get_instance();

            if ($useCube) {
                $metamodel = data_controller_get_metamodel();
                $selectedCube = $metamodel->findCubeByDatasetName($datasetName);
                if (isset($selectedCube)) {
                    $cube = $dataQueryController->getCubeMetaData($selectedCube->name);
                    if (isset($cube->dimensions)) {
                        foreach ($cube->dimensions as $dimension) {
                            foreach ($dimension->levels as $level) {
                                $options[$level->name] = $level->publicName;

                                if (isset($level->dataset)) {
                                    foreach ($level->dataset->columns as $column) {
                                        $options[$dimension->name . '.' . $level->name . '.' . $column->name] = "$dimension->publicName::$level->publicName->'$column->publicName'";
                                    }
                                }
                            }
                        }
                    }
                    foreach ($cube->measures as $measure) {
                        $options[$measure->name] = $measure->publicName;
                    }
                }
            }
            else {
                $dataset = $dataQueryController->getDatasetMetaData($datasetName);
                foreach ($dataset->columns as $column) {
                    $options[$column->name] = $column->publicName;
                }
            }
        }
    }

    return $options;
}

function  data_controller_views_get_column_name($view, $tableColumn) {
    $columns = array();
    foreach ($view->field as $key => $field) {
        if ($field->options['data_controller_col'] == $tableColumn) {
            $columns[] = $key;
        }
    }

    return $columns;
}
