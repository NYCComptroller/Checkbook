<?php
/**
*	GNU AFFERO GENERAL PUBLIC LICENSE 
*	   Version 3, 19 November 2007
* This software is licensed under the GNU AGPL Version 3
* 	(see the file LICENSE for details)
*/

function widget_datacontroller_node_info() {
    return array(
        'widget_datacontroller' => array(
            'name' => t('Data Controller Widget'),
            'module' => 'widget_datacontroller',
            'description' => t('Create a Data Controller Widget'),
            'title_label' => t('My Title'),
            'has_title'  => TRUE,
            'has_body'   => FALSE,
            'body_label' => t('My Body')
        )
    );
}

function widget_datacontroller_perm() {
    return array('create widget_datacontroller', 'edit own widget_datacontroller');
}

function widget_datacontroller_access($op, $node, $account) {
    if ($op == 'create') {
        return user_access('create widget_datacontroller', $account);
    } else {
        return (user_access('edit own widget_datacontroller', $account) && ($account->uid == $node->uid));
    }
}

function widget_datacontroller_form(&$node) {
    $type = node_get_types('type', $node);
  // We need to define form elements for the node's title and body.
  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5,
    );
  }

  $form['dataset'] = array(
    '#type' => 'textfield',
    '#title' => t('Data Set'),
    '#required' => TRUE,
    '#default_value' => isset($node->dataset) ? $node->dataset : '',
  	'#maxlength' => 320
  );
  $form['dataset_type'] = array(
    '#type' => 'select',
    '#title' => t('Data Set Type'),
    '#required' => TRUE,
    '#default_value' => isset($node->dataset_type) ? $node->dataset_type : 'cube',
  	'#options' => array('cube' => 'Cube', 'list' => 'List')
  );
  // Now we define the form elements specific to our node type.
  $form['defaultParameters'] = array(
    '#type' => 'textfield',
    '#title' => t('Parameters'),
    '#default_value' => isset($node->defaultParameters) ? $node->defaultParameters : '',
  	'#maxlength' => 320
  );
  $form['columns'] = array(
    '#type' => 'textfield',
    '#title' => t('Column'),
    '#default_value' => isset($node->columns) ? $node->columns : '',
    '#maxlength' => 320
  );
  $form['orderBy'] = array(
    '#type' => 'textfield',
    '#title' => t('Sort Columns'),
    '#default_value' => isset($node->orderBy) ? $node->orderBy : '',
    '#maxlength' => 320
  );

  return $form;
}

/**
 * Implementation of hook_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function widget_datacontroller_insert($node) {
    db_query("INSERT INTO {widget_datacontroller} (vid, nid, dataset, defaultParameters, columns, orderBy) VALUES (%d, %d, '%s', '%s', '%s', '%s')", $node->vid, $node->nid, $node->dataset, $node->defaultParameters, $node->columns, $node->orderBy);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function widget_datacontroller_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    widget_datacontroller_insert($node);
  }
  else {
      $widgetConfig = bindForm($node);

    db_query("UPDATE {widget_datacontroller} SET dataset = '%s', defaultParameters = '%s', columns = '%s', orderBy = '%s' WHERE vid = %d", $node->dataset, $node->defaultParameters, $node->columns, $node->orderBy, $node->vid);
  }
}

function widget_datacontroller_validate($node) {
    $cubeConfig = bindForm($node);
    $cubeConfig->limit = 1; //just need 1 row to make sure that the parameters are valid
    try {
        $result = getData($cubeConfig);
    } catch (Exception $e) {
        form_set_error('dataset', $e->getMessage());
    }
}
/**
 * Implementation of hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function widget_datacontroller_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete_revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {widget_datacontroller} WHERE vid = %d', $node->vid);
      break;
  }
}

/**
 * Implementation of hook_delete().
 *
 * When a node is deleted, we need to remove all related records from our table.
 */
function widget_datacontroller_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {widget_datacontroller} WHERE nid = %d', $node->nid);
}

function widget_datacontroller_load($node) {
    $widgetConfig = db_fetch_object(db_query('SELECT dataset, dataset_type, defaultParameters, columns, orderBy FROM {widget_datacontroller} WHERE vid = %d', $node->vid));
    $cubeConfig = bindForm($widgetConfig);
    $result = getData($cubeConfig);
    $node->resultSet = $result;
    $node->widgetConfig  = $cubeConfig;
    return $widgetConfig;
}

function getData($cubeConfig) {
    $dataQueryController = data_controller_get_instance();
    if ($cubeConfig->dataset_type == 'cube') {
        $result = $dataQueryController->queryCube($cubeConfig->dataset, $cubeConfig->columns, $cubeConfig->defaultParameters, $cubeConfig->orderBy);
    } else {
        $result = $dataQueryController->queryDataset($cubeConfig->dataset, $cubeConfig->columns, $cubeConfig->defaultParameters, $cubeConfig->orderBy);
    }
    return $result;
}

function bindForm($widgetConfig) {
    if (trim($widgetConfig->defaultParameters) == "") {
        $widgetConfig->defaultParameters = NULL;
    }
    if (trim($widgetConfig->orderBy) == "") {
       $widgetConfig->orderBy = NULL;
    }
    $cubeConfig->dataset = $widgetConfig->dataset;
    if (isset($widgetConfig->columns)) {
        $cubeConfig->columns = explode(",", $widgetConfig->columns);
        array_walk($cubeConfig->columns, trim_values);
    }
    if (isset($widgetConfig->orderBy)){
        $cubeConfig->orderBy = explode(",", $widgetConfig->orderBy);
    }
    if (isset($widgetConfig->defaultParameters)) {
        $parameters = explode(",",$widgetConfig->defaultParameters);
        foreach ( $parameters as $parameter){
          $values=explode("=",$parameter);
          $parameterMap[$values[0]]=trim($values[1]);
        }
        $cubeConfig->defaultParameters = $parameterMap;
    }
    $cubeConfig->dataset_type = $widgetConfig->dataset_type;
    return $cubeConfig;
}

function trim_values(&$item, &$key) {
    $item = trim($item);
    $key = trim($key);
}

function widget_datacontroller_view($node, $teaser = FALSE, $page = FALSE) {
  $output = theme('html_table', $node->widgetConfig, $node->resultSet);
  $node->content['myfield'] = array(
    '#value' => $output,
    '#weight' => 1,
  );

  return $node;
}

function widget_datacontroller_theme() {
  return array(
    'html_table' => array(
    'template' => 'html_table',
    'arguments' => array('request', 'resultSet'),
    ),
    'raw_table' => array(
    'function' => 'theme_raw_table',
    'arguments' => array('request', 'resultSet'),
    ),

  );
}

function theme_raw_table($widgetConfig, $resultSet) {
  $output = '<div>';
  $output .='<p>Request Passed In</p>';
  $output .= $widgetConfig;
  $output .= '<p>Response</p>';
  $output .= '<table>';
  foreach ($resultSet as $result) {
      $output .= '<tr>';
      foreach ($result as $gridColumn) {
          $output .= '<td>';
          $output .= $gridColumn;
          $output .= '</td>';
      }
      $output .= '</tr>';
  }
  $output .= '</table>';
  $output .= '</div>';
  unset($gridColumn);
  unset($result);
  return $output;
}

