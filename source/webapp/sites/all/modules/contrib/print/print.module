<?php

/**
 * @defgroup print Printer, email and PDF versions
 *
 * Welcome to the print module developer's documentation. The interesting
 * functions for themers are those that start with 'theme_'.
 *
 * - Printer-friendly pages
 *   - @link print.module Module main file @endlink
 *   - @link print.admin.inc Settings form @endlink
 *   - @link print.pages.inc HTML generation @endlink
 *   - @link print.install (Un)Install routines @endlink
 *   - @link print.tpl.php Page generation template @endlink
 * - Send by email
 *   - @link print_mail.module Module main file @endlink
 *   - @link print_mail.admin.inc Settings form @endlink
 *   - @link print_mail.inc Mail form and send mail routine @endlink
 *   - @link print_mail.install (Un)Install routines @endlink
 * - PDF version
 *   - @link print_pdf.module Module main file @endlink
 *   - @link print_pdf.admin.inc Settings form @endlink
 *   - @link print_pdf.pages.inc PDF generation @endlink
 *   - @link print_pdf.class.inc Auxiliary PHP5 class @endlink
 *   - @link print_pdf.class_php4.inc Auxiliary PHP4 class @endlink
 *   - @link print_pdf.install (Un)Install routines @endlink
 */

/**
 * @file
 * Displays Printer-friendly versions of Drupal pages.
 *
 * This is the core module of the PF package, with the Drupal hooks
 * and other administrative functions.
 *
 * @ingroup print
 */

define('PRINT_PATH', 'print');

define('PRINT_HTML_FORMAT', 'html');
define('PRINT_MAIL_FORMAT', 'mail');
define('PRINT_PDF_FORMAT', 'pdf');
define('PRINT_LOGO_OPTIONS_DEFAULT', 1);
define('PRINT_LOGO_URL_DEFAULT', '');
define('PRINT_FOOTER_OPTIONS_DEFAULT', 1);
define('PRINT_FOOTER_USER_DEFAULT', '');
define('PRINT_CSS_DEFAULT', '');
define('PRINT_KEEP_THEME_CSS_DEFAULT', 0);
define('PRINT_URLS_DEFAULT', 1);
define('PRINT_URLS_ANCHORS_DEFAULT', 0);
define('PRINT_COMMENTS_DEFAULT', 0);
define('PRINT_NEWWINDOW_DEFAULT', 1);

define('PRINT_HTML_LINK_POS_DEFAULT', '{ "link": "link", "block": "block", "help": "help" }');
define('PRINT_HTML_LINK_TEASER_DEFAULT', 0);
define('PRINT_HTML_SHOW_LINK_DEFAULT', 1);
define('PRINT_HTML_NODE_LINK_VISIBILITY_DEFAULT', 0);
define('PRINT_HTML_NODE_LINK_PAGES_DEFAULT', '');
define('PRINT_HTML_LINK_CLASS_DEFAULT', 'print-page');
define('PRINT_HTML_SYS_LINK_VISIBILITY_DEFAULT', 1);
define('PRINT_HTML_SYS_LINK_PAGES_DEFAULT', '');
define('PRINT_HTML_LINK_USE_ALIAS_DEFAULT', 0);
define('PRINT_HTML_BOOK_LINK_DEFAULT', 1);
define('PRINT_HTML_NEW_WINDOW_DEFAULT', 0);
define('PRINT_HTML_SENDTOPRINTER_DEFAULT', 0);
define('PRINT_HTML_WINDOWCLOSE_DEFAULT', 1);

define('PRINT_SOURCEURL_ENABLED_DEFAULT', 1);
define('PRINT_SOURCEURL_DATE_DEFAULT', 0);
define('PRINT_SOURCEURL_FORCENODE_DEFAULT', 0);

define('PRINT_ROBOTS_NOINDEX_DEFAULT', 1);
define('PRINT_ROBOTS_NOFOLLOW_DEFAULT', 1);
define('PRINT_ROBOTS_NOARCHIVE_DEFAULT', 0);

define('PRINT_TYPE_SHOW_LINK_DEFAULT', 1);
define('PRINT_TYPE_COMMENT_LINK_DEFAULT', 0);
define('PRINT_TYPE_URLLIST_DEFAULT', 1);
define('PRINT_TYPE_SYS_URLLIST_DEFAULT', 0);

define('PRINT_ALLOW_NORMAL_LINK', 1);
define('PRINT_ALLOW_BOOK_LINK', 2);
define('PRINT_TYPE_FIELDS_WEIGHT', 30);

/**
 * Implements hook_permission().
 */
function print_permission() {
  return array(
    'administer print' => array(
      'title' => t('Administer the module'),
      'description' => t('Perform maintenance tasks for the print module.'),
    ),
    'node-specific print configuration' => array(
      'title' => t('Node-specific configuration'),
      'description' => t('Enable access to the per-node settings.'),
    ),
    'access print' => array(
      'title' => t('Access the printer-friendly page'),
      'description' => t('View the printer-friendly pages and the links to them in the original pages.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function print_theme() {
  return array(
    'print_format_link' => array(
      'variables' => array(),
    ),
    'print' => array(
      'variables' => array('print' => array(), 'type' => PRINT_HTML_FORMAT, 'node' => NULL),
      'template' => 'print',
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function print_preprocess_node(&$variables) {
  if (($variables['elements']['#view_mode'] == 'print') && isset($variables['elements']['#print_format'])) {
    $type = $variables['elements']['#node']->type;
    $format = $variables['elements']['#print_format'];
    $nid = $variables['elements']['#node']->nid;

    $variables['theme_hook_suggestions'][] = "node__print";
    $variables['theme_hook_suggestions'][] = "node__print__{$format}";
    $variables['theme_hook_suggestions'][] = "node__print__{$format}__node__{$type}";
    $variables['theme_hook_suggestions'][] = "node__print__{$format}__node__{$nid}";
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function print_preprocess_print(&$variables) {
  static $hooks = NULL;
  if (!isset($hooks)) {
    drupal_theme_initialize();
    $hooks = theme_get_registry();
  }

  $variables['page']['#show_messages'] = FALSE;

  // Stolen from theme() so that ALL preprocess functions are called
  $hook = 'page';
  $info = $hooks[$hook];
  if (isset($info['preprocess functions']) || isset($info['process functions'])) {
    foreach (array('preprocess functions', 'process functions') as $phase) {
      if (!empty($info[$phase])) {
        foreach ($info[$phase] as $processor_function) {
          if (function_exists($processor_function)) {
            // We don't want a poorly behaved process function changing $hook.
            $hook_clone = $hook;
            $processor_function($variables, $hook_clone);
          }
        }
      }
    }
  }

  $format = $variables['type'];
  $type = (isset($variables['node']->type)) ? $variables['node']->type : '';
  $nid = (isset($variables['node']->nid)) ? $variables['node']->nid : '';

  $variables['theme_hook_suggestions'] = array();
  $variables['theme_hook_suggestions'][] = "print__node__{$type}";
  $variables['theme_hook_suggestions'][] = "print__node__{$type}__{$nid}";
  $variables['theme_hook_suggestions'][] = "print__{$format}";
  $variables['theme_hook_suggestions'][] = "print__{$format}__node__{$type}";
  $variables['theme_hook_suggestions'][] = "print__{$format}__node__{$type}__{$nid}";
}

/**
 * Implements hook_menu().
 */
function print_menu() {
  $items = array();

  $items[PRINT_PATH] = array(
    'title' => 'Printer-friendly',
    'page callback' => 'print_controller_html',
    'access arguments' => array('access print'),
    'type' => MENU_CALLBACK,
    'file' => 'print.pages.inc',
  );
  $items[PRINT_PATH . '/' . PRINT_PATH] = array(
    'access callback' => FALSE,
  );
  $items['admin/config/user-interface/print'] = array(
    'title' => 'Printer, email and PDF versions',
    'description' => 'Adds a printer-friendly version link to content and administrative pages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_html_settings'),
    'access arguments'  => array('administer print'),
    'file' => 'print.admin.inc',
  );
  $items['admin/config/user-interface/print/html'] = array(
    'title' => 'Web page',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/user-interface/print/html/options'] = array(
    'title' => 'Options',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/user-interface/print/html/strings'] = array(
    'title' => 'Text strings',
    'description' => 'Override the user-facing strings used in the printer-friendly version.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_html_strings_settings'),
    'access arguments'  => array('administer print'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'print.admin.inc',
  );
  $items['admin/config/user-interface/print/common'] = array(
    'title' => 'Settings',
    'description' => 'Settings for the common functionalities for all the print sub-modules.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_main_settings'),
    'access arguments'  => array('administer print'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'file' => 'print.admin.inc',
  );
  $items['admin/config/user-interface/print/common/options'] = array(
    'title' => 'Options',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/user-interface/print/common/strings'] = array(
    'title' => 'Text strings',
    'description' => 'Override the user-facing strings used by the print module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_main_strings_settings'),
    'access arguments'  => array('administer print'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'print.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function print_block_info() {
      $block['print-links']['info'] = t('Printer, email and PDF versions');
      $block['print-links']['cache'] = DRUPAL_CACHE_PER_PAGE;
      $block['print-top']['info'] = t('Most printed');
      $block['print-top']['cache'] = DRUPAL_CACHE_GLOBAL;
      return $block;
}

/**
 * Implements hook_block_view().
 */
function print_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'print-links':
      $nid = preg_replace('!^node/!', '', $_GET['q']);
      if (ctype_digit($nid)) {
        $node = node_load($nid);
        if (!node_access('view', $node)) {
          // If the user doesn't have access to the node, don't show any links
          $block['content'] = '';
          return;
        }
      }
      else {
        $node = NULL;
      }
      $block['content'] = '';
      foreach (array('html' => 'print', 'mail' => 'print_mail', 'pdf' => 'print_pdf') as $format => $module) {
        $link_pos = variable_get('print_' . $format . '_link_pos', drupal_json_decode(PRINT_HTML_LINK_POS_DEFAULT));

        if (!(empty($link_pos['block']))) {
          $func = $module . '_insert_link';

          if (function_exists($func)) {
            $links = $func(NULL, $node);
            if (!empty($links)) {
              $block['content'] .= $links;
            }
          }
        }
      }
      break;
    case 'print-top':
      $block['subject'] = t('Most printed');
      $result = db_query_range("SELECT path FROM {print_page_counter} LEFT JOIN {node} n ON path = CONCAT('node/', n.nid) WHERE status <> 0 OR status IS NULL ORDER BY totalcount DESC", 0, 3)
                  ->fetchAll();
      if (count($result)) {
        $block['content'] = '<div class="item-list"><ul>';
        foreach ($result as $obj) {
          $block['content'] .= '<li>' . l(_print_get_title($obj->path), $obj->path) . '</li>';
        }
        $block['content'] .= '</ul></div>';
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_node_view_alter().
 */
function print_node_view_alter(&$build) {
  if (isset($build['links']['book']['#links']['book_printer'])) {
    $print_html_book_link = variable_get('print_html_book_link', PRINT_HTML_BOOK_LINK_DEFAULT);

    if ($print_html_book_link) {
      $print_html_link_pos = variable_get('print_html_link_pos', drupal_json_decode(PRINT_HTML_LINK_POS_DEFAULT));

      if (!empty($print_html_link_pos['link'])) {
        $format = theme('print_format_link');

        switch ($print_html_book_link) {
          case 1:
            $path = $build['links']['book']['#links']['book_printer']['href'];
            break;
          case 2:
            $print_html_link_use_alias = variable_get('print_html_link_use_alias', PRINT_HTML_LINK_USE_ALIAS_DEFAULT);
            $path = ($print_html_link_use_alias && ($alias = drupal_lookup_path('alias', 'node/' . $build['#node']->nid))) ? $alias : $build['#node']->nid;
            break;
        }

        $build['links']['book']['#links']['book_printer'] = array(
          'href' => PRINT_PATH . '/' . $path,
          'title' => $format['text'],
          'attributes' => $format['attributes'],
          'html' => $format['html'],
        );
      }
      else {
        unset($build['links']['book']['#links']['book_printer']);
      }
    }
  }
}

/**
 * Implements hook_help().
 */
function print_help($path, $arg) {
  switch ($path) {
    case 'admin/help#print':
      // Return a line-break version of the module README
      return _filter_autop(file_get_contents(drupal_get_path('module', 'print') . '/README.txt'));
  }

  $print_html_link_pos = variable_get('print_html_link_pos', drupal_json_decode(PRINT_HTML_LINK_POS_DEFAULT));
  if (($path !== 'node/%') && !(empty($print_html_link_pos['help']))) {
    static $output = FALSE;

    if ($output === FALSE) {
      $output = TRUE;

      $link = print_insert_link();
      if ($link) {
        return "<span class='print-syslink'>$link</span>";
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function print_node_view($node, $view_mode) {
  $print_html_link_pos = variable_get('print_html_link_pos', drupal_json_decode(PRINT_HTML_LINK_POS_DEFAULT));
  $print_html_link_use_alias = variable_get('print_html_link_use_alias', PRINT_HTML_LINK_USE_ALIAS_DEFAULT);

  foreach (array('node', 'comment') as $type) {
    $allowed_type = print_link_allowed(array('type' => $type, 'node' => $node, 'view_mode' => $view_mode));
    if (($allowed_type === PRINT_ALLOW_NORMAL_LINK) && !isset($node->book) && !empty($print_html_link_pos['link'])) {
      drupal_add_css(drupal_get_path('module', 'print') . '/css/printlinks.css');
      $links = array();
      $format = theme('print_format_link');

      $path = (($print_html_link_use_alias) && ($alias = drupal_lookup_path('alias', 'node/' . $node->nid))) ? $alias : $node->nid;

      $links['print_html'] = array(
        'href' => PRINT_PATH . '/' . $path,
        'title' => $format['text'],
        'attributes' => $format['attributes'],
        'html' => $format['html'],
        'query' => print_query_string_encode($_GET, array('q')),
      );

      $link_content = array(
        '#theme' => 'links',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );

      if ($type == 'node') {
        $node->content['links']['print_html'] = $link_content;
      }
      elseif (($type == 'comment') && isset($node->content['comments']['comments'])) {
        foreach ($node->content['comments']['comments'] as $cid => $comment) {
          if (is_numeric($cid)) {
            $link_content['#links']['print_html']['query']['comment'] = $cid;
            $node->content['comments']['comments'][$cid]['links']['print_html'] = $link_content;
          }
        }
      }
    }
  }

  if ($view_mode == 'full') {
      // Insert content corner links
      $node->content['print_links'] = array(
        '#prefix' => '<span class="print-link">',
        '#markup' => '',
        '#suffix' => '</span>',
        '#weight' => -101,
      );
      if (!empty($print_html_link_pos['corner'])) {
        $node->content['print_links']['#markup'] .= print_insert_link(NULL, $node);
      }
  }
}

/**
 * Implements hook_node_load().
 */
function print_node_load($nodes, $types) {
  $ids = array();
  foreach ($nodes as $node) {
    $ids[] = $node->nid;
  }

  $result = db_query('SELECT nid, link, comments, url_list FROM {print_node_conf} WHERE nid IN (:nids)', array(':nids' => $ids))->fetchAllAssoc('nid');

  foreach ($nodes as $node) {
    $node->print_display = isset($result[$node->nid]) ? intval($result[$node->nid]->link) : variable_get('print_display_' . $node->type, PRINT_TYPE_SHOW_LINK_DEFAULT);
    $node->print_display_comment = isset($result[$node->nid]) ? intval($result[$node->nid]->comments) : variable_get('print_display_comment_' . $node->type, PRINT_TYPE_COMMENT_LINK_DEFAULT);
    $node->print_display_urllist = isset($result[$node->nid]) ? intval($result[$node->nid]->url_list) : variable_get('print_display_urllist_' . $node->type, PRINT_TYPE_URLLIST_DEFAULT);
  }
}

/**
 * Implements hook_node_insert().
 */
function print_node_insert($node) {
  if (user_access('administer print') || user_access('node-specific print configuration')) {
    if (!isset($node->print_display)) $node->print_display = variable_get('print_display_' . $node->type, PRINT_TYPE_SHOW_LINK_DEFAULT);
    if (!isset($node->print_display_comment)) $node->print_display_comment = variable_get('print_display_comment_' . $node->type, PRINT_TYPE_COMMENT_LINK_DEFAULT);
    if (!isset($node->print_display_urllist)) $node->print_display_urllist = variable_get('print_display_urllist_' . $node->type, PRINT_TYPE_URLLIST_DEFAULT);

    _print_node_conf_modify($node->nid, $node->print_display, $node->print_display_comment, $node->print_display_urllist);
  }
}

/**
 * Implements hook_node_update().
 */
function print_node_update($node) {
  if (user_access('administer print') || user_access('node-specific print configuration')) {
    if (!isset($node->print_display) || $node->print_display === NULL) {
      $node->print_display = variable_get('print_display_' . $node->type, PRINT_TYPE_SHOW_LINK_DEFAULT);
    }
    if (!isset($node->print_display_comment) || $node->print_display_comment === NULL) {
      $node->print_display_comment = variable_get('print_display_comment_' . $node->type, PRINT_TYPE_COMMENT_LINK_DEFAULT);
    }
    if (!isset($node->print_display_urllist) || $node->print_display_urllist === NULL) {
      $node->print_display_urllist = variable_get('print_display_urllist_' . $node->type, PRINT_TYPE_URLLIST_DEFAULT);
    }

    _print_node_conf_modify($node->nid, $node->print_display, $node->print_display_comment, $node->print_display_urllist);
  }
}

/**
 * Implements hook_node_delete().
 */
function print_node_delete($node) {
  db_delete('print_node_conf')
    ->condition('nid', $node->nid)
    ->execute();
  db_delete('print_page_counter')
    ->condition('path', 'node/' . $node->nid)
    ->execute();
}

/**
 * Implements hook_form_alter().
 */
function print_form_alter(&$form, &$form_state, $form_id) {
  // Add the node-type settings option to activate the printer-friendly version link
  if ((user_access('administer print') || user_access('node-specific print configuration')) &&
      (($form_id == 'node_type_form') || !empty($form['#node_edit_form']))) {
    $form['print'] = array(
      '#type' => 'fieldset',
      '#title' => t('Printer, email and PDF versions'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => PRINT_TYPE_FIELDS_WEIGHT,
      '#group' => 'additional_settings',
    );

    $form['print']['label'] = array(
      '#type' => 'markup',
      '#markup' => '<p><strong>' . t('Printer-friendly version') . '</strong></p>',
    );

    $form['print']['print_display'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show link'),
    );
    $form['print']['print_display_comment'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show link in individual comments'),
    );
    $form['print']['print_display_urllist'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show Printer-friendly URLs list'),
    );

    if ($form_id == 'node_type_form') {
      $form['print']['print_display']['#default_value'] = variable_get('print_display_' . $form['#node_type']->type, PRINT_TYPE_SHOW_LINK_DEFAULT);
      $form['print']['print_display_comment']['#default_value'] = variable_get('print_display_comment_' . $form['#node_type']->type, PRINT_TYPE_COMMENT_LINK_DEFAULT);
      $form['print']['print_display_urllist']['#default_value'] = variable_get('print_display_urllist_' . $form['#node_type']->type, PRINT_TYPE_URLLIST_DEFAULT);
    }
    else {
      $node = $form['#node'];
      $form['print']['print_display']['#default_value'] = isset($node->print_display) ? $node->print_display : variable_get('print_display_' . $node->type, PRINT_TYPE_SHOW_LINK_DEFAULT);
      $form['print']['print_display_comment']['#default_value'] = isset($node->print_display_comment) ? $node->print_display_comment : variable_get('print_display_comment_' . $node->type, PRINT_TYPE_COMMENT_LINK_DEFAULT);
      $form['print']['print_display_urllist']['#default_value'] = isset($node->print_display_urllist) ? $node->print_display_urllist : variable_get('print_display_urllist_' . $node->type, PRINT_TYPE_URLLIST_DEFAULT);
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function print_entity_info_alter(&$info) {
  // Add the 'Print' view mode for nodes.
  $info['node']['view modes'] += array(
    'print' => array(
      'label' => t('Print'),
      'custom settings' => FALSE,
    ),
  );
}

/**
 * Auxiliary function to discover a given page's title
 *
 * @param $path
 *   path of the page being identified
 * @return
 *   string with the page's title
 */
function _print_get_title($path) {
  $path = drupal_get_normal_path($path);
  $nid = preg_replace('!^node/!', '', $path);
  if (ctype_digit($nid)) {
    return db_query("SELECT title FROM {node} WHERE nid = :nid", array(':nid' => $nid))
              ->fetchField();
  }
  else {
    // Not a node, try to get title from the menu system
    $menu_item = menu_get_item($path);
    if (!empty($menu_item['title'])) {
      return $menu_item['title'];
    }
    elseif (drupal_substr($menu_item['page_callback'], 0, 6) == 'views_') {
      // It's a view, load the view to have access to the title
      $view = views_get_view($menu_item['page_arguments']['0']);
      return $view->get_title();
    }
    else {
      return NULL;
    }
  }
}

/**
 * Modify the print_node_conf_table
 *
 * Update the print_node_conf table to reflect the given attributes.
 * If updating to the default values, delete the record.
 *
 * @param $nid
 *   value of the nid field (primary key)
 * @param $link
 *   value of the link field (0 or 1)
 * @param $comments
 *   value of the comments field (0 or 1)
 * @param $url_list
 *   value of the url_list field (0 or 1)
 */
function _print_node_conf_modify($nid, $link, $comments, $url_list) {
    db_merge('print_node_conf')
      ->key(array('nid' => $nid))
      ->fields(array(
        'link' => $link,
        'comments' => $comments,
        'url_list' => $url_list,
      ))
      ->execute();
}

/**
 * Auxiliary function to fill the Printer-friendly link attributes
 *
 * @param $title
 *   text to displayed by the link when hovering over it with the mouse
 * @param $class
 *   class attribute to be used in the link
 * @param $new_window
 *   if TRUE opens the target page in a new window
 * @return
 *   array of formatted attributes
 */
function print_fill_attributes($title = '', $class = '', $new_window = FALSE) {
  $print_newwindow = variable_get('print_newwindow', PRINT_NEWWINDOW_DEFAULT);
  $print_robots_noindex = variable_get('print_robots_noindex', PRINT_ROBOTS_NOINDEX_DEFAULT);

  $attributes = array();
  $attributes['title'] = $title;
  if (!empty($class)) {
    $attributes['class'] = array($class);
  }

  if ($new_window) {
    switch ($print_newwindow) {
    case 0:
      $attributes['target'] = '_blank';
      break;
    case 1:
      $attributes['onclick'] = 'window.open(this.href); return false';
      break;
    }
  }
  if (!empty($print_robots_noindex)) {
    $attributes['rel'] = 'nofollow';
  }
  return $attributes;
}

/**
 * Auxiliary function to set the link text and html flag
 *
 * @param $type
 *   type of link: 0 or 1 for a text-only link, 2 for icon-only and 3 for
 *   both text and icon
 * @param $text
 *   text to be displayed on the link to the printer-friendly page
 * @param $img
 *   path to the icon file
 * @return
 *   array with the link text and html flag
 */
function _print_format_link_aux($type = 0, $text = '', $img = '') {
  if ($type >= 2) {
    $html = TRUE;
    switch ($type) {
    case 2:
      $text = theme('image', array('path' => $img, 'alt' => $text, 'title' => $text, 'attributes' => array('class' => array('print-icon'))));
      break;
    case 3:
      $text = theme('image', array('path' => $img, 'alt' => $text, 'title' => $text, 'attributes' => array('class' => array('print-icon', 'print-icon-margin')))) . $text;
      break;
    }
  }
  else {
    $html = FALSE;
  }

  return array('text' => $text,
               'html' => $html,
              );
}

/**
 * Format the Printer-friendly link
 *
 * @return
 *   array of formatted attributes
 * @ingroup themeable
 */
function theme_print_format_link() {
  $print_html_link_class = variable_get('print_html_link_class', PRINT_HTML_LINK_CLASS_DEFAULT);
  $print_html_new_window = variable_get('print_html_new_window', PRINT_HTML_NEW_WINDOW_DEFAULT);
  $print_html_show_link = variable_get('print_html_show_link', PRINT_HTML_SHOW_LINK_DEFAULT);
  $print_html_link_text = filter_xss(variable_get('print_html_link_text', t('Printer-friendly version')));

  $img = drupal_get_path('module', 'print') . '/icons/print_icon.gif';
  $title = t('Display a printer-friendly version of this page.');
  $class = strip_tags($print_html_link_class);
  $new_window = $print_html_new_window;
  $format = _print_format_link_aux($print_html_show_link, $print_html_link_text, $img);

  return array('text' => $format['text'],
               'html' => $format['html'],
               'attributes' => print_fill_attributes($title, $class, $new_window),
              );
}

/**
 * Auxiliary function to display a formatted Printer-friendly link
 *
 * Function made available so that developers may call this function from
 * their defined pages/blocks.
 *
 * @param $path
 *   path of the original page (optional). If not specified, the current URL
 *   is used
 * @param $node
 *   an optional node object, to be used in defining the path, if used, the
 *   path argument is irrelevant
 * @return
 *   string with the HTML link to the printer-friendly page
 */
function print_insert_link($path = NULL, $node = NULL) {
  if ($node !== NULL) {
    $nid = $node->nid;
    $path = 'node/' . $nid;
    $allowed_type = print_link_allowed(array('node' => $node));
  }
  else {
    if ($path === NULL) {
      $nid = preg_replace('!^node/([\d]+)!', '$1', $_GET['q']);
      $path = $_GET['q'];
    }
    else {
      $nid = NULL;
    }
    $allowed_type = print_link_allowed(array('path' => $path));
  }

  if ($allowed_type) {
    if ($nid !== NULL) {
      if ($allowed_type === PRINT_ALLOW_BOOK_LINK) {
        $path = 'book/export/html/' . $nid;
      }
      else {
        if (variable_get('print_html_link_use_alias', PRINT_HTML_LINK_USE_ALIAS_DEFAULT) && ($alias = drupal_lookup_path('alias', $path))) {
          $path = $alias;
        }
        else {
          $path = $nid;
        }
      }
      $path = PRINT_PATH . '/' . $path;
      $query = print_query_string_encode($_GET, array('q'));
    }
    else {
      $query = NULL;
    }
    drupal_add_css(drupal_get_path('module', 'print') . '/css/printlinks.css');
    $format = theme('print_format_link');
    return '<span class="print_html">' . l($format['text'], $path, array('attributes' => $format['attributes'], 'query' => $query, 'absolute' => TRUE, 'html' => $format['html'])) . '</span>';
  }
  else {
    return FALSE;
  }
}

/**
 * Check if the provided page is enabled according to the visibility settings
 *
 * @param $visibility
 *   current visibility settings:
 *    0 for show on every page except the listed pages
 *    1 for show on only the listed pages
 * @param $pages
 *   list of pages
 * @return
 *   TRUE if it is enabled, FALSE otherwise
 */
function _print_page_match($visibility, $path, $pages) {
  if ($pages) {
    if ($visibility == 2) {
      if (module_exists('php')) {
        return php_eval($pages);
      }
      else {
        return FALSE;
      }
    }
    $alias = drupal_get_path_alias($path);
    $page_match = drupal_match_path($path, $pages);
    if ($alias != $path) {
      $page_match = $page_match || drupal_match_path($alias, $pages);
    }

    return !($visibility xor $page_match);
  }
  else {
    return !$visibility;
  }
}

/**
 * Check if the link to the PF version is allowed depending on the settings
 *
 * @param $args
 *   array containing the possible parameters:
 *    teaser, node, type, path
 * @return
 *   FALSE if not allowed
 *   PRINT_ALLOW_NORMAL_LINK if a normal link is allowed
 *   PRINT_ALLOW_BOOK_LINK if a link is allowed in a book node
 */
function print_link_allowed($args) {
  $view_mode = isset($args['view_mode']) ? $args['view_mode'] : '';
  if ((($view_mode == 'teaser') && !variable_get('print_html_link_teaser', PRINT_HTML_LINK_TEASER_DEFAULT))
      || !in_array($view_mode, array('full', 'teaser', '')) || !user_access('access print')) {
    // If the teaser link is disabled or the user is not allowed
    return FALSE;
  }
  if (!empty($args['path'])) {
    $nid = preg_replace('!^node/!', '', drupal_get_normal_path($args['path']));
    if (ctype_digit($nid)) {
      $args['node'] = node_load($nid);
    }
  }
  if (!empty($args['node'])) {
    static $node_type = '';

    $node = $args['node'];
    if (isset($node->type)) {
      $node_type = $node->type;
    }
    // Node
    $print_html_node_link_visibility = variable_get('print_html_node_link_visibility', PRINT_HTML_NODE_LINK_VISIBILITY_DEFAULT);
    $print_html_node_link_pages = variable_get('print_html_node_link_pages', PRINT_HTML_NODE_LINK_PAGES_DEFAULT);

    if (!_print_page_match($print_html_node_link_visibility, "node/" . $node->nid, $print_html_node_link_pages)) {
      // Page not in visibility list
      return FALSE;
    }
    elseif (isset($args['type']) && ($args['type'] == 'comment') && isset($node_type)) {
      // Link is for a comment, return the configured setting
      // Cache this statically to avoid duplicate queries for every comment.
      static $res = array();
      if (!isset($res[$node->nid])) {
        $res[$node->nid] = db_query("SELECT comments FROM {print_node_conf} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();
      }
      $print_display_comment = ($res && ($res[$node->nid] !== FALSE)) ? $res[$node->nid] : variable_get('print_display_comment_' . $node_type, PRINT_TYPE_COMMENT_LINK_DEFAULT);
      if ($print_display_comment) {
        return PRINT_ALLOW_NORMAL_LINK;
      }
    }
    else {
      // Node link
      if (isset($node->print_display) && !$node->print_display) {
        // Link for this node is disabled
        return FALSE;
      }
      elseif (isset($node->book)) {
        // Node is a book;
        $print_html_book_link = variable_get('print_html_book_link', PRINT_HTML_BOOK_LINK_DEFAULT);
        switch ($print_html_book_link) {
          case 1:
            if (user_access('access printer-friendly version')) {
              return PRINT_ALLOW_BOOK_LINK;
            }
            break;
          case 2:
            return PRINT_ALLOW_NORMAL_LINK;
        }
      }
      else {
        return PRINT_ALLOW_NORMAL_LINK;
      }
    }
  }
  else {
    // 'System' page
    $print_html_sys_link_visibility = variable_get('print_html_sys_link_visibility', PRINT_HTML_SYS_LINK_VISIBILITY_DEFAULT);
    $print_html_sys_link_pages = variable_get('print_html_sys_link_pages', PRINT_HTML_SYS_LINK_PAGES_DEFAULT);

    return _print_page_match($print_html_sys_link_visibility, $_GET['q'], $print_html_sys_link_pages);
  }
  return FALSE;
}

/**
 * Parse an array into a valid urlencoded query string.
 *
 * Modified from drupal_query_string_encode to prevent re-encoding of
 * encoded original. (see #301192)
 *
 * @param $query
 *   The array to be processed e.g. $_GET
 * @param $exclude
 *   The array filled with keys to be excluded.
 * @return
 *   urlencoded string which can be appended to/as the URL query string
 */
function print_query_string_encode($query, $exclude = array(), $parent = '') {
  $params = array();
  foreach ($query as $key => $value) {
    if (in_array($key, $exclude, TRUE)) {
      continue;
    }

    if (is_array($value)) {
      $params[$key] = print_query_string_encode($value, $exclude, $key);
    }
    else {
      $params[$key] = $value;
    }
  }

  return empty($params) ? NULL : $params;
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function print_contextual_links_view_alter(&$element, $items) {
  // Hide all contextual links
  if (preg_match('!^print!', $_GET['q'])) {
    unset($element['#links']);
  }
}

/**
 * Callback function for the preg_replace_callback replacing spaces with %20
 *
 * Replace spaces in URLs with %20
 *
 * @param array $matches
 *   array with the matched tag patterns, usually <a...>+text+</a>
 *
 * @return string
 *   tag with re-written URL
 */
function _print_replace_spaces($matches) {
  // first, split the html into the different tag attributes
  $pattern = '!\s*(\w+\s*=\s*"(?:\\\"|[^"])*")\s*|\s*(\w+\s*=\s*\'(?:\\\\\'|[^\'])*\')\s*|\s*(\w+\s*=\s*\w+)\s*|\s+!';
  $attribs = preg_split($pattern, $matches[1], -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);
  foreach ($attribs as $key => $value) {
    $attribs[$key] = preg_replace('!(\w)\s*=\s*(.*)!', '$1=$2', $value);
  }

  $size = count($attribs);
  for ($i=1; $i < $size; $i++) {
    // If the attribute is href or src, we may need to rewrite the URL in the value
    if (preg_match('!^(?:href|src)\s*?=(.*)!i', $attribs[$i], $urls) > 0) {
      $url = trim($urls[1], " \t\n\r\0\x0B\"'");
      $new_url = str_replace(' ', '%20', $url);
      $matches[1] = str_replace($url, $new_url, $matches[1]);
    }
  }

  $ret = '<' . $matches[1] . '>';
  if (count($matches) == 4) {
    $ret .= $matches[2] . $matches[3];
  }

  return $ret;
}

/**
 * Implements hook_views_api().
 */
function print_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'print'),
  );
}
