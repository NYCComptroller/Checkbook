<?php

/**
 * @file
 * Definition of Drupal\coder_review\Tests\CoderReviewTestCase.
 */

/**
 * Defines the base class for unit testing the Coder_review functionality.
 */
class CoderReviewTestCase extends DrupalUnitTestCase {

  /**
   * Modules to enable.
   *
   * @var array
   */
  public static $modules = array('coder_review');

  /**
   * The name of the review.
   *
   * @var string
   */
  protected $reviewName;

  /**
   * Constructs an instance of the CoderReviewTestCase object.
   *
   * @param string $review_name
   *   The name of the review.
   * @param string|null $id
   *   (optional) The identifier string for this test. Defaults to NULL.
   */
  function __construct($review_name, $id = NULL) {
    parent::__construct($id);
    $this->reviewName = $review_name;

    // Bootstrap enough to run.
    require_once realpath(dirname(__FILE__)) . '/../coder_review.common.inc';
  }

  function setUp() {
    parent::setUp('coder_review');
  }

  /**
   * Runs a Coder_review test.
   *
   * @param string $code
   *   The string of code to review.
   * @param int $severity
   *   (optional) A severity code as an integer. Defaults to SEVERITY_MINOR.
   *
   * @return array
   *   A Results array.
   */
  function runTest($code, $severity = SEVERITY_MINOR) {
    // Get the available reviews.
    $reviews = coder_review_reviews();

    // Get the required extensions.
    $ext = variable_get('coder_review_php_ext', array('inc', 'php', 'install', 'test'));

    // Review code snippets in the test files.
    $coder_args = array(
      '#severity' => $severity,
      '#filename' => 'snippet.php',
      '#test' => $code,
      '#php_extensions' => $ext,
      '#include_extensions' => _coder_review_get_reviews_extensions($ext, $reviews),
      '#settings_ignore' => 1,
    );
    _coder_review_read_and_parse_file($coder_args);
    $reviews[$this->reviewName]['#review_name'] = $this->reviewName;
    $results = do_coder_review($coder_args, $reviews[$this->reviewName]);

    // Remove statistics such that we only return warnings.
    unset($results['#stats']);
    return $results;
  }

  /**
   * Runs a Coder_review module test.
   *
   * @param int $severity
   *   (optional) A severity code as an integer. Defaults to SEVERITY_MINOR.
   *
   * @return array
   *   A Coder Results array.
   */
  function runTestModuleTest($severity = SEVERITY_MINOR) {
    // Get the available reviews.
    $reviews = coder_review_reviews();

    // Get the required extensions.
    $ext = variable_get('coder_review_php_ext', array('inc', 'php', 'install', 'test'));

    // Review the coder_review_test module.
    $coder_args = array(
      '#severity' => $severity,
      '#filename' => drupal_get_path('module', 'coder_review_test') . '/coder_review_test.module',
      '#php_extensions' => $ext,
      '#include_extensions' => _coder_review_get_reviews_extensions($ext, $reviews),
    );
    _coder_review_read_and_parse_file($coder_args);
    $reviews[$this->reviewName]['#review_name'] = $this->reviewName;
    $results = do_coder_review($coder_args, $reviews[$this->reviewName]);

    // Remove statistics such that we only return warnings.
    unset($results['#stats']);
    return $results;
  }

  /**
   * Asserts that some source code PASSES the Coder_review process.
   *
   * @param string $code
   *   The code snippet that was reviewed.
   */
  protected function assertCoderReviewPass($code) {
    // Run the coder review on the code snippet.
    $results = $this->runTest($code);

    // Display the test results.
    $message = 'Pass: ';
    $message .= $this->getWarnings($results);
    $message .= '<pre>' . check_plain(str_replace(array('%s', '%d'), array('%%s', '%%d'), $code)) . '</pre>';
    $this->assertTrue(count($results) == 0, $message);
  }

  /**
   * Asserts that some source code FAILS the Coder_review process.
   *
   * @param string $code
   *   The code snippet that was reviewed.
   */
  protected function assertCoderReviewFail($code) {
    // Run the coder review on the code snippet.
    $results = $this->runTest($code);

    // Display the test results.
    $message = 'Fail: ';
    $message .= $this->getWarnings($results);
    $message .= '<pre>' . check_plain(str_replace(array('%s', '%d'), array('%%s', '%%d'), $code)) . '</pre>';
    $this->assertTrue(count($results), $message);
  }

  /**
   * Retrieves the warnings from a Coder test as a concatenated string.
   *
   * @param array $results
   *   A Coder Result array.
   *
   * @return string
   *   A concatenated string of warnings for this test.
   */
  private function getWarnings($results) {
    $warnings = array();
    foreach ($results as $error) {
      $warning = _coder_review_warning($error['rule']);
      if (is_string($warning)) {
        $warnings[] = $warning;
      }
      elseif (isset($warning['#text'])) {
        $warnings[] = $warning['#text'];
      }
      elseif (isset($warning['#warning'])) {
        $warnings[] = $warning['#warning'];
      }
      else {
        $warnings[] = 'Unknown warning (simpletest)';
      }
    }
    return implode('; ', $warnings);
  }
}
