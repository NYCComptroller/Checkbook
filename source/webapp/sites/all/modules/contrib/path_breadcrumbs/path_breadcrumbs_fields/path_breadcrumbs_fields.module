<?php

/**
 * Implements hook_token_info().
 */
function path_breadcrumbs_token_info() {
  $info = array();

  // Get info about all fields.
  $fields = field_info_fields();
  foreach ($fields as $field_name => $field) {

    // Get entities to which field is attached and provide tokens for them.
    foreach ($field['bundles'] as $entity_name => $entity) {
      for ($i = 0; $i < 4; $i++) {
        // Provide token for field key.
        $info['tokens'][$entity_name][$field_name . ':' . $i . ':key'] = array(
          'name' => t('Key for field !field with delta !delta', array('!field' => $field_name, '!delta' => $i)),
        );
        // Provide token for field value.
        $info['tokens'][$entity_name][$field_name . ':' . $i . ':value'] = array(
          'name' => t('Value for field !field with delta !delta', array('!field' => $field_name, '!delta' => $i)),
        );
      }
    }
  }

  return $info;
}

/**
 * Implements hook_tokens().
 */
function path_breadcrumbs_fields_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if (empty($data['entity'])) {
    return array();
  }

  foreach ($tokens as $token) {

    // Check if token matches field_name:delta:value rule.
    $field = _path_breadcrumbs_field_field_check_token($token);
    if (!$field) {
      // If token do not match field_name:delta:value rule just skip it.
      continue;
    }

    // Extracts $field_name, $field_delta, $field_value.
    extract($field);

    // Try to get field values from the entity.
    $field_values = field_get_items($data['entity_type'], $data['entity'], $field_name);

    // Load storage type of field ('value', 'tid', 'nid', etc.).
    $storage = _path_breadcrumbs_field_get_field_storage($data['entity_type'], $data['entity'], $field_name);
    if (!isset($field_values[$field_delta][$storage])) {
      return array();
    }

    // Replace token with field key or field value.
    if ($field_value == 'value') {
      $field_view = field_view_value($data['entity_type'], $data['entity'], $field_name, array($storage => $field_values[$field_delta][$storage]));
      $replacements[$token] = strip_tags(render($field_view));
    }
    elseif ($field_value == 'key') {
      $replacements[$token] = $field_values[$field_delta][$storage];
    }
  }

  return $replacements;
}

/**
 * Check if token matches field_name:delta:value rule.
 *
 * @param $token
 * @return array|bool
 */
function _path_breadcrumbs_field_field_check_token($token) {

  // Allowed field's delta.
  $field_deltas = array(0, 1, 2, 3, 4);

  // Explode token. Module searching for a token like 'field-name:0:key'.
  $parts = explode(':', $token);

  // See if token matches the rule.
  if (sizeof($parts) == 3) {
    $delta = $parts[1];
    if (in_array($delta, $field_deltas)) {
      // Part before delta should be a field name.
      // Part after delta should be field value ('value' or 'key').
      if (stripos($parts[0], 'field') !== FALSE && in_array($parts[2], array('value', 'key'))) {
        return array(
          'field_name' => str_replace('-', '_', $parts[0]),
          'field_delta' => $delta,
          'field_value' => $parts[2],
        );
      }
    }
  }

  // Token not matches rule.
  return FALSE;
}

/**
 * Get field storage value.
 *
 * @param $entity_type
 * @param $entity
 * @param $field_name
 * @return mixed
 */
function _path_breadcrumbs_field_get_field_storage($entity_type, $entity, $field_name) {
  // Get field info.
  $field_info    = field_info_field($field_name);
  $field_storage = array_shift($field_info['storage']['details']['sql'][FIELD_LOAD_CURRENT]);

  // Field value key (i.e. 'value' or 'nid').
  $storage_keys  = array_keys($field_storage);
  return $storage_keys[0];
}
