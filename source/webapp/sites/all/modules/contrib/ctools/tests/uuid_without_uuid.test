<?php

/**
 * Test the UUID handling without the UUID module being present.
 */
class CtoolsUUIDWithoutUUID extends DrupalWebTestCase {

  /**
   * {@inheritDoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'UUID handing, without UUID module',
      'description' => 'Check that the CTools UUID functions behave correctly when the UUID module is not installed.',
      'group' => 'ctools',
      'dependencies' => array('ctools'),
    );
  }

  /**
   * {@inheritDoc}
   */
  function setUp(array $modules = array()) {
    $modules[] = 'ctools';
    parent::setUp($modules);
  }

  /**
   * Check the UUID_PATTERN constant exists.
   *
   * @todo Fix this so testbot doesn't fail.
   */
  public function DISABLED_testHaveUUIDpattern() {
    ctools_include('uuid');
    $this->assertTrue(defined('UUID_PATTERN'), 'The UUID_PATTERN constant exists.');
    $this->assertTrue(is_string(UUID_PATTERN) && strlen(UUID_PATTERN) > 12, 'The UUID_PATTERN has an appropriate value.');
  }

  /**
   * Check we can get a UUID when .
   *
   * NB: This test will use one (and only one) of the mechanisms available
   * from pear,
   *
   * @todo Fix this so testbot doesn't fail.
   */
  public function DISABLED_testMakeNewUUIDRaw() {
    // drupal_get_filename will report even if the module is disabled.
    if (drupal_get_filename('module', 'uuid') && module_exists('uuid')) {
      module_disable(array('uuid'));
    }

    ctools_include('uuid');
    $uuid = _ctools_uuid_generate_php();
    $this->assertTrue(ctools_uuid_is_valid($uuid), 'UUID generated (ctoolsphp): ' . $uuid);
  }

  /**
   * Check we can get a UUID when .
   *
   * NB: This test will use one (and only one) of the mechanisms available
   * from pear,
   *
   * @todo Fix this so testbot doesn't fail.
   */
  public function DISABLED_testMakeNewUUIDWrapper() {
    // drupal_get_filename will report even if the module is disabled.
    if (drupal_get_filename('module', 'uuid') && module_exists('uuid')) {
      module_disable(array('uuid'));
    }

    $uuid = ctools_uuid_generate();
    $this->assertTrue(ctools_uuid_is_valid($uuid), 'UUID generated (ctools): ' . $uuid);
  }

  /**
   * Check we can verify that a string looks like a UUID.
   *
   * @todo Fix this so testbot doesn't fail.
   */
  public function DISABLED_testVerifyUUID() {
    $checks = array(
      NULL => FALSE,
      '' => FALSE,
      '0' => FALSE,
      'b5827a5cadd311e69a1f936389a27663' => FALSE,  // version 1, no dashes
      '15ff2566-add3-11e6-b98f' => FALSE,           // incomplete

      '15ff2566-add3-11e6-b98f-080027dc4f7a' => TRUE, // version 1
      'b5827a5c-add3-11e6-9a1f-936389a27663' => TRUE, // version 1
      '02d9e6d5-9467-382e-8f9b-9300a64ac3cd' => TRUE, // version 3 url-based
      '5e330afb-50c6-45c2-a292-99c3168696d2' => TRUE, // version 4 uuid
      '8f4ca4fd-154e-5063-b6db-aa91af137037' => TRUE, // version 5
    );

    foreach ($checks as $uuid => $exp) {
      $this->assertEqual(ctools_uuid_is_valid($uuid), $exp, 'Is Valid: UUIDs match expectations: ' . $uuid);
    }
  }

}
