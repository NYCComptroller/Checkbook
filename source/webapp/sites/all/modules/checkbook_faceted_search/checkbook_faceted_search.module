<?php
/**
*	GNU AFFERO GENERAL PUBLIC LICENSE 
*	   Version 3, 19 November 2007
* This software is licensed under the GNU AGPL Version 3
* 	(see the file LICENSE for details)
*/



/**
 * Implements hook_menu()
 */

function checkbook_faceted_search_menu() {
  return array(
    'faceted-search/ajax/node' => array(
      'type' => MENU_CALLBACK,
      'page callback' => '_checkbook_faceted_search_node_ajax',
      'page arguments' => array(3),
      'access callback' => TRUE
    ),
    'faceted-search/ajax/pagination' => array(
      'type' => MENU_CALLBACK,
      'page callback' => '_checkbook_faceted_search_node_pagination',
      'page arguments' => array(3),
      'access callback' => TRUE
    ),
    'faceted-search/ajax/autocomplete' => array(
      'type' => MENU_CALLBACK,
      'page callback' => '_checkbook_faceted_search_node_autocomplete',
      'access callback' => TRUE
    )
  );
}

/**
 * Implements hook_theme()
 */

function checkbook_faceted_search_theme($existing, $type, $theme, $path) {
  return array(
    'smart_search_filter' => array(
      'template' => 'smart-search-filter',
      'arguments' => array('facets' => NULL, 'active_contracts' => NULL)
    ),
    'individual_filter' => array(
      'template' => 'individual-filter',
      'arguments' => array('node'=>NULL)
    ),
    'pagination' => array(
      'template' => 'pagination',
      'arguments' => array('node'=>NULL)
    )     
  );
}

/**
 * Prepares facet widget
 */
function _checkbook_faceted_search_node_ajax($nid) {
  $node = node_load($nid);
  widget_config($node);
  widget_prepare($node);
  widget_invoke($node, 'widget_prepare');
  widget_data($node);
  print theme('individual_filter', array('node' => $node));
}

/**
 * Prepares pagination for the facet results
 */
function _checkbook_faceted_search_node_pagination($nid){
  $node = node_load($nid);
  widget_config($node);
  widget_prepare($node);
  widget_invoke($node, 'widget_prepare');
  widget_data($node);
  print theme('pagination', array('node' => $node));
  return;
}

/**
 *  Returns auto suggestions for facet
 */
function _checkbook_faceted_search_node_autocomplete(){
  $nid = _getRequestParamValue('node');
  $node = node_load($nid);
  widget_config($node);
  widget_prepare($node);
  widget_invoke($node, 'widget_prepare');
  $node->widgetConfig->limit = 10;
  widget_data($node);
  $node->data = _checkbook_faceted_search_update_data($node);
  if(count($node->data['unchecked']) == 0) {
    return drupal_json_output(array("No Matches Found"));
  }
  $output = array();
  
  foreach( $node->data['unchecked'] as $row ){
    if(isset($row[1]))
      $output[] =  array("value"=>urlencode($row[0]), 'label'=>html_entity_decode($row[1]) . " (" . $row[2] . ")" );
  }  

  return drupal_json_output($output);
}

/**
 * Updates facet data based on the selection from auto suggestions
 */
function _checkbook_faceted_search_update_data($node){
  $data = $node->data;
  $output = array();
  $output['filter_name'] = $node->widgetConfig->filterName;
  $params = explode('~', _getRequestParamValue($node->widgetConfig->urlParameterName));
  if ($params[0]) {
    foreach ($params as $param) {
      try {        
        $dataController = data_controller_get_instance();
        $parameters = $node->nodeAdjustedParamaterConfig;
        $urlParamMap = ( array ) $node->widgetConfig->urlParamMap;
        if(isset($node->widgetConfig->urlParameterNameType)){  
          $paramValues =  explode('~', $param);
          $patterns = array();
          foreach($paramValues as $value){
            $value = _replaceSlash($value);
            $patterns[] = "(^" . _checkbook_regex_replace_pattern($value) . "$)";
          }          
          $parameters[$urlParamMap[$node->widgetConfig->urlParameterName]] = array(data_controller_get_operator_factory_instance()->initiateHandler(RegularExpressionOperatorHandler::$OPERATOR__NAME, implode($patterns,"|")));          
        }else{
          $parameters[$urlParamMap[$node->widgetConfig->urlParameterName]] = array(data_controller_get_operator_factory_instance()->initiateHandler(EqualOperatorHandler::$OPERATOR__NAME, $param));
        }
        $resultFormatter = new SpecialCharacterResultFormatter(NULL,new ArrayResultFormatter());
        $checked_items = $dataController->queryCube($node->widgetConfig->dataset, $node->widgetConfig->columns, $parameters,null, null, null, $resultFormatter);        
      } catch (Exception $e) {
        log_error($e->getMessage());
      }
      if($checked_items[0]['txcount']){
        if(count($checked_items[0]) == 2){
          $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                                  ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                                  ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]);
        }else{        
          $output['checked'][] = array($checked_items[0][str_replace('.','_',$node->widgetConfig->columns[0])]
                                  ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[1])]
                                  ,$checked_items[0][str_replace('.','_',$node->widgetConfig->columns[2])]);
        }
      }
    }
  }
  
  foreach ($data as $row) {    
    if(count($row) == 2){
      $output['unchecked'][] = array($row[str_replace('.','_',$node->widgetConfig->columns[0])]
          ,$row[str_replace('.','_',$node->widgetConfig->columns[0])]
          ,$row[str_replace('.','_',$node->widgetConfig->columns[1])]);  
    }    
    else{
      $output['unchecked'][] = array($row[str_replace('.','_',$node->widgetConfig->columns[0])]
          ,$row[str_replace('.','_',$node->widgetConfig->columns[1])]
          ,$row[str_replace('.','_',$node->widgetConfig->columns[2])]);      
    }
  }
  $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
  $output['autocomplete_field_name'] = $node->widgetConfig->urlParameterName;
  $output['autocomplete_param_name'] = $node->widgetConfig->autocompleteParamName;
  return $output;
}

/**
 * Updates range facet
 */
function _checkbook_faceted_search_update_data_range_filter($node){
    $data = $node->data;
    $output = array();
    $output['filter_name'] = $node->widgetConfig->filterName;
    $params = explode('~',_getRequestParamValue($node->widgetConfig->urlParameterName));
    if(!is_array($data[0])){
      $data = array(0=>array());
    }    
    $initial[0] = array(6, 'Greater than $100M', $data[0]['g100m_count']);
    $initial[1] = array(5, '$51M - $100M', $data[0]['g50m_le100m_count']);
    $initial[2] = array(4, '$26M - $50M', $data[0]['g25m_le50m_count']);
    $initial[3] = array(3, '$11M - $25M', $data[0]['g10m_le25m_count']);
    $initial[4] = array(2, '$1M - $10M', $data[0]['ge1m_le10m_count']);
    $initial[5] = array(1, 'Less than $1M', $data[0]['less1m_count']);
    for ($i = 0; $i < 6; $i++){
      $checked = false;
      foreach ($params as $param){
        if ($param == $initial[$i][0]){
          $checked = true;
        }
      }
      if ($checked){
        $output['checked'][] = $initial[$i];
      } else {
        if($initial[$i][2] > 0){
          $output['unchecked'][] = $initial[$i];
        }
      }
    }
    $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
    return $output;
}

/**
 * Updates range facet
 */
function _checkbook_faceted_search_update_data_range2_filter($node){
  $data = $node->data;
  $output = array();
  $output['filter_name'] = $node->widgetConfig->filterName;
  $params = explode('~',_getRequestParamValue($node->widgetConfig->urlParameterName));
  if(!is_array($data[0])){
    $data = array(0=>array());
  }
  
  $initial[0] = array(6, 'Greater than $5B', $data[0]['g5b_count']);
  $initial[1] = array(5, '$4B - $5B', $data[0]['g4b_le5b_count']);
  $initial[2] = array(4, '$3B - $4B', $data[0]['g3b_le4b_count']);
  $initial[3] = array(3, '$2B - $3B', $data[0]['g2b_le3b_count']);
  $initial[4] = array(2, '$1B - $2B', $data[0]['g1b_le2b_count']);
  $initial[5] = array(1, 'Less than $1B', $data[0]['less1b_count']);
  for ($i = 0; $i < 6; $i++){
    $checked = false;
    foreach ($params as $param){
      if ($param == $initial[$i][0]){
        $checked = true;
      }
    }
    if ($checked){
      $output['checked'][] = $initial[$i];
    } else {
      if($initial[$i][2] > 0){
        $output['unchecked'][] = $initial[$i];
      }
    }
  }
  $output['autocomplete_id'] = $node->widgetConfig->autocompleteID;
  return $output;
}

/**
 * Updates pagination parameters for facet
 */
function checkbook_faceted_search_adjust_param($node){
  if ($_REQUEST['page']){
    $page = $_REQUEST['page'];
    $limit = $node->widgetConfig->limit;
    if ($page > 0){
      $node->widgetConfig->limit = 2 * $limit;
      $node->widgetConfig->startWith = ( $page - 1 ) * $limit;
    }
  }
}

/**
 * Preprocess function for individual_filter.tpl.php
 *
 * @param $variables
 */

function checkbook_faceted_search_preprocess_individual_filter(&$variables){
  $node = $variables['node'];
  $paramTypeConfig =(array)  $node->widgetConfig->paramTypeConfig;
  if($node->widgetConfig->urlParameterType=="rangeid"){
    $data = _checkbook_faceted_search_update_data_range_filter($node);
  }elseif($node->widgetConfig->urlParameterType=="rangeid2"){
    $data = _checkbook_faceted_search_update_data_range2_filter($node);
  }else{
    $data = _checkbook_faceted_search_update_data($node);
  }
  $variables['filter_name'] = $data['filter_name'];
  $variables['checked'] = $data['checked'];
  $variables['unchecked'] = $data['unchecked'];
  $variables['autocomplete_id'] = $data['autocomplete_id'];
  $variables['autocomplete_field_name'] = $data['autocomplete_field_name'];
  $variables['autocomplete_param_name'] = $data['autocomplete_param_name'];
  if(($node->nid == 518 || $node->nid == 540 || $node->nid == 566 )&& !preg_match("/\/agency\//",$_GET['q'])){
    $variables['hide_filter'] = ' style="display:none" ';
  }else{
    $variables['hide_filter'] = "";
  }
  
  
}

/**
 * Preprocess function for individual_filter.tpl.php
 *
 * @param $variables
 */
function checkbook_faceted_search_preprocess_pagination(&$variables){
  $node = $variables['node'];
  $paramTypeConfig =(array)  $node->widgetConfig->paramTypeConfig;
  if($node->widgetConfig->urlParameterType=="rangeid"){
    $data = _checkbook_faceted_search_update_data_range_filter($node);
  }elseif($node->widgetConfig->urlParameterType=="rangeid2"){
    $data = _checkbook_faceted_search_update_data_range2_filter($node);
  }else{
    $data = _checkbook_faceted_search_update_data($node);
  }
  
  $variables['filter_name'] = $data['filter_name'];
  $variables['checked'] = $data['checked'];
  $variables['unchecked'] = $data['unchecked'];
  $variables['autocomplete_id'] = $data['autocomplete_id'];
}

/**
 * Preprocess function for smart_search_filter.tpl.php
 *
 * @param $variables
 */

function checkbook_faceted_search_preprocess_smart_search_filter(&$variables) {
  $facets = $variables['facets'];
  $active_contracts = $variables['active_contracts'];
  $selected_filters = $variables['selected_facet_results'];

  $output = NULL;
  $agencies = $vendors = $expenseCategories = $revenueCategories = $fiscalYears = $domains = $contractCategory = $contractStatus = $spendingCategory = array();
  $reqAgencies = $reqFiscalYears = $reqDomains = $reqVendors = $reqExpenseCategories = $reqRevenueCategories = $reqSpendCategories = array();

  //arrays for the selected facet values from the URL
  foreach($selected_filters as $key => $value){
      switch ($key) {
          case 'agency_name':
            $reqAgencies[] = $value;
            break;
          case 'fiscal_year':
            $reqFiscalYears[] = $value;
            break;
          case 'domain':
            $reqDomains[] = $value;
            break;
          case 'vendor_name':
            $reqVendors[] = $value;
            break;
          case 'expenditure_object_name':
            $reqExpenseCategories[] = $value;
            break;
          case 'spending_category_name':
            $reqSpendCategories[] = $value;
            break;
          case 'contract_category_name':
            $reqContCategories[] = $value;
            break;
          case 'contract_status':
            $reqContStatus[] = $value;
            break;
      }
  }
    
  //arrays for the facet values
  foreach ($facets as $key => $value) {
    switch ($key) {
      case 'agency_name':
        $agencies[] = $value[$key];
        break;
      case 'fiscal_year':
        $fiscalYears[] = $value[$key];
        break;
      case 'domain':
        $domains[] = $value[$key];
        break;
      case 'vendor_name':
        $vendors[] = $value[$key];
        break;
      case 'expenditure_object_name':
        $expenseCategories[] = $value[$key];
        break;
      case 'spending_category_name':
        $spendingCategory[] = $value[$key];
        break;
      case 'contract_category_name':
        $contractCategory[] = $value[$key];
        break;
      case 'contract_status':
        $contractStatus[] = $value[$key];
        break;
    }
  }

  if (count($domains) > 0) {
    foreach ($domains[0] as $domainName => $count) {
      if ($count > 0) {
        $checked = (in_array($domainName, array_values_recursive($reqDomains[0]))) ? 'checked' : '';
        $output['Type of Data'][] = array($domainName, $domainName, $count, $checked);
        $output['Type of Data']['name'] = 'fdomainName';
        if ($domainName == 'spending' && $checked == 'checked') {
          foreach ($spendingCategory[0] as $spendingName => $spendingCount) {
            if ($spendingCount > 0) {
              $spendingValue = urlencode($spendingName);
              $checked = (in_array($spendingName, array_values_recursive($reqSpendCategories[0]))) ? 'checked' : '';
              $subCat['spending']['Spending Category'][] = array($spendingValue, $spendingName, $spendingCount, $checked);
            }
            $subCat['spending']['Spending Category']['name'] = 'fspendingCatName';
          }
        }
        if ($domainName == 'contracts' && $checked == 'checked') {
          if (count($contractCategory[0]) > 0) {
            foreach ($contractCategory[0] as $catName => $catCount) {
              if ($catCount > 0) {
                $checked = (in_array($catName, array_values_recursive($reqContCategories[0]))) ? 'checked' : '';
                $subCat['contracts']['Category'][] = array($catName, $catName, $catCount, $checked);
              }
            }
            $subCat['contracts']['Category']['name'] = 'fcontractCatName';
          }
          if (count($contractStatus) > 0) {
            foreach ($contractStatus as $key => $value) {
              foreach ($value as $status => $statusCount) {
                $checked = (in_array($status, array_values_recursive($reqContStatus[0]))) ? 'checked' : '';
                $subCat['contracts']['Status'][] = array($status, $status, $statusCount, $checked);
                if (strtolower($status) == 'registered') {
                  $subCat['contracts']['Status'][] = array('', 'Active', $active_contracts['response']['numFound']);
                }
              }
            }
            $subCat['contracts']['Status']['name'] = 'fcontractStatus';
          }
        }
      }
    }
  }
  if (count($agencies) > 0) {
    foreach ($agencies[0] as $agencyName => $count) {
      if ($count > 0) {
        $checked = in_array($agencyName, array_values_recursive($reqAgencies[0]));
        $agencyValue = urlencode($agencyName);
        if ($checked) {
          $output['Agency']['checked'][] = array($agencyValue, $agencyName, $count);
        }
        else {
          $output['Agency']['unchecked'][] = array($agencyValue, $agencyName, $count);
        }
      }
    }
    $output['Agency']['name'] = 'fagencyName';
    foreach($reqAgencies[0] as $key => $value){
        if(!in_array($value['name'], array_values_recursive($output['Agency']['checked']))){
            $output['Agency']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
        }
    }
  }
  if (count($vendors) > 0) {
    foreach ($vendors[0] as $vendorName => $count) {
      if ($count > 0) {
        $checked = in_array($vendorName, array_values_recursive($reqVendors[0]));
        $vendorValue = urlencode($vendorName);
        if ($checked) {
          $output['Vendor']['checked'][] = array($vendorValue, $vendorName, $count);
        }
        else {
          $output['Vendor']['unchecked'][] = array($vendorValue, $vendorName, $count);
        }
      }
    }
    $output['Vendor']['name'] = 'fvendorName';
    foreach($reqVendors[0] as $key => $value){
        if(!in_array($value['name'], array_values_recursive($output['Vendor']['checked']))){
            $output['Vendor']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
        }
    }
  }
  if (count($expenseCategories) > 0) {
    foreach ($expenseCategories[0] as $expenseCategoryName => $count) {
      if ($count > 0) {
        $checked = in_array($expenseCategoryName, array_values_recursive($reqExpenseCategories[0]));
        $expenseCategoryValue = urlencode($expenseCategoryName);
        if ($checked) {
          $output['Expense Category']['checked'][] = array($expenseCategoryValue, $expenseCategoryName, $count);
        }
        else {
          $output['Expense Category']['unchecked'][] = array($expenseCategoryValue, $expenseCategoryName, $count);
        }
      }
    }
    $output['Expense Category']['name'] = 'fexpenseCategoryName';
    foreach($reqExpenseCategories[0] as $key => $value){
        if(!in_array($value['name'], array_values_recursive($output['Expense Category']['checked']))){
            $output['Expense Category']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
        }
    }

  }
  if (count($revenueCategories) > 0) {
    foreach ($revenueCategories[0] as $revenueCategoryName => $count) {
      if ($count > 0) {
        $checked = in_array($revenueCategoryName, array_values_recursive($reqRevenueCategories[0]));
        $revenueCategoryValue = urlencode($revenueCategoryName);
        if ($checked) {
          $output['Revenue Category']['checked'][] = array($revenueCategoryValue, $revenueCategoryName, $count);
        }
        else {
          $output['Revenue Category']['unchecked'][] = array($revenueCategoryValue, $revenueCategoryName, $count);
        }
      }
    }
    $output['Revenue Category']['name'] = 'frevenueCategoryName';
    foreach($reqRevenueCategories[0] as $key => $value){
        if(!in_array($value['name'], array_values_recursive($output['Revenue Category']['checked']))){
            $output['Revenue Category']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
        }
    }
  }
  if (count($fiscalYears) > 0) {
    krsort($fiscalYears[0]);
    foreach ($fiscalYears[0] as $fiscalYear => $count) {
      if ($count > 0) {
        $checked = in_array($fiscalYear, array_values_recursive($reqFiscalYears[0]));
        if ($checked) {
          $output['Fiscal Year']['checked'][] = array($fiscalYear, $fiscalYear, $count);
        }
        else {
          $output['Fiscal Year']['unchecked'][] = array($fiscalYear, $fiscalYear, $count);
        }
      }
    }
    $output['Fiscal Year']['name'] = 'fyear';
    foreach($reqFiscalYears[0] as $key => $value){
        if(!in_array($value['name'], array_values_recursive($output['Fiscal Year']['checked']))){
            $output['Fiscal Year']['checked'][] = array(urlencode($value['name']), $value['name'], $value['count']);
        }
    }
  }

  $variables['render_array'] = $output;
  $variables['sub_cat_array'] = $subCat;
}

/**
    Returns the array values recursively
 */
function array_values_recursive($ary)
{
   $lst = array();
   foreach( array_keys($ary) as $k ){
      $v = $ary[$k];
      if (is_scalar($v)) {
         $lst[] = $v;
      } elseif (is_array($v)) {
         $lst = array_merge( $lst,
            array_values_recursive($v)
         );
      }
   }
   return $lst;
}
