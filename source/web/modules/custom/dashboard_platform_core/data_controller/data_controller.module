<?php
/**
 * This file is part of the Checkbook NYC financial transparency software.
 *
 * Copyright (c) 2012 â€“ 2023 New York City
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

use Drupal\data_controller\Cache\Handler\InMemoryCacheHandler;
use Drupal\data_controller\Common\Datatype\Handler\CurrencyDataTypeHandler;
use Drupal\data_controller\Common\Datatype\Handler\DateDataTypeHandler;
use Drupal\data_controller\Common\Datatype\Handler\DateTimeDataTypeHandler;
use Drupal\data_controller\Common\Datatype\Handler\IntegerDataTypeHandler;
use Drupal\data_controller\Common\Datatype\Handler\NumberDataTypeHandler;
use Drupal\data_controller\Common\Datatype\Handler\PercentDataTypeHandler;
use Drupal\data_controller\Common\Datatype\Handler\StringDataTypeHandler;
use Drupal\data_controller\Common\Datatype\Handler\URIDataTypeHandler;
use Drupal\data_controller\Controller\DataQueryController;
use Drupal\data_controller\Controller\DataQueryControllerProxy;
use Drupal\data_controller\Datasource\Operator\Handler\DynamicRangeOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\EmptyOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\EqualOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\GreaterOrEqualOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\GreaterThanOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\LatestOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\LessOrEqualOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\LessThanOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\NotEmptyOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\NotEmptyStringOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\NotEqualOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\NotInRangeOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\NotRegularExpressionOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\NotWildcardOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\OldestOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\PreviousOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\RangeOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\RegularExpressionOperatorHandler;
use Drupal\data_controller\Datasource\Operator\Handler\WildcardOperatorHandler;
use Drupal\data_controller\Datasource\Operator\OperatorFactory;
use Drupal\data_controller\Environment\EnvironmentMetaModel;
use Drupal\data_controller\Environment\EnvironmentMetaModelFactory;
use Drupal\data_controller\MetaModel\MetaModel;
use Drupal\data_controller\MetaModel\MetaModelFactory;


// -------------------- Data Controller ------------------------------------------------------------
/**
 * @return DataQueryController
 */
function data_controller_get_instance() {
    return DataQueryControllerProxy::getInstance();
}


// -------------------- Cache Handler --------------------------------------------------------------
function data_controller_dc_cache() {
    $items[InMemoryCacheHandler::$CACHE__TYPE] = array(
        'classname' => 'Drupal\data_controller\Cache\Handler\InMemoryCacheHandler');
    return $items;
}


// -------------------- Data Types -----------------------------------------------------------------
function data_controller_dc_data_type() {
    $items[StringDataTypeHandler::$DATA_TYPE] = array(
        'description' => t('String'),
        'classname' => '\Drupal\data_controller\Common\Datatype\Handler\StringDataTypeHandler');
    $items[IntegerDataTypeHandler::$DATA_TYPE] = array(
        'description' => t('Integer'),
        'classname' => '\Drupal\data_controller\Common\Datatype\Handler\IntegerDataTypeHandler');
    $items[NumberDataTypeHandler::$DATA_TYPE] = array(
        'description' => t('Number'),
        'classname' => '\Drupal\data_controller\Common\Datatype\Handler\NumberDataTypeHandler');
    $items[CurrencyDataTypeHandler::$DATA_TYPE] = array(
        'description' => t('Currency'),
        'classname' => '\Drupal\data_controller\Common\Datatype\Handler\CurrencyDataTypeHandler');
    $items[PercentDataTypeHandler::$DATA_TYPE] = array(
        'description' => t('Percent'),
        'classname' => '\Drupal\data_controller\Common\Datatype\Handler\PercentDataTypeHandler');
    $items[DateDataTypeHandler::$DATA_TYPE] = array(
        'description' => t('Date'),
        'classname' => '\Drupal\data_controller\Common\Datatype\Handler\DateDataTypeHandler');
/*
    $items[TimeDataTypeHandler::$DATA_TYPE] = array(
        'description' => t('Time'),
        'classname' => 'TimeDataTypeHandler');
*/
    $items[DateTimeDataTypeHandler::$DATA_TYPE] = array(
        'description' => t('Datetime'),
        'classname' => '\Drupal\data_controller\Common\Datatype\Handler\DateTimeDataTypeHandler');
    $items[URIDataTypeHandler::$DATA_TYPE] = array(
        'description' => t('URI'),
        'classname' => '\Drupal\data_controller\Common\Datatype\Handler\URIDataTypeHandler');

    return $items;
}


// -------------------- Data Source Operators ------------------------------------------------------
function data_controller_get_operator_factory_instance() {
    return OperatorFactory::getInstance();
}

function data_controller_dc_datasource_operator() {
    $items[EmptyOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Empty'),
        'handler' => array(
            'classname' => 'EmptyOperatorHandler'));
    $items[NotEmptyOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Not Empty'),
        'handler' => array(
            'classname' => 'NotEmptyOperatorHandler'));
  $items[NotEmptyStringOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Not Empty'),
        'handler' => array(
        'classname' => 'NotEmptyStringOperatorHandler'));

    // value-based operators
    $items[EqualOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Equal'),
        'handler' => array(
            'classname' => 'EqualOperatorHandler'),
        'metadata' => array(
            'classname' => 'Drupal\data_controller\Datasource\Operator\Handler\ValueBasedOperatorMetaData'));
    $items[NotEqualOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Not Equal'),
        'handler' => array(
            'classname' => 'NotEqualOperatorHandler'),
        'metadata' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\ValueBasedOperatorMetaData'));
    $items[GreaterOrEqualOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Greater or Equal'),
        'handler' => array(
            'classname' => 'GreaterOrEqualOperatorHandler'),
        'metadata' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\ValueBasedOperatorMetaData'));
    $items[GreaterThanOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Greater than'),
        'handler' => array(
            'classname' => 'GreaterThanOperatorHandler'),
        'metadata' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\ValueBasedOperatorMetaData'));
    $items[LessOrEqualOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Less or Equal'),
        'handler' => array(
            'classname' => 'LessOrEqualOperatorHandler'),
        'metadata' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\ValueBasedOperatorMetaData'));
    $items[LessThanOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Less than'),
        'handler' => array(
            'classname' => 'LessThanOperatorHandler'),
        'metadata' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\ValueBasedOperatorMetaData'));
    $items[WildcardOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Wildcard'),
        'handler' => array(
            'classname' => 'WildcardOperatorHandler'),
        'metadata' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\WildcardOperatorMetaData'));
    $items[NotWildcardOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Not Wildcard'),
        'handler' => array(
            'classname' => 'NotWildcardOperatorHandler'),
        'metadata' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\WildcardOperatorMetaData'));
    $items[RegularExpressionOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Regular Expression'),
        'handler' => array(
            'classname' => 'RegularExpressionOperatorHandler'),
        'metadata' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\RegularExpressionOperatorMetaData'));
    $items[NotRegularExpressionOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Regular Expression'),
        'handler' => array(
            'classname' => 'NotRegularExpressionOperatorHandler'),
        'metadata' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\RegularExpressionOperatorMetaData'));

    // Range-based operators
    $items[RangeOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Range'),
        'handler' => array(
            'classname' => 'RangeOperatorHandler'),
        'metadata' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\RangeBasedOperatorMetaData'));
    $items[NotInRangeOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Not in Range'),
        'handler' => array(
            'classname' => 'NotInRangeOperatorHandler'),
        'metadata' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\RangeBasedOperatorMetaData'));
    $items[DynamicRangeOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Dynamic Range'),
        'handler' => array(
            'classname' => 'DynamicRangeOperatorHandler'),
        'metadata' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\RangeBasedOperatorMetaData'));

    // Data-related operators
    $items[OldestOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Oldest'),
        'handler' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\OldestOperatorHandler'));
    $items[PreviousOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Previous'),
        'handler' => array(
            'classname' => 'PreviousOperatorHandler'),
        'metadata' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\PreviousOperatorMetaData'));
    $items[LatestOperatorHandler::$OPERATOR__NAME] = array(
        'description' => t('Latest'),
        'handler' => array(
            'classname' => '\Drupal\data_controller\Datasource\Operator\Handler\LatestOperatorHandler'));

    return $items;
}

// -------------------- Meta Model -----------------------------------------------------------------
/**
 * @return EnvironmentMetaModel
 */
function data_controller_get_environment_metamodel() {
    return EnvironmentMetaModelFactory::getInstance()->getMetaModel();
}

/**
 * @return MetaModel
 */
function data_controller_get_metamodel() {
    return MetaModelFactory::getInstance()->getMetaModel();
}
