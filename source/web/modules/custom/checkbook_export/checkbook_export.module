<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
*
* Copyright (C) 2012, 2013 New York City
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

use Drupal\checkbook_infrastructure_layer\Utilities\RequestUtilities;
use Drupal\checkbook_log\LogHelper;
use Drupal\Component\Utility\Html;
use Drupal\data_controller_log\TextLogMessageTrimmer;
use Symfony\Component\HttpFoundation\BinaryFileResponse;
use Symfony\Component\HttpFoundation\Response;

/**
 * Hook to load custom project specific utility functions during bootstrap..
 */
function checkbook_export_init(){
    require_once((new Drupal\Core\Extension\ExtensionPathResolver)->getPath("module","checkbook_export") . "/includes/checkbook_export.inc");
}

/**
 * Implementation of hook_menu
 */
function checkbook_export_menu(){
    $items['export/transactions/form'] = array(
        'title' => 'Checkbook Export',
        'page callback' => '_checkbook_export_form',
        'access callback' => TRUE,
    );

    $items['export/transactions'] = array(
        'title' => 'Checkbook Export',
        'page callback' => '_checkbook_export_transactions',
        'access callback' => TRUE,
    );

    $items['export/grid/transactions/%'] = array(
        'title' => 'Checkbook Export',
        'page callback' => '_checkbook_export_grid_transactions',
        'page arguments' => array(3),
        'access callback' => TRUE,
    );

    return $items;
}

/**
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function checkbook_export_theme($existing, $type, $theme, $path) {
  /*return [
    'checkbook_export_form' => [
      'render_element' => 'form',
      'template' => 'checkbook-export-form',
    ],
  ];*/

  $templates = [
    'checkbook_export_form' => [
      'template' => 'checkbook-export-form',
      'variables' => [
                      'displayRecords' => 0,
                      'maxPages' => 0,
                      'totalRecords' => 0,
                     ],
    ],
  ];

  return $templates;
}

/**
 * Implements hook_cron()
 * @return bool
 */
function checkbook_export_cron()
{
    date_default_timezone_set('America/New_York');
    $variable_name = 'checkbook_export_cron_last_run';

    $now = time();

    // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// if (variable_get($variable_name) > ($now - 3600)) { // skip if already ran within last hour
//       return false;
//     }


    LogHelper::log_notice("Running checkbook_export_cron");
    //_checkbook_project_clean_files();
    // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// variable_set($variable_name, $now);

    return true;
}

/** don't regenerate cached file */
function _checkbook_export_check_cached(){
  /*if (user_is_logged_in()) {
    return false;
  }*/
  if (\Drupal::currentUser()->isAuthenticated()) {
    return false;
  }
  $fileDir = _checkbook_export_prepareFileOutputDir();
  $filename = _checkbook_export_generate_uuid(). '.csv';
  $outputFile = DRUPAL_ROOT . '/' . $fileDir . '/' . $filename;
  if(is_file($outputFile) && filesize($outputFile)) {
    LogHelper::log_notice('Already pre-cached: '.$outputFile);
    return $filename;
  }
  return false;
}

/**
 * Function to prepare widget using configuration
 *
 * @param null $nodeId
 * @return bool|mixed Prepared widget node.
 */
function _checkbook_export_get_node_config($nodeId=NULL){
  //global $conf;
  \Drupal::request()->query->set('q', urldecode($_GET['refURL']));
  $_GET['q'] = urldecode(Html::escape($_GET['refURL']));

  //$nodeId = isset($nodeId) ? $nodeId : RequestUtilities::get('node');
  $nodeId = isset($nodeId) ? $nodeId : RequestUtilities::get('node', $_GET);

  //$node = \Drupal::entityTypeManager()->getStorage('node')->load($nodeId);
  $node = _widget_node_load_file($nodeId);


  //widget_set_uid($node,"export");
  widget_config($node);
  //prepare anything we'll need before loading
  widget_prepare($node);
  //invoke widget specific prepare
  widget_invoke($node, 'widget_prepare');

  $limitPerPage = (isset($_GET['iDisplayLength']) ? (int)$_GET['iDisplayLength'] : $node->widgetConfig->limit);
  $startWith  =isset($_GET['iDisplayStart']) ? (int)$_GET['iDisplayStart'] : 0;

  //$maxRecordsAllowed = $conf['check_book']['datatables']['iTotalDisplayRecords'];
  $maxRecordsAllowed = \Drupal::config('check_book')->get('datatables')['iTotalDisplayRecords'];

  //This is to handle hacks
  if($startWith+$limitPerPage > $maxRecordsAllowed){
      $startWith = 0;
      $limitPerPage = $maxRecordsAllowed;
  }

  $node->widgetConfig->limit = $limitPerPage;
  $node->widgetConfig->startWith = $startWith;

  $node->widgetConfig->exportData = true;

  return $node;
}

/** Function to handle generate export file
 * @param $node
 * @param $headers
 * @param null $exportConfigNode
 * @return bool|string
 */
function _checkbook_export_generateExportFile($node, $headers, $exportConfigNode = NULL){
  LogHelper::log_notice("In generateEportFile NOWW");
  global $conf;

  try{
      $fileDir = _checkbook_export_prepareFileOutputDir();
      $filename = _checkbook_export_generate_uuid(). '.csv';
      $checkbook_tempdir = \Drupal::config('check_book')->get('tmpdir');

      //$tmpDir =  (isset($conf['check_book']['tmpdir']) && is_dir($conf['check_book']['tmpdir'])) ? rtrim($conf['check_book']['tmpdir'],'/') : '/tmp';
      $tmpDir =  (isset($checkbook_tempdir) && is_dir($checkbook_tempdir)) ? rtrim($checkbook_tempdir,'/') : '/tmp';

      if(!is_writable($tmpDir)){
          LogHelper::log_error("$tmpDir is not writable. Please make sure this is writable to generate export file.");
          return $filename;
      }

      $tempOutputFile = $tmpDir .'/'. $filename;
      $outputFile = DRUPAL_ROOT . '/' . $fileDir . '/' . $filename;

      if(!\Drupal::currentUser()->isAuthenticated() && is_file($outputFile) && filesize($outputFile)) {
        LogHelper::log_notice('Already cached: '.$outputFile);
        return $filename;
      }

      $columns = isset($exportConfigNode) ? $exportConfigNode->widgetConfig->table_columns : $node->widgetConfig->table_columns;
      $columnsConfig = array();
      foreach($columns as $column){
      if ($column->column) {
        $selectedColumn = (isset($column->sortSourceColumn)) ? str_replace('.', '_', $column->sortSourceColumn) : str_replace('.', '_', $column->column);
        //For columns selected from reference tables
        if (strpos($selectedColumn, '@')) {
          list($selectedColumn,) = explode('@', $selectedColumn);
        }
        $columnsConfig[] = $selectedColumn;
      }
  }
  $input = $node->data;

  $start = "SELECT ";
  $end = " FROM (";
  $selectQuery = substr($input, strlen($start)+strpos($input, $start), (strlen($input) - strpos($input, $end))*(-1));
  //If there is no sub-query in the export query
  if(!$selectQuery){
    $end = " FROM ";
      $selectQuery = substr($input, strlen($start)+strpos($input, $start), (strlen($input) - strpos($input, $end))*(-1));
  }
      $selectColumns = explode(",",$selectQuery);
      $exportColumns = array();

      foreach($selectColumns as $key =>$value){
    $selectColumn = $value;
    if (strpos($selectColumn,' AS ')) {
      //For the reference columns derived using syntax like column_name@datasource:dataset
      list($selectColumn,) = explode(' AS ', $selectColumn);
    }
    if (strpos($selectColumn,'.')) {
      list(,$selectColumn) = explode('.', $selectColumn);
    }
        if(in_array(trim($selectColumn),$columnsConfig)){
          $exportColumns[trim($selectColumn)] = $value;
    }else{
      $selectColumn_ref = $value;
      //For the reference columns derived from cube dimensions
      if (strpos($selectColumn_ref,' AS ')) {
        list(,$selectColumn_ref) = explode(' AS ', $selectColumn_ref);
      }
      if(in_array(trim($selectColumn_ref),$columnsConfig)){
        $exportColumns[trim($selectColumn_ref)] = $value;
        }
      }
  }
      $newQuery = null;
      foreach($columnsConfig as $key => $value){
    if (!empty($exportColumns[$value])) {
        $newQuery .= $exportColumns[$value] . ',';
      }

  }
      $newQuery = substr($newQuery, 0, -1);
      $node->data = $query =  str_replace($selectQuery,$newQuery, $node->data);
      if(isset($node->widgetConfig->queryAlterFunction)) {
        $alterFunction = $node->widgetConfig->queryAlterFunction;
        $node->data = eval($alterFunction);
      }else {
        /*
         * For data over the limit of 5000, the sql executes directly from the db.
         * Columns that are derived do not get selected, this allows us to override the
         * select value of the column sql directly.
         * */
        $sqlOverride = isset($exportConfigNode) ? $exportConfigNode->widgetConfig->exportColumnSqlOverride : $node->widgetConfig->exportColumnSqlOverride;
        if (isset($sqlOverride)) {
          $override_sql = null;
          $sql = $node->data;
          $table_columns = isset($exportConfigNode) ? $exportConfigNode->widgetConfig->table_columns : $node->widgetConfig->table_columns;
          $export_columns = $sqlOverride;
          $isList = $node->widgetConfig->useList;

          foreach ($export_columns as $export_column) {
            $column = $export_column->column;
            $source_column = $export_column->sourceColumn;
            foreach ($table_columns as $table_column) {
              if ($table_column->column == $column) {
                $override_sql = $export_column->sql;
                $pos = strpos($sql, $source_column);
                if ($pos !== false) {
                  if ($isList) {
                    //Handle alias
                    //Adjust the column fields only when alias fields are present
                    //$alias_val = explode('.',$sql);//seems like this breaks when decimal numbers are there. so replacing with below by ignoring numbers
                    //$alias_val =preg_split('/(?<!\d)\.(?!\d)/', $sql);
                    $alias_val = explode(".$source_column",$sql);
                    if (isset($alias_val[1]))
                    {
                      $pos -= 3;
                      $alias_source_column = substr($sql, $pos, strlen($source_column) + 3);
                    }
                    else{ $alias_source_column = $source_column; }
                    $replace = array($source_column => $alias_source_column);
                    $override_sql = str_replace(array_keys($replace), array_values($replace), $override_sql);
                    $source_column = $alias_source_column;
                  }
                  $override_sql = substr_replace($sql, $override_sql, $pos, strlen($source_column));
                  $sql = $override_sql;
                }
              }
            }
          }
          if ($override_sql != null) {
            $node->data = $sql;
          }
        }
        if (!empty($node->widgetConfig->export_columns)) {
          $node->data = checkbook_export_remove_non_export_columns($node);
        }

        //Escaping double quotes explicitly in parameters
        $queryParts = explode('WHERE', $node->data);
        if (strlen($queryParts[1]) > 0) {
          $queryParts[1] = str_replace('"', '\"', $queryParts[1]);
          $node->data = implode(' WHERE ', array($queryParts[0], $queryParts[1]));
        }
      }

      LogHelper::log_notice("Exporting to file via SQL: \n".$node->data);
      $command = _checkbook_psql_command(RequestUtilities::get('datasource',['q'=>\Drupal::request()->query->get('refURL')]));
      $command .=
              " -c \"\\\\COPY (" . str_replace('\\\\','\\\\\\',$node->data) . ") TO '"
              . $tempOutputFile
              . "'  WITH DELIMITER ',' CSV QUOTE '\\\"' ESCAPE '\\\"' \" ";

      LogHelper::log_notice($command);
      //var_dump($command);
      //die();////

      shell_exec($command);

      $cmd = "sed -i '1i" . escapeshellcmd($headers) . "' " . $tempOutputFile;
      LogHelper::log_notice($cmd);
      shell_exec($cmd);

      $mvcmd = "mv $tempOutputFile $outputFile";
      LogHelper::log_notice($mvcmd);
      shell_exec($mvcmd);

      LogHelper::log_notice("chmod 0666 $outputFile");
      chmod($outputFile, 0666);

      return $filename;

  }catch (Exception $e){
      $value = TextLogMessageTrimmer::$LOGGED_TEXT_LENGTH__MAXIMUM;
      TextLogMessageTrimmer::$LOGGED_TEXT_LENGTH__MAXIMUM = NULL;

      LogHelper::log_error($e);
      $msg = "Command used to generate the file: " . $command ;
      $msg .= ("Error generating DB command: " . $e->getMessage());
      LogHelper::log_error($msg);

      TextLogMessageTrimmer::$LOGGED_TEXT_LENGTH__MAXIMUM = $value;
  }
  return false;
}

function checkbook_export_remove_non_export_columns($node) {

  $columns = $node->widgetConfig->export_columns;
  $query = $node->data;

  $end = strpos($query, 'FROM');
  $select = substr($query,0,$end);
  $select = str_replace("SELECT", "", $select);
  $parts = explode(",", $select);

  $new_select = "";
  $newline = "\n       ";
  foreach($parts as $part) {
    $part = trim($part);
    $column = $part;
    if (strpos($column,"AS") !== false) {
      $pos = strpos($column, " AS");
      $column = substr($column,0,$pos);
    }
    if (strpos($column,".") !== false) {
      $pos = strpos($column, ".");
      $column = substr($column, $pos+1, strlen($column));
    }
    if (!in_array($column, $columns)) {
      $new_select .= $new_select == "" ? "SELECT ".$part : ",".$newline.$part;
    }
  }
  $new_select .= $newline;
  $query = substr_replace($query, $new_select, 0, $end);
  return $query;
}

/** Function to generate the path to save export file */
function _checkbook_export_prepareFileOutputDir(){
  //global $conf;


  //$dir = \Drupal::state()->get('file_public_path','sites/default/files') . '/' . $conf['check_book']['data_feeds']['output_file_dir'];
  $dir = \Drupal::state()->get('file_public_path','sites/default/files') . '/' . \Drupal::config('check_book')->get('data_feeds')['output_file_dir'];
  _checkbook_export_prepareDirectory($dir);

  //$dir .= '/' . $conf['check_book']['export_data_dir'];
  $dir .= '/' . \Drupal::config('check_book')->get('export_data_dir');
  _checkbook_export_prepareDirectory($dir);

  return $dir;
}

/** Function to generate the path to save export file
 * @param $dir
 * @throws Exception
 */
function _checkbook_export_prepareDirectory($dir){
  if(!\Drupal::service('file_system')->preparedirectory($dir,\Drupal\Core\File\FileSystemInterface::CREATE_DIRECTORY)){
      LogHelper::log_error("Could not prepare file output directory $dir.Should check if this directory is writable.");
      throw new Exception("Could not prepare file. Please contact Support team.");
  }

  /*if(!is_link($dir) && !@chmod($dir,0777)){
      LogHelper::log_error("Could not update permissions to 777 for output directory $dir. Should check if this directory is writable.");
      throw new Exception("Could not prepare file. Please contact Support team.");
  }*/
}

/** Function to generate a unique id */
function _checkbook_export_generate_uuid(){
  if (!empty($_SERVER['REQUEST_METHOD']) && 'GET' === $_SERVER['REQUEST_METHOD']) {
    //$data = request_uri().date('Y-m-d');
    $data = \Drupal::request()->getRequestUri().date('Y-m-d');;
    return md5($data);
  }

  $guid = 'export';
  $uid = uniqid("", true);
  $data = '';
  $data .= $_SERVER['REQUEST_TIME'];
  $data .= $_SERVER['HTTP_USER_AGENT'];
  $data .= $_SERVER['LOCAL_ADDR'];
  $data .= $_SERVER['LOCAL_PORT'];
  $data .= $_SERVER['REMOTE_ADDR'];
  $data .= $_SERVER['REMOTE_PORT'];
  $hash = strtoupper(hash('ripemd128', $uid . $guid . md5($data)));
  $guid =
      substr($hash,  0,  8) .
          '-' .
          substr($hash,  8,  4) .
          '-' .
          substr($hash, 12,  4) .
          '-' .
          substr($hash, 16,  4) .
          '-' .
          substr($hash, 20, 12);

  return strtolower($guid);
}

/** Function to handle download export file
 * @param $fileName
 */
function _checkbook_export_download_file($fileName){
  //global $conf;
// $file = variable_get('file_public_path','sites/default/files') .'/'. $conf['check_book']['data_feeds']['output_file_dir'] .'/'. $conf['check_book']['export_data_dir'] .'/'. $fileName;
  $file = \Drupal::state()->get('file_public_path','sites/default/files') . '/' . \Drupal::config('check_book')->get('data_feeds')['output_file_dir'] .'/'. \Drupal::config('check_book')->get('export_data_dir') .'/'. $fileName;

  //drupal_add_http_header("Content-Type", "text/csv");
  //drupal_add_http_header("Content-Disposition", "attachment; filename=TransactionsData.csv");
  //drupal_add_http_header("Pragma", "cache");
  //drupal_add_http_header("Expires", "-1");

  $fileheaders = array(
    'Content-Type' => 'text/csv',
    'Content-Disposition' => 'attachment; filename=TransactionsData.csv',
    'Pragma' => 'cache',
    'Expires' => '-1'
  );

  if(is_file($file)){
      $data = file_get_contents($file);
      //drupal_add_http_header("Content-Length",strlen($data));
      $fileheaders["Content-Length"] = strlen($data);

      //echo $data;
      return new BinaryFileResponse($file, 200, $fileheaders, true);
  }else{
      return new Response("Data is not generated! Please contact support team.", 200, $fileheaders, true);
      //echo "Data is not generated! Please contact support team.";
  }
}

function _checkbook_export_grid_sort($node, $order = null){
  $node->widgetConfig->gridConfig->data;
  if(isset($order)){
    if($order == 'asc'){
      usort($node->widgetConfig->gridConfig->data,
        function($a, $b)
        {
          $index = $a['sort_column'];

          if(($a['formatType'] == "monthfy" || $a['formatType'] == "month") && RequestUtilities::get('yeartype') == 'B'){
            $months =  array("July"=> 1, "August"=>  2, "September"=>  3, "October"=>  4, "November"=>  5, "December"=>  6,
              "January"=>  7, "February"=>  8, "March"=>  9, "April"=>  10, "May"=> 11, "June"=> 12);

            if ($months[$a[$index]] == $months[$b[$index]]) {
              return 0;
            }
            return ($months[$a[$index]] > $months[$b[$index]]) ? -1 : 1;
          }
          else if($a['formatType'] == "month" && RequestUtilities::get('yeartype') == 'C') {
            $months =  array("January"=> 1, "February"=>  2, "March"=>  3, "April"=>  4, "May"=>  5, "June"=>  6,
              "July"=>  7, "August"=>  8, "September"=>  9, "October"=>  10, "November"=> 11, "December"=> 12);

            if ($months[$a[$index]] == $months[$b[$index]]) {
              return 0;
            }
            return ($months[$a[$index]] > $months[$b[$index]]) ? -1 : 1;

          }
          else{
            if ($a[$index] == $b[$index]) {
              return 0;
            }
            return ($a[$index] < $b[$index]) ? -1 : 1;
          }
        }
      );
    } else {
      usort($node->widgetConfig->gridConfig->data,
        function($a, $b)
        {
          $index = $a['sort_column'];

          if(($a['formatType'] == "monthfy" || $a['formatType'] == "month") && RequestUtilities::get('yeartype') == 'B'){
            $months =  array("July"=> 1, "August"=>  2, "September"=>  3, "October"=>  4, "November"=>  5, "December"=>  6,
              "January"=>  7, "February"=>  8, "March"=>  9, "April"=>  10, "May"=> 11, "June"=> 12);

            if ($months[$a[$index]] == $months[$b[$index]]) {
              return 0;
            }
            return ($months[$a[$index]] < $months[$b[$index]]) ? -1 : 1;
          }
          else if($a['formatType'] == "month" && RequestUtilities::get('yeartype') == 'C') {
            $months =  array("January"=> 1, "February"=>  2, "March"=>  3, "April"=>  4, "May"=>  5, "June"=>  6,
              "July"=>  7, "August"=>  8, "September"=>  9, "October"=>  10, "November"=> 11, "December"=> 12);

            if ($months[$a[$index]] == $months[$b[$index]]) {
              return 0;
            }
            return ($months[$a[$index]] < $months[$b[$index]]) ? -1 : 1;

          }
          else{
            if ($a[$index] == $b[$index]) {
              return 0;
            }
            return ($a[$index] > $b[$index]) ? -1 : 1;
          }
        }
      );
    }
  }
}

/**
 * Function to return export data count
 *
 * @return int Record count
 */
function _checkbook_export_get_data_count(){
  $node = _checkbook_export_get_node_config();

  $node->widgetConfig->getTotalDataCount = true;
  $node->widgetConfig->getData = false;
  //load data
  widget_data($node);

  return $node->totalDataCount;
}
