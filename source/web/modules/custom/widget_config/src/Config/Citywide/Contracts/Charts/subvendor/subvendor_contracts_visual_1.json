{
"widgetType": "highcharts",
"widgetDatahandler": "highcharts",
"html_class":"",
"header":"
       $header = '<h2 class=\"chart-title\" style=\"display:none;\">'. $node->widgetConfig->chartTitle . '</h2>';
       $header .= \\Drupal\\checkbook_project\\WidgetUtilities\\ChartUtil::generateWidgetGridViewLink($node);
       return $header;
    ",
 "gridConfig":{
        "template":"chart_grid_view",
        "domain":"contracts",
        "sortColumn":0,
        "html_class":"chart-grid-view-table three-columns",
        "table_columns": [
            {
                  "labelAlias": "Month",
                  "columnType": "text",
                  "formatType": "month"
             },
             {
                  "labelAlias": "Previous",
                  "columnType": "number",
                  "formatType": "amount"
             },
             {
                  "labelAlias": "Current",
                  "columnType": "number",
                  "formatType": "amount"
             }
        ]
},
"no_results_content":"No Results Found",
"defaultParameters":{"type_of_year":"B"},
"cleanURLParameters":["agency","yeartype","awdmethod","vendor","status","csize","cindustry","mwbe","subvendor"],
"urlParamMap":{"subvendor":"vendor_id","mwbe":"minority_type_id","agency":"agency_id","yeartype":"type_of_year","awdmethod":"award_method_id","vendor":"prime_vendor_id",
	"status":"status_flag","csize":"award_size_id","cindustry":"industry_type_id"},
"widgetDataLoader":"

    $where_filters = array();
    foreach($node->widgetConfig->requestParams as $param=>$value){
        $where_filters[] = _widget_build_sql_condition(' a1.' . $param, $value);
    }

    if(count($where_filters) > 0){
        $where_filter = ' where ' . implode(' and ' , $where_filters);
    }
	$where_filter .= ' and rd.document_code in (' . \\Drupal\\checkbook_project\\ContractsUtilities\\ContractUtil::getCurrentPageDocumentIds() . ') ';
  $refURL = \\Drupal\\checkbook_infrastructure_layer\\Utilities\\RequestUtilities::getRefUrl();
  $url = isset($refURL) ? $refURL: \\Drupal\\checkbook_infrastructure_layer\\Utilities\\RequestUtilities::getCurrentPageUrl();
  $year_id = \\Drupal\\checkbook_infrastructure_layer\\Utilities\\RequestUtilities::get('year',['q'=>$url]);
	$where_filter .= ' and a1.fiscal_year_id in (' . $year_id . ','.  ($year_id -1) . ')';
    $sql = 'select rmo.month_name ,a1.month_id,year_value, sum(spending_amount) spending_amount_sum
    from aggregateon_subven_contracts_spending_by_month a1
    join ref_minority_type rm on rm.minority_type_id = a1.minority_type_id
    join ref_month rmo on a1.month_id = rmo.month_id
    join ref_year ry on a1.fiscal_year_id = ry.year_id
    join ref_document_code rd on a1.document_code_id = rd.document_code_id
   ' . $where_filter . '
    group by year_value, rmo.month_value ,rmo.month_name,a1.month_id
    order by year_value,  rmo.month_value
     ';
    $node->data  = _checkbook_project_execute_sql($sql);

",
"widgetUpdateJSONConfig":"
  $refURL = \\Drupal\\checkbook_infrastructure_layer\\Utilities\\RequestUtilities::getRefUrl();
  $url = isset($refURL) ? $refURL: \\Drupal\\checkbook_infrastructure_layer\\Utilities\\RequestUtilities::getCurrentPageUrl();

	$series =  array();
	$non_mwbe_data = array();
  $year_id = \\Drupal\\checkbook_infrastructure_layer\\Utilities\\RequestUtilities::get('year',['q'=>$url]);
	$year = \\Drupal\\checkbook_project\\CommonUtilities\\CheckbookDateUtil::_getYearValueFromID($year_id);
    $contract_status_params = \\Drupal\\checkbook_project\\ContractsUtilities\\ContractUtil::getSpentToDateParams();

	$series_current_temp = array();
	$series_prev_temp = array();
	if( \\Drupal\\checkbook_infrastructure_layer\\Utilities\\RequestUtilities::get('yeartype',['q'=>$url]) == 'C' ){
		$categories = array('January','February','March','April','May','June','July','August','September','October','November','December');
	}else{
		$categories = array('July','August','September','October','November','December','January','February','March','April','May','June');
		$node->widgetConfig->chartConfig->xAxis->categories = $categories;
	}
	foreach($node->data as $row){

		$tooltip_label =
	 						'Month: ' . $row['month_name'].  '<br/>' .
	 						'Amount: '. \\Drupal\\checkbook_infrastructure_layer\\Utilities\\FormattingUtilities::custom_number_formatter_format($row['spending_amount_sum'],2,'$')   . '<br/>' ;
		$item = new stdClass();
		$item->y = (float)$row['spending_amount_sum'];
		$item->month = $row['month_name'];
		$item->tooltip_label = $tooltip_label;
    $divide_by = $series[$key]['y'] + $non_mwbe_data[$key];
    if ($divide_by == 0) {
      $item->custom_label = \\Drupal\\checkbook_infrastructure_layer\\Utilities\\FormattingUtilities::custom_number_formatter_format(0,1,null,'%') ;
    } else {
      $item->custom_label = \\Drupal\\checkbook_infrastructure_layer\\Utilities\\FormattingUtilities::custom_number_formatter_format($series[$key]['y']/($series[$key]['y'] + $non_mwbe_data[$key] ) *100,1,null,'%') ;
    }

	    if($row['year_value'] == $year){
	    	 $series_current_temp[trim($row['month_name'])] = $item;
	        $url1 = \\Drupal\\checkbook_project\\CommonUtilities\\CustomURLHelper::prepareUrl('contract/spending/transactions'.$contract_status_params,  \\Drupal\\checkbook_project\\ContractsUtilities\\ContractURLHelper::$transactionPageParams, NULL,
       			array('doctype' => 'CT1~CTA1~MA1', 'month' => $row['month_id'],'amt'=>$row['spending_amount_sum'],'smnid'=>'subvendor_contracts_visual_1','newwindow'=>NULL));
			$item->url =  $url1;

	    }else{
	    	$series_previous_temp[trim($row['month_name'])] = $item;
	    	        $url1 = \\Drupal\\checkbook_project\\CommonUtilities\\CustomURLHelper::prepareUrl('contract/spending/transactions'.$contract_status_params,  \\Drupal\\checkbook_project\\ContractsUtilities\\ContractURLHelper::$transactionPageParams, NULL,
       			array('doctype' => 'CT1~CTA1~MA1', 'month' => $row['month_id'],'amt'=>$row['spending_amount_sum'],'smnid'=>'subvendor_contracts_visual_1','newwindow'=>NULL),true);
			$item->url =  $url1;
	    }

	}



	$series_current = array();
	$series_previous = array();

	foreach($categories as $category){
		$series_current[] = $series_current_temp[$category];
		$series_previous[] = $series_previous_temp[$category] ;
	}

    if(\\Drupal\\checkbook_infrastructure_layer\\Utilities\\RequestUtilities::get('yeartype',['q'=>$url]) == 'C'){
        $year_display = 'CY ';
    }else{
        $year_display = 'FY ' ;
    }
	$index = 0;
    $node->widgetConfig->gridConfig->table_columns[1]->labelAlias = $year_display . ' ' .  ($year - 1);

	while($index <= 11){
        $node->widgetConfig->gridConfig->data[] = array($categories[$index],$series_previous[$index]->y,$series_current[$index]->y );
		$index +=1;
	}

	if(count($series_previous) > 0){
		$prev_series_obj = new stdClass();
		$prev_series_obj->name = $year_display . ' ' . ($year -1);
		$prev_series_obj->type = 'column';
		$prev_series_obj->pointWidth = 15;
		$prev_series_obj->data = $series_previous;
		$node->widgetConfig->chartConfig->series[] = $prev_series_obj;
        $node->widgetConfig->gridConfig->table_columns[2]->labelAlias =  $year_display . ' ' . ($year);
	}
	$curr_series_obj = new stdClass();
	$curr_series_obj->name = $year_display . ' ' . $year;
	$curr_series_obj->type = 'column';
	$curr_series_obj->pointWidth = 15;
	$curr_series_obj->data = $series_current;
	$node->widgetConfig->chartConfig->series[] = $curr_series_obj;


	$last_param = \\Drupal\\checkbook_project\\CommonUtilities\\RequestUtil::_getLastRequestParamValue();
	if($last_param =='vendor'){
		$node->widgetConfig->chartTitle = 'Prime Vendor Sub Vendors Spending by ' . \\Drupal\\checkbook_project\\ContractsUtilities\\ContractUtil::getCurrentContractStatusandType() . ' Contracts';
	}else{
        if(\\Drupal\\checkbook_infrastructure_layer\\Utilities\\RequestUtilities::get('status',['q'=>$url]) == 'A'){
            $node->widgetConfig->chartTitle = \\Drupal\\checkbook_project\\MwbeUtilities\\MappingUtil::getCurrenEthnicityName() . ' Sub Vendors Spending by Total Active Sub Vendor Contracts';
        }else{
            $node->widgetConfig->chartTitle = \\Drupal\\checkbook_project\\MwbeUtilities\\MappingUtil::getCurrenEthnicityName() . ' Sub Vendors Spending by New Sub Vendor Contracts by Fiscal Year';
        }
	}
",
"summaryView":{
    "template":"contract_date_summary",
    "templateTitleEval":"return \\Drupal\\checkbook_project\\SpendingUtilities\\SpendingUtil::getSpentToDateTitle('Sub Vendors Spending');"
},
"chartConfig" : {
    "plotOptions": {
            "series": {
                "cursor": "pointer",
                "point": {"events": {"function": "clickEvent"}}
              }
    },
    "xAxis": {
        "categories": ["January","February","March","April","May","June","July","August","September","October","November","December"],
        "labels": {"enabled": false}
    },
    "series": [
    ],
    "title": {"text": ""},
    "yAxis": {
     	"min":0,
     	"minRange": 0.1,
        "startOnTick":true,
        "title": {"text": ""},
        "labels":{"rotation": 0,"function":"yAxisFormatter"}
    } ,
    "legend": {
        "enabled": true,
        "align":"left"
    },
    "tooltip":{"function":"tooltipformatter"}
    }
}


<function>
yAxisFormatter^^'formatter' : function(){return yAxisLabelFormatter(this);}##
tooltipformatter^^'formatter' :
function() {return this.point.tooltip_label ;
}
##clickEvent^^"click": function(){  window.open(this.options.url, '_blank', 'menubar=no,toolbar=no,location=no,resizable=yes,scrollbars=yes,personalbar=no,chrome=yes,height=700,width=980');}
</function>
