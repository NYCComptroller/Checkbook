{
  "widgetType": "highcharts",
  "widgetDatahandler": "highcharts",
  "html_class":"",
  "header":"
  $header = '<h2 class=\"chart-title\" style=\"display:none;\">'. $node->widgetConfig->chartTitle . '</h2>';
  $header .= \\Drupal\\checkbook_project\\WidgetUtilities\\ChartUtil::generateWidgetGridViewLink($node);
  return $header;
  ",
  "gridConfig":{
    "template":"chart_grid_view",
    "domain":"contracts",
    "html_class":"chart-grid-view-table three-columns",
    "sortColumn":1,
    "table_columns": [
      {
        "labelAlias": "responsibility_center",
        "columnType": "text"
      },
      {
        "labelAlias": "Amount",
        "columnType": "number",
        "formatType": "amount"
      }
    ]
  },
  "no_results_content":"No Results Found",
  "cleanURLParameters":["awdmethod","vendor","csize","industry","year"],
  "urlParamMap":{"year":"fiscal_year_id","awdmethod":"award_method_id","vendor":"vendor_id", "csize":"award_size_id",
    "industry":"industry_type_id"},
  "widgetPreprocessJSON":"
  if(preg_match('/pending/',\\Drupal::service('path.current')->getPath())){
  $node->widgetConfig->urlParamMap = $node->widgetConfig->urlParamMapPending;
  $node->widgetConfig->defaultParameters = $node->widgetConfig->defaultParametersPending;
  $node->widgetConfig->cleanURLParameters = $node->widgetConfig->cleanURLParametersPending;
}",
"chartTitle":"Top Ten Responsibility Centers by Current Amount",
"widgetDataLoader":"
$year_id = \\Drupal\\checkbook_infrastructure_layer\\Utilities\\RequestUtilities::getRequestParamValue('year');
$where_filters = [];
foreach($node->widgetConfig->requestParams as $param=>$value){
  if($param == 'fiscal_year_id'){
  $where_filters[] = _widget_build_sql_condition( 'release_approved_year_id', $value);
  //$where_filters[] = '('. $value . ' BETWEEN start_year_id AND end_year_id)';
  }else{
  $where_filters[] = _widget_build_sql_condition( $param, $value);
  }
  }
if(count($where_filters) > 0){
$where_filter = ' WHERE  ' . implode(' AND ' , $where_filters) ;
}

$sql = 'SELECT responsibility_center_id, responsibility_center_code, responsibility_center_name as responsibility_center_descr,
count(distinct contract_id) as contract_count,sum(total_amount) as total_amount,sum(original_amount) as original_amount, sum(spend_to_date) as spend_to_date
from ( select responsibility_center_id, responsibility_center_code, responsibility_center_name, contract_id,
sum(line_total_amount) as total_amount, sum(line_original_amount) as original_amount, sum(line_spend_to_date) as spend_to_date
from release_widget_summary '
. $where_filter .' AND responsibility_center_code IS NOT NULL group by responsibility_center_id, responsibility_center_code, responsibility_center_name, contract_id ) a
group by responsibility_center_id, responsibility_center_code, responsibility_center_descr ORDER BY 5 DESC LIMIT 10';
$node->data  = _checkbook_project_execute_sql($sql,'main','checkbook_nycha');
",
"widgetUpdateJSONConfig":"
$series_new = array();
$index = 0;
foreach($node->data as $row){
$tooltip_label =
'Responsibility Center: ' . $row['responsibility_center_descr'] .  '<br/>' .
'Amount: ' . \\Drupal\\checkbook_infrastructure_layer\\Utilities\\FormattingUtilities::custom_number_formatter_format($row['total_amount'] ,2, '$').  '<br/>';
$series_new[$index]['y'] = (float)$row['total_amount'];
$series_new[$index]['tooltip_label'] = $tooltip_label;
$node->widgetConfig->gridConfig->data[] = array($row['responsibility_center_descr'],$row['total_amount'] );
$index += 1;
}
$node->widgetConfig->chartConfig->series[0]->name = 'Fiscal Years';
$node->widgetConfig->chartConfig->series[0]->type = 'column';
$node->widgetConfig->chartConfig->series[0]->pointWidth = 30;
$node->widgetConfig->chartConfig->series[0]->data = $series_new;
",
"chartConfig" : {
"colors":["#7DB7E5"],
"plotOptions": {
"series": {
"stacking": "normal",
"dataLabels": {
"enabled": false
}
}
},
"xAxis": {
"categories": [0,1,2,3,4,5,6,7,8,9],
"labels": {"enabled": false}
},
"series": [
{
"name": "FY",
"type": "column",
"pointWidth": 50,
"data": []
}
],
"title": {"text": ""},
"yAxis": {
"min":0,
"minRange": 0.1,
"startOnTick":true,
"title": {"text": ""},
"labels":{"rotation": 0,"function":"yAxisFormatter"}
} ,
"legend": {
"enabled": false
},
"tooltip":{"function":"tooltipformatter"}
}
}


<function>
yAxisFormatter^^'formatter' : function(){return yAxisLabelFormatter(this);}##
tooltipformatter^^'formatter' :
function() {return this.point.tooltip_label ;
}##
clickEvent^^"click": function(){location.href = this.url; }
</function>
