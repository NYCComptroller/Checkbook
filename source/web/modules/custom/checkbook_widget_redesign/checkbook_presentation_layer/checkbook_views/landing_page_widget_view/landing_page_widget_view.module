<?php
/**
* This file is part of the Checkbook NYC financial transparency software.
*
* Copyright (C) 2012, 2013 New York City
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

require_once(\Drupal::service('extension.list.module')->getPath('checkbook_project') . "/includes/checkbook_project.inc");

use Drupal\checkbook_infrastructure_layer\Constants\Common\Dashboard;
use Drupal\checkbook_infrastructure_layer\Utilities\RequestUtilities;
use Drupal\checkbook_project\CommonUtilities\CustomURLHelper;
use Drupal\checkbook_project\WidgetUtilities\WidgetUtil;

/*************************************************************************************/
/* Widget Hooks                                                                      */
/*************************************************************************************/
function landing_page_widget_view_widget_controller_metadata() {
	return array(
    'data_tables' => array(
      'name' => t('Table'),
      'module' => 'landing_page_widget_view',
      'description' => t("This widget type implements HTML table.")
	)
	);
}

/**
 * Implementation for hook widget validate (custom)
 * @param $node
 */
function landing_page_widget_view_widget_controller_validate(&$node) {

}

/**
 * Implementation for hook widget data ...
 * @param $node
 */
function landing_page_widget_view_widget_controller_data(&$node) {
  //merge default config settings into node config settings
  if($node == null) {
    $node = widget_merge_default_settings($node);
  }

  //make sure configuration is loaded
  widget_controller_config($node);

  //prepare anything we'll need before loading
  widget_controller_prepare($node);

  //invoke widget specific prepare
  widget_controller_invoke($node, 'widget_prepare');

  //load data
  widget_controller_data($node);
  return $node;
}

function landing_page_widget_config_load_data($key) {
  $node = _widget_controller_node_load_file($key);
  return $node;
}
/**
 * Function will create a url param string with values that exist
 * in both the list of validUrlParameters and the query string
 * @param $node
 * @return string
 */
function _get_url_parameter_string($node) {
    $urlParameterString = "";
    if (isset($node->widgetConfig->validUrlParameters)) {
        $urlParams = $node->widgetConfig->validUrlParameters;
        $urlPath = RequestUtilities::getCurrentPageUrl();
         /* $urlPath = \Drupal::request()->query->get('q');
        //'q' is not set correctly
        if (!isset($urlPath)) {
        RequestUtilities::resetUrl();
        $urlPath = \Drupal::service('path.current')->getPath();
        }*/
        $pathParams = explode('/', $urlPath);
        for($i = 0; $i < count($pathParams); $i = $i + 1) {
            $key = $pathParams[$i];
            $value = $pathParams[$i+1] ?? null;
            if(in_array($key,$urlParams) && isset($value)) {
                $urlParameterString .= "/$key/$value" ;
            }
        }
    }
    return $urlParameterString;
}

function landing_page_widget_view_widget_controller_view(&$node) {
  // var_dump($node->data); //enable for testing in local
 	switch ($node->widgetConfig->widgetSubType){
		case "template":
		return [
          '#theme' => $node->widgetConfig->template,
          '#node' => $node,
        ];
		case "ajaxSimple" :
      $sAjaxSource = '/checkbook_views/data_tables/ajax_data/node/' .$node->nid;
      $sAjaxSource .= isset($node->legacy_node_id) ? '/legacy_node_id/'.$node->legacy_node_id : "";
      $sAjaxSource .= _get_url_parameter_string($node);
      $sAjaxSource = $sAjaxSource.CustomURLHelper::_checkbook_append_url_params();
			$node->widgetConfig->dataTableOptions->sAjaxSource =  _escape_special_characters(html_entity_decode($sAjaxSource,ENT_QUOTES));
			$node->widgetConfig->dataTableOptions->fnServerData= "##function ( sSource, aoData, fnCallback ) {
			aoData.push( {
			  'name': 'data_type', 'value': 'json' } );".
			  "\$j".".ajax( {
			    'dataType': 'json',
			    'type': 'GET',
			    'url': sSource,
			    'data': aoData,
			    'success': function (msg) {
              fnCallback(msg);
              addExpandBottomContURL();
          }
			  } );
			}##";

      // Get the dynamic javascript which need to be attached to the generated dataTable
      landing_page_widget_view_title($node);
      landing_page_widget_view_table_header($node);
      landing_page_widget_view_table_footer($node);

      $twigFilePath = \Drupal::service('extension.list.module')->getPath('landing_page_widget_view').'/templates/table_by_rows.html.twig';
      $twigService = \Drupal::service('twig');
      $templateClass = $twigService->getTemplateClass($twigFilePath);
      $template = $twigService->loadTemplate($templateClass, $twigFilePath);

      $markup = [
        '#children' => $template->render([ 'node' => $node]),
        '#attached' => [
          'html_head' => [

          ]
        ]
      ];
      return \Drupal::service('renderer')->render($markup);

		default :
		return [
           '#theme' => 'landing_page_widget_view_default_theme',
           '#node' => $node,
        ];
	}
}

function landing_page_widget_view_title($node) {

  if (isset($node->widgetConfig->table_title)) {
    $widget_title = $node->widgetConfig->table_title;
    if(isset($node->widgetConfig->headerSubTitle)){
      load_widget_controller_data_count($node);
      $headerSubTitle = ' Number of '.$node->widgetConfig->headerSubTitle.':  '.number_format($node->headerCount);
    }
  }else if(isset($node->widgetConfig->headerTitle)){
    load_widget_controller_data_count($node);
    $headerSubTitle = $node->widgetConfig->headerSubTitle ?? $node->widgetConfig->headerTitle;
    $count = isset($node->headerCount) && $node->headerCount > 4 ? '<span class="hideOnExpand">5 </span>' : '';
    if(Dashboard::isNycha() && isset($node->widgetConfig->nychaTitle)){
      $widget_title = $node->widgetConfig->nychaTitle;
    }
    else{
      $widget_title = 'Top '.$count.' '.$node->widgetConfig->headerTitle;
    }
    $headerSubTitle = ' Number of '.$headerSubTitle.':  '.number_format($node->headerCount);
  }

  if(isset($widget_title)){
    $final_title =  '<div class="tableHeader"><h2>' . $widget_title .(isset($headerSubTitle)?('<span class="contentCount">'.$headerSubTitle.'</span>'):''). '</h2></div>';
  }
  $node->widgetConfig->head_title = $final_title;
}


function landing_page_widget_view_table_header($node){
  $header_table = "";
  foreach ($node->widgetConfig->table_columns as $row) {
    if (check_node_flag_visibilty($row->visibility_flag ?? null, $node)) {
      $label = (isset($row->labelAlias)) ? (WidgetUtil::generateLabelMapping($row->labelAlias)) : $row->label;
      if (isset($row->adjustLabelFunction)) {
        $fn = $row->adjustLabelFunction;
        $label = (function_exists($fn)) ? $fn($label) : "";
      }
      $headerClass = isset($row->headerClass) ? (' class="' . $row->headerClass . '"') : '';
      $header_table .= "<th $headerClass>" . $label . "</th>";
    }
  }
  $node->widgetConfig->table_header = $header_table;
}

function landing_page_widget_view_table_footer($node){
  $theme_path =  'modules/custom/jquery_plugins';
  $details_link_or ='';
  if ($node->widgetConfig->enableExpand == TRUE) {
    if($node->totalDataCount > 5){
      $simultExpandCollapseNodeIds = array();
      if(in_array($node->nid, $simultExpandCollapseNodeIds)){
        $collapse_button =  '<a  class="simultExpandCollapseWidget"><img src="/' . $theme_path . '/images/open.png">';
      }else{
        $collapse_button = '<a  class="expandCollapseWidget"><img src="/' . $theme_path . '/images/open.png"></a>';
      }
      $node->widgetConfig->collapseButton = $collapse_button;
    }
  }

  if(isset($node->widgetConfig->footerUrl)) {
    if($node->widgetConfig->footerUrl != "") {
      $footerUrl = $node->widgetConfig->footerUrl;
      $node->widgetConfig->footerUrl = eval("return $footerUrl;");
    }
    else $node->widgetConfig->footerUrl = null;
  }
  else {
    $footerUrl = _widget_controller_footer_url($node);
    if(isset($footerUrl)){
      $node->widgetConfig->footerUrl = $footerUrl;
    }else{
      $node->widgetConfig->footerUrl = null;
    }
  }

  if (isset($node->widgetConfig->footerUrl)) {
    if($node->totalDataCount > 5){
      $details_link_or = '<span class="plus-or">or</span>';
    }
    $url = $node->widgetConfig->footerUrl;
    if($node->totalDataCount > 0) {
      $details_link = '<a class="show-details bottomContainerReload" href="'.$url.'">Details >></a>';
    }
    else {
      $details_link = '';
    }
    $node->widgetConfig->detailsLink = $details_link_or.$details_link;
  }
}
function landing_page_widget_view_ajaxdata_json($node) {
  if (!isset($node->totalDataCount)) {
    $iTotalRecords_dataTable = 0;
    $iTotalDisplayRecords_dataTable = 0;
  } else {
    $iTotalDisplayRecords = \Drupal::config('check_book')->get('datatables')['iTotalDisplayRecords'] ?? $node->totalDataCount;
    $iTotalRecords_dataTable = $node->totalDataCount;
    $iTotalDisplayRecords_dataTable = min($node->totalDataCount, $iTotalDisplayRecords);
  }
  $response = [
    "sEcho" => intval($_REQUEST['sEcho']),
    "iTotalRecords" => $iTotalRecords_dataTable,
    "iTotalDisplayRecords" => $iTotalDisplayRecords_dataTable,
    "iDisplayLength" => ($node->widgetConfig->limit ?? 10),
  ];
  $response['aaData'] = [];
  if ($node->data) {
    foreach ($node->data as $datarow) {
      $rowArray = [];
      foreach ($node->widgetConfig->table_columns as $row) {
        if ((!isset($row->datasource) || (($row->datasource == RequestUtilities::get('datasource')))) && isset($row->column)) {
          if (isset($node->customDataPaddings[$row->column]) && $node->customDataPaddings[$row->column] > 0) {
            $style = "style='margin-right:" . $node->customDataPaddings[$row->column] * 8 . "px'";
          } else {
            $style = "";
          }
          if (isset($node->maxColumnDataLength[$row->column]) && $node->maxColumnDataLength[$row->column] > 0) {
            $style = "style='text-align: center;'";
            $value = str_pad($datarow[$row->column], $node->maxColumnDataLength[$row->column], " ", STR_PAD_LEFT);
            $value = str_replace(" ", "&nbsp;", $value);
            $rowArray[] = '<div ' . $style . '>' . $value . '</div>';
          } else {
            $rowArray[] = isset($datarow[$row->column]) ? '<div ' . $style . '>' . $datarow[$row->column] . '</div>' : "";
          }
        }
      }
      $response['aaData'][] = $rowArray;
    }
  }
  return $response;
}
function landing_page_widget_view_add_js($node){
    $theme_path =  'modules/custom/jquery_plugins';
    $node->widgetConfig->dataTableOptions->oLanguage = array("sProcessing"=>"<img src='/" . $theme_path . "/images/loading_large.gif' title='Processing...'/>",
    "sZeroRecords"=>"<div class='clearfix' id='no-records-datatable'><span>No Matching Records Found</span></div>");
    $oldDataTableOptions = get_object_vars($node->widgetConfig->dataTableOptions);
    $newAolcols = array();
    foreach($oldDataTableOptions['aoColumns'] as $key=>$value){
        $aoCols = get_object_vars($value);
        if(((isset($aoCols['datasource']) && RequestUtilities::get('datasource') == isset($aoCols['datasource'])))){
            $newAolcols[] = $value;
        }else if((!isset($aoCols['datasource']))){
        	$newAolcols[] = $value;
        }
    }
    if(count($newAolcols)){
    	$oldDataTableOptions['aoColumns'] = $newAolcols;
    }

if(isset($node->widgetConfig->stickyHeader)){
    //<editor-fold desc="Sticky Headers">

    /* NYCCHKBK-3724: hooks into fnDrawCallback and fnInitComplete for sticky header implementation */

    //Append custom js to events
    $fnInitComplete = $oldDataTableOptions["fnInitComplete"];
    $fnInitCompleteExists = isset($fnInitComplete);
    $fnInitComplete = str_replace("##","",$fnInitComplete);
    $fnInitComplete = $fnInitComplete ? substr_replace($fnInitComplete,"fnCustomInitComplete();}",strlen($fnInitComplete)-1,1)  : "function () { new fnCustomInitComplete(); }";
    $fnInitComplete = "##".$fnInitComplete."##";

    $fnDrawCallback = $oldDataTableOptions["fnDrawCallback"];
    $fnDrawCallbackExists = isset($fnDrawCallback);
    $fnDrawCallback = str_replace("##","",$fnDrawCallback);
    $fnDrawCallback = $fnDrawCallback ? substr_replace($fnDrawCallback,"fnCustomDrawCallback();}",strlen($fnDrawCallback)-1,1)  : "function () { new fnCustomDrawCallback(); }";
    $fnDrawCallback = "##".$fnDrawCallback."##";

//    if the function exists, update it, else insert it to the front
    if($fnDrawCallbackExists)
        $oldDataTableOptions["fnDrawCallback"] = $fnDrawCallback;
    else
        $oldDataTableOptions = array_slice($oldDataTableOptions, 0, 0, true) +
            array("fnDrawCallback" => $fnDrawCallback) +
            array_slice($oldDataTableOptions, 0, NULL, true);

    if($fnInitCompleteExists)
        $oldDataTableOptions["fnInitComplete"] = $fnInitComplete;
    else
        $oldDataTableOptions = array_slice($oldDataTableOptions, 0, 0, true) +
            array("fnInitComplete" => $fnInitComplete) +
            array_slice($oldDataTableOptions, 0, NULL, true);


    //Custom js for sticky headers, top spacing will change if the drupal admin menu is present
    $sticky_header_js = "
    function fnCustomDrawCallback() {".
        "\$j"."('.dataTables_scrollHead').width("."\$j"."('.dataTables_scroll').width());".
      "\$j"."('.dataTables_scrollHead').scrollLeft(0);".
      "\$j"."('.dataTables_scrollBody').scrollLeft(0);
    }
    function fnCustomInitComplete() {
        var topSpacing = ".(\Drupal::currentUser()->isAuthenticated() ? 66 : 0).";

        var tableOffsetTop = "."\$j"."('.dataTables_scroll').offset().top;
        var tableHeight = "."\$j"."('.dataTables_scroll').height();
        var docHeight = "."\$j"."(document).height();
        var bottomSpacing = docHeight - (tableOffsetTop + tableHeight);

        "."\$j"."('.dataTables_scrollHead').sticky({ topSpacing: ".topSpacing.", bottomSpacing: ".bottomSpacing.", getWidthFrom:'.dataTables_scroll' });

        if( "."\$j"."('.DTFC_ScrollWrapper') && "."\$j"."('.DTFC_ScrollWrapper').offset()) {
            "."\$j"."('.DTFC_LeftHeadWrapper').sticky({ topSpacing: ".topSpacing.", bottomSpacing: ".bottomSpacing.", getWidthFrom:'.DTFC_LeftWrapper' });
        }
    }";
    //</editor-fold desc="Sticky Headers">
}

    $dataTableOptions = json_encode((object)$oldDataTableOptions);

    $id  = "";
    if($node->widgetConfig->widgetSubType == "ajaxSimple" || $node->widgetConfig->widgetSubType == "ajaxCustomTemplate" ){
        $id = widget_controller_unique_identifier($node);
    }

  return "
      var oTable" . $id  .  ";
      var "."\$j"."= jQuery.noConflict();".
      "\$j"."(document).ready(function() {
          oTable" . $id  .  " = "."\$j"."('#table_" . widget_controller_unique_identifier($node) . "').dataTable(

          " . stripcslashes(str_replace('##"','',str_replace('"##','',$dataTableOptions))) ."
          );
          oTable" . $id  .  ".node_id = \"" . $node->nid . "\" ;
          oTable" . $id  .  ".initAjaxSource = '" . (isset($node->widgetConfig->sAjaxSource) ? $node->widgetConfig->sAjaxSource . CustomURLHelper::_checkbook_append_url_params() : "") . "' ;

        " . stripcslashes($node->widgetConfig->customJS?? "") .
      ($sticky_header_js ?? '') . //append sticky headers js
      "} );" .
      stripcslashes($node->widgetConfig->customExternalJS ?? "");
}


/*************************************************************************************/
/* Theme Hooks                                                                       */
/*************************************************************************************/

function landing_page_widget_view_theme($existing, $type, $theme, $path) {
  return [
    'landing_page_widget_view_default_theme' => [
      'template' => 'table_by_rows',
      'variables' => [
        'node' => [],
        'uid' => ''
      ],
    ],
    'landing_page_widget_view_by_rows_theme' => [
      'template' => 'table_by_rows',
      'variables' => [
        'node' => [],
        'uid' => ''
      ],
    ],
    'landing_page_widget_view_list_by_rows_theme' => [
      'template' => 'table_by_list',
      'variables' => [
        'node' => [],
        'uid' => ''
      ],
    ],
  ];

}

function landing_page_widget_view_export_link($node) {
    $nid = widget_controller_unique_identifier($node);
	return landing_page_widget_view_alerts_link($node)." <span class=export exportid={$nid}>Export</span>";
    //return "<span class=export exportid={$nid}>Export</span>";
}

function landing_page_widget_view_alerts_link($node){
    $nid = widget_controller_unique_identifier($node);
    return "<span class=alerts alertsid={$nid}>Schedule Alert</span>";
}

function _escape_special_characters($string) {

    $string = str_replace("%", "%25", $string);
    $string = str_replace("\\", "%5C%5C", $string);
    $string = str_replace(" ", "%20", $string);
    $string = str_replace("#", "%23", $string);
    //$string = str_replace("/", "%2F", $string);
    $string = str_replace("&", "%26", $string);
    $string = str_replace("[", "\[", $string);
    $string = str_replace("]", "\]", $string);
    $string = str_replace(":", "\:", $string);
    $string = str_replace("'", "%27", $string);
    $string = str_replace("+", "\%2B", $string);
    $string = str_replace("?", "\%3F", $string);
    $string = str_replace("$", "\%24", $string);
    $string = str_replace("!", "\%21", $string);
    $string = str_replace("^", "\%5E", $string);
    $string = str_replace("|", "\%7C", $string);
    $string = str_replace("(", "\%28", $string);
    $string = str_replace(")", "\%29", $string);
    $string = str_replace("*", "\%2A", $string);
    $string = str_replace(".", "\%2E", $string);

  return $string;
}

/**
 * gets the data from the data controller based
 * @param  $node
 * @return mixed
 */
  function landing_page_widget_view_get_data($node){
    //merge default config settings into node config settings
    $node = widget_merge_default_settings($node);

    //make sure configuration is loaded
    widget_controller_config($node);

    //prepare anything we'll need before loading
    widget_controller_prepare($node);

    //invoke widget specific prepare
    widget_controller_invoke($node, 'widget_prepare');

    //load data
    widget_controller_data($node);
    return $node;
}

/*
 Modified the data controller query to add the right order by clause...
 */
 function landing_page_widget_view_widget_prepare($node){

  $sort_columns = array();
  foreach($node->widgetConfig->table_columns as $column) {
    $sort_columns[] = $column;
  }

  //var_dump($node->widgetConfig->dataTableOptions->aaSorting);
  if(isset($node->widgetConfig->dataTableOptions->aaSorting)) {
    $count = 0;
    $node->widgetConfig->orderBy = (isset($node->widgetConfig->orderBy)) ? array($node->widgetConfig->orderBy) : array();

    if(isset($_REQUEST['iSortingCols'])) {
      while ($count < $_REQUEST['iSortingCols']) {
        $index = $count;

        $sort_column = $sort_columns[$_REQUEST['iSortCol_' . $index]]->column;
        if ($_REQUEST['sSortDir_' . $index] == 'desc')
          $node->widgetConfig->orderBy[] = '-' . $sort_column;
        else
          $node->widgetConfig->orderBy[] = $sort_column;
        $count += 1;
      }
    }
  }

  /**
   * uniqueSortColumn will allow the data to order properly by a secondary unique sort
   */
   $index = 0; //Sample parameters from the Ajax request for Order By - iSortCol_0=4&sSortDir_0=asc
  $sortDir = $_REQUEST['sSortDir_' . $index] ?? null;
  $uniqueSortColumn = $node->widgetConfig->uniqueSortColumn ?? null;
  if(isset($node->widgetConfig->orderBy) && !empty($node->widgetConfig->orderBy)) {
    if(isset($uniqueSortColumn)) {
      if(is_array($uniqueSortColumn)) {
        foreach($uniqueSortColumn as $value) {
          if($sortDir == 'desc' && !str_starts_with($value, '-'))
            $node->widgetConfig->orderBy[]  = '-' . $value;
          else
            $node->widgetConfig->orderBy[] =  (str_starts_with($value, '-'))? ltrim($value, '-') : $value;
        }
      }
      else {
        $node->widgetConfig->orderBy[] = ($sortDir == 'desc' && !str_starts_with($uniqueSortColumn, '-')) ? '-' . $uniqueSortColumn : ltrim($uniqueSortColumn, '-');
      }
    }
  }

  if(isset($_REQUEST['iDisplayStart']) && is_numeric($_REQUEST['iDisplayStart'])){
    $node->widgetConfig->startWith = (int)$_REQUEST['iDisplayStart'];
  }

  $iDisplayLength = (isset($_REQUEST['iDisplayLength']) && is_numeric($_REQUEST['iDisplayLength']) && ((int)$_REQUEST['iDisplayLength']) > 0) ?
    (int)$_REQUEST['iDisplayLength'] : ($node->widgetConfig->limit ?? NULL);
  if(isset($iDisplayLength)){
    $node->widgetConfig->limit = $iDisplayLength;
  }
}

  function __landing_page_widget_add_padding_data($node){
  if(isset($node->widgetConfig->skipCustomPadding)) return;
  $index= 0;
  $paddings = array();
  $columns_max_length = array();
  foreach ($node->widgetConfig->table_columns as $row){
      if(!isset($row->datasource) || (($row->datasource == RequestUtilities::get('datasource')))){
          $colDataTableOptions = $node->widgetConfig->dataTableOptions->aoColumns[$index];
          if(!isset($colDataTableOptions)){
              $colDataTableOptions->sClass = $row->type;
          }

          if(isset($colDataTableOptions->sClass)) {
            $label = (isset($row->labelAlias))? (WidgetUtil::generateLabelMapping($row->labelAlias)) : $row->label;
            $labelWords =  explode("<br/>",$label);
            $maxlength = 0;
            $maxColumnDataLength = 0;
            foreach ($labelWords as $word) {
              $maxlength = ($maxlength > strlen(strip_tags($word))) ? $maxlength : strlen(strip_tags($word));
            }
            foreach ($node->data as $datarow) {
              if (str_contains($colDataTableOptions->sClass, "number")) {
                $maxColumnDataLength = ($maxColumnDataLength > strlen(strip_tags($datarow[$row->column]))) ? $maxColumnDataLength : strlen(strip_tags($datarow[$row->column]));
              }
              if (str_contains($colDataTableOptions->sClass, "number-center") || str_contains($colDataTableOptions->sClass, "number-center-scroll")) {
                $maxColumnDataLength = ($maxColumnDataLength > strlen(strip_tags($datarow[$row->column]))) ? $maxColumnDataLength : strlen(strip_tags($datarow[$row->column]));
              }
            }
            $paddings[$row->column] = (str_contains($colDataTableOptions->sClass, "number")) ? (($maxlength - $maxColumnDataLength) / 2 > 0) ? ($maxlength - $maxColumnDataLength) / 2 : 0 : "";
            $columns_max_length[$row->column] = (str_contains($colDataTableOptions->sClass, "number-center") || str_contains($colDataTableOptions->sClass, "number-center-scroll"))  ? $maxColumnDataLength: "";
          }
          $index +=1;
      }
  }
  $node->customDataPaddings =  $paddings;
  $node->maxColumnDataLength = $columns_max_length;
}
