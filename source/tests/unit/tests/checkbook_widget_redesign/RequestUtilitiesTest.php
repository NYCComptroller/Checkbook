<?php
/**
 * Created by IntelliJ IDEA.
 * User: alexandr.perfilov
 * Date: 8/8/18
 * Time: 10:15 PM
 */

include_once CUSTOM_MODULES_DIR . '/checkbook_widget_redesign/checkbook_infrastructure_layer/utilities/RequestUtilities.php';


/**
 * Class RequestUtilitiesTest
 */
class RequestUtilitiesTest extends \PHPUnit\Framework\TestCase
{
    /**
     *
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     *
     */
    public function testGetSingleParam()
    {
        $_GET['q'] = 'a/b/c/d/e';
        $this->assertEquals('c', RequestUtilities::get('b'));
    }

    /**
     *
     */
    public function testGetSpecifyQ()
    {
        $q = 'a/b/c/d/e';
        $this->assertEquals('c', RequestUtilities::get('b', ['q' => $q]));
    }

    /**
     *
     */
    public function testGetMultipleParams()
    {
        $_GET['q'] = 'a/b/c/d/e/f/g';

        $expected = ['b', 'd', 'e', 'g'];
        $this->assertEquals($expected, RequestUtilities::get(['a', 'c', 'd', 'f']));
    }

    /**
     *
     */
    public function testGetDefaultParams()
    {
        $_GET['q'] = 'a/b/c/d/e/f/g';

        $default = [
            'dashboard' => 'test',
            'mwbe' => '7',
        ];
        $expected = ['b', 'd', 'test', '7'];
        $this->assertEquals($expected, RequestUtilities::get(['a', 'c', 'dashboard', 'mwbe'], ['default' => $default]));
    }

    /**
     *
     */
    public function testGetOverridenParams()
    {
        $_GET['q'] = 'a/b/c/d/e/f/g';

        $override = [
            'e' => 'test',
            'f' => '7',
        ];
        $expected = ['b', 'd', 'test', '7'];
        $this->assertEquals($expected, RequestUtilities::get(['a', 'c', 'e', 'f'], ['override' => $override]));
    }

    /**
     *
     */
    public function testGetAliasedParams()
    {
        $_GET['q'] = 'a/b/ccc/d/ee/f/g';

        $expected = ['b', 'd', 'f', 'g'];
        $this->assertEquals($expected, RequestUtilities::get(['a', 'c|ccc', 'e|ee', 'f']));
    }

//    /**
//     *
//     */
//    public function testGetByAjaxReferrer()
//    {
//        $_SERVER['HTTP_X_REQUESTED_WITH'] = 'xmlhttprequest';
//        $_SERVER['HTTP_REFERER'] = 'a/b3/c/d4/e/f5/f/g6';
//        $_GET['q'] = 'a/b/ccc/d/ee/f/g';
//
//        $expected = ['b3', 'd4', 'f5', 'g6'];
//        $this->assertEquals($expected, RequestUtilities::get(['a', 'c|ccc', 'e|ee', 'f']));
//        unset($_SERVER['HTTP_X_REQUESTED_WITH']);
//        unset($_SERVER['HTTP_REFERER']);
//    }

    /**
     *
     */
    public function testIsAjax()
    {
        $_SERVER['HTTP_X_REQUESTED_WITH'] = 'xmlhttprequest';
        $this->assertTrue(RequestUtilities::is_ajax());
        unset($_SERVER['HTTP_X_REQUESTED_WITH']);
        $this->assertFalse(RequestUtilities::is_ajax());
    }

    /**
     *
     */
    public function testGetUrlParamString()
    {
        $_GET['q'] = 'a/b/css/d/e/f/g';
        $this->assertEquals('/css/d', RequestUtilities::_getUrlParamString('c','css'));

        $_GET['q'] = 'a/b/c/d/e/f/g';
        $this->assertEquals('/c/d', RequestUtilities::_getUrlParamString('c'));
    }

    /**
     *
     */
    public function testBuildUrlFromParam()
    {
        $_GET['q'] = 'a/b/c/d/e/f/g';

        $this->assertEquals('/c/d', RequestUtilities::buildUrlFromParam('c'));

        $this->assertEquals('/css/d', RequestUtilities::buildUrlFromParam('c|css'));

        $_GET['q'] = 'a/b/css/d/e/f/g';
        $this->assertEquals('/css/d', RequestUtilities::buildUrlFromParam('c|css'));

        $_GET['q'] = 'a/b/c/d/e/f/g';
        $n = null;
        $this->assertEquals('/c/d', RequestUtilities::buildUrlFromParam("c|{$n}"));
    }

    /**
     *
     */
    public function testBuildUrlFromParamNull()
    {
        $_GET['q'] = 'a/b/c/d/e/f/g';
        $n = null;
        $this->assertEquals('/c/d', RequestUtilities::buildUrlFromParam("c|{$n}"));
    }

    /**
     *
     */
    public function testBuildUrlFromParamAsArray()
    {
        $_GET['q'] = 'a/b/c/d/e/f/g';
        $this->assertEquals('/c/d/f/g', RequestUtilities::buildUrlFromParam(['c','f']));
    }
}
