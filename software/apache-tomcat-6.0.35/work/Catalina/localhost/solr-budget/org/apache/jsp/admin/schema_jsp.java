package org.apache.jsp.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.solr.core.SolrConfig;
import org.apache.solr.core.SolrCore;
import org.apache.solr.schema.IndexSchema;
import java.io.File;
import java.net.InetAddress;
import java.io.StringWriter;
import org.apache.solr.core.Config;
import org.apache.solr.common.util.XML;
import org.apache.solr.common.SolrException;
import org.apache.lucene.LucenePackage;
import java.net.UnknownHostException;

public final class schema_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


  // only try to figure out the hostname once in a static block so 
  // we don't have a potentially slow DNS lookup on every admin request
  static InetAddress addr = null;
  static String hostname = "unknown";
  static {
    try {
      addr = InetAddress.getLocalHost();
      hostname = addr.getCanonicalHostName();
    } catch (UnknownHostException e) {
      //default to unknown
    }
  }

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List _jspx_dependants;

  static {
    _jspx_dependants = new java.util.ArrayList(2);
    _jspx_dependants.add("/admin/header.jsp");
    _jspx_dependants.add("/admin/_info.jsp");
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.AnnotationProcessor _jsp_annotationprocessor;

  public Object getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_annotationprocessor = (org.apache.AnnotationProcessor) getServletConfig().getServletContext().getAttribute(org.apache.AnnotationProcessor.class.getName());
  }

  public void _jspDestroy() {
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("  \n");
      out.write("<script src=\"jquery-1.4.3.min.js\"></script>\n");
      out.write("<script>\n");
      out.write("\n");
      out.write("(function($, libName) {\n");
      out.write("  var solr = {\n");
      out.write("    \n");
      out.write("    //The default location of the luke handler relative to this page\n");
      out.write("    // Can be overridden in the init(url) method\n");
      out.write("    pathToLukeHandler: 'luke',  \n");
      out.write("    \n");
      out.write("    // Base properties to hold schema information\n");
      out.write("    schemaInfo: {},\n");
      out.write("    schemaFields: {},\n");
      out.write("    schemaDynamicFields: {},\n");
      out.write("    schemaTypes: {},\n");
      out.write("    schemaFlags: {},\n");
      out.write("    \n");
      out.write("    //The basic function to call to make the initail JSON calls\n");
      out.write("    // takes one option parameter, the path to the luke handler\n");
      out.write("    // if undefined, it will use the default, 'luke', which means\n");
      out.write("    // this is being called from the same relative URL path\n");
      out.write("    init: function(pathToLukeHandler) {\n");
      out.write("      if (pathToLukeHandler != undefined) {\n");
      out.write("        solr.pathToLukeHandler = pathToLukeHandler;\n");
      out.write("      }\n");
      out.write("      solr.loadSchema(function() {\n");
      out.write("        solr.loadFromLukeHandler(function () {\n");
      out.write("          solr.createMenu('menu');\n");
      out.write("          solr.displaySchemaInfo();\n");
      out.write("        });\n");
      out.write("      });\n");
      out.write("\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    //load the Schema from the LukeRequestHandler\n");
      out.write("    // this loads every field, and in each field the copy source/dests and flags\n");
      out.write("    // we also load the list of field types, and the list of flags\n");
      out.write("    loadSchema: function(func) {\n");
      out.write("\t\t\t$.getJSON(solr.pathToLukeHandler +'?show=schema&wt=json', function(data) {\n");
      out.write("        //populate all non field/type/flag data in the info block\n");
      out.write("        $.each(data.index, function(i, item) {\n");
      out.write("          solr.schemaInfo[i] = item;\n");
      out.write("        });\n");
      out.write("        \n");
      out.write("        //LukeRequestHandler places these two attributes outside of the \"index\" node, but\n");
      out.write("        // we want it here so we can more easily display it in the \"HOME\" block\n");
      out.write("        solr.schemaInfo['uniqueKeyField'] = data.schema.uniqueKeyField;\n");
      out.write("        solr.schemaInfo['defaultSearchField'] = data.schema.defaultSearchField;\n");
      out.write("        //a one-off hack, because the directory string is so long and unbroken\n");
      out.write("        // that it can break CSS layouts\n");
      out.write("        solr.schemaInfo['directory'] = solr.schemaInfo['directory'].substring(0, solr.schemaInfo['directory'].indexOf('@')+1) + ' ' +  solr.schemaInfo['directory'].substring(solr.schemaInfo['directory'].indexOf('@') +1);\n");
      out.write("        \n");
      out.write("        // populate the list of fields\n");
      out.write("\t\t\t\t$.each(data.schema.fields, function(i,item){\n");
      out.write("\t\t\t\t\tsolr.schemaFields[i]=item;\n");
      out.write("     \t\t});\n");
      out.write("        // populate the list of field types\n");
      out.write("\t      $.each(data.schema.types, function(type, ft) {\n");
      out.write("          solr.schemaTypes[type] = ft;\n");
      out.write("        });\n");
      out.write("        //populate the list of dynamic fields\n");
      out.write("        $.each(data.schema.dynamicFields, function(i, dynField) {\n");
      out.write("          solr.schemaDynamicFields[i] = dynField;\n");
      out.write("        });\n");
      out.write("        //populate the list of flags, so we can convert flags to text in display\n");
      out.write("      \t$.each(data.info.key, function(i, flag) {\n");
      out.write("      \t\tsolr.schemaFlags[i] = flag;\n");
      out.write(" \t    \t});\n");
      out.write("        \n");
      out.write("        //LukeRequestHandler returns copyFields src/dest as the entire toString of the field\n");
      out.write("        // we only need the field name, so here we loop through the fields, and replace the full\n");
      out.write("        // field definitions with the name in the copySources/copyDests properties\n");
      out.write("        $.each(solr.schemaFields, function(i, field) {\n");
      out.write("          $.each(['copySources', 'copyDests'], function(i, copyProp) {\n");
      out.write("            var newFields = new Array();\n");
      out.write("            $.each(field[copyProp], function(i, fullName) {\n");
      out.write("              newFields.push(fullName.substring(fullName.lastIndexOf(':')+1, fullName.indexOf('{')));\n");
      out.write("            });\n");
      out.write("            field[copyProp] = newFields;\n");
      out.write("          });\n");
      out.write("        \n");
      out.write("        });\n");
      out.write("        //An additional optional callback\n");
      out.write("        // used in init to trigger the 2nd call to LukeRequestHandler only\n");
      out.write("        // after the first one is finished\n");
      out.write("        if ($.isFunction(func)) {\n");
      out.write("          func(solr);\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    //further populates the loaded schema with information gathered\n");
      out.write("    // from the no argument LukeRequestHandler\n");
      out.write("    loadFromLukeHandler: function(func) {\n");
      out.write("      $.getJSON(solr.pathToLukeHandler+'?wt=json', function(data) {\n");
      out.write("        $.each(data.fields, function(i, item) {\n");
      out.write("          var field = solr.schemaFields[i];\n");
      out.write("          \n");
      out.write("          //If undefined, then we have a dynamicField which does not show up\n");
      out.write("          // in the LukeRequestHandler show=schema variant\n");
      out.write("          if (field == undefined) {\n");
      out.write("            field = item;\n");
      out.write("            //Attach this field to its dynamicField\n");
      out.write("            var base = field.dynamicBase;\n");
      out.write("            var dynField = solr.schemaDynamicFields[base];\n");
      out.write("\n");
      out.write("            //Some fields in a multicore setting have no dynamic base, either\n");
      out.write("            // the name of the core is a field that has no type or flags\n");
      out.write("            if (dynField != undefined) {\n");
      out.write("            \tvar synFields = dynField['fields'];\n");
      out.write("\t            if (synFields== undefined) {\n");
      out.write("    \t          synFields= new Array();\n");
      out.write("        \t    }\n");
      out.write("            \tsynFields.push(i);\n");
      out.write("            \tdynField['fields'] = synFields;\n");
      out.write("            }\n");
      out.write("            solr.schemaFields[i] = item;\n");
      out.write("          }\n");
      out.write("          //Populate other data in this field that would not have been loaded in\n");
      out.write("          // the show=schema variant\n");
      out.write("          $.each(item, function(k, v) {\n");
      out.write("            if (k == 'topTerms' || k == 'histogram') {\n");
      out.write("              solr.schemaFields[i][k] = solr.lukeArrayToHash(v);\n");
      out.write("            } else {\n");
      out.write("              solr.schemaFields[i][k] = v;\n");
      out.write("            }\n");
      out.write("          });\n");
      out.write("        });\n");
      out.write("        //another optional callback; used in the init case to lay out the page\n");
      out.write("        // after the data is loaded\n");
      out.write("        if ($.isFunction(func)) {\n");
      out.write("          func();\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("    },\n");
      out.write("    //some elements in the JSON response are arrays, where odd/even elements\n");
      out.write("    // are the name/value, and convert it to a standard map/associative array\n");
      out.write("    // incoming: ['foo', 'bar', 'bat', 'baz']\n");
      out.write("    // output: {'foo':'bar', 'bat':baz'}\n");
      out.write("    lukeArrayToHash: function(termsArr) {\n");
      out.write("        var hash = new Object();\n");
      out.write("\t\t\t\tvar temp;\n");
      out.write("        //topTerms comes in as an array, with odd indexes the field name\n");
      out.write("        // and even indexes the number\n");
      out.write("\t\t\t\t$.each(termsArr, function(i, item) {\n");
      out.write("\t\t\t\t\tif (i%2 ==0) {\n");
      out.write("\t\t\t\t\t\ttemp = item;\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\thash[temp] = item;\n");
      out.write("\t\t\t\t\t} \n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t\treturn hash;\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    //gets the top Terms via an Ajax call the LukeRequestHandler for that field\n");
      out.write("    // The callback is used here to redraw the table after the ajax call returns\n");
      out.write("\t\tgetTopTerms: function(fieldName, numTerms, func) {\n");
      out.write("      if (numTerms == undefined) {\n");
      out.write("        var numTerms = 10;\n");
      out.write("      }\n");
      out.write("      if (isNaN(numTerms) || numTerms <=0 || numTerms.indexOf('.') != -1) {\n");
      out.write("        return;\n");
      out.write("      }\n");
      out.write("\t\t\t$.getJSON(solr.pathToLukeHandler+'?fl='+fieldName+'&wt=json&numTerms='+numTerms, function(data) {                  \n");
      out.write("\t\t\t\tsolr.schemaFields[fieldName]['topTerms'] = solr.lukeArrayToHash(data.fields[fieldName].topTerms);\n");
      out.write("        if ($.isFunction(func)) {\n");
      out.write("          func(solr.schemaFields[fieldName]['topTerms'], fieldName);\n");
      out.write("        }\n");
      out.write("\t\t\t});\n");
      out.write("\t\t},\n");
      out.write("    \n");
      out.write("    // Displays the SchemaInfo in the main content panel\n");
      out.write("    // dispayed on data load, and also when 'Home' is clicked\n");
      out.write("    displaySchemaInfo: function() {\n");
      out.write("      $('#mainInfo').html('');\n");
      out.write("      $('#topTerms').html('');\n");
      out.write("      $('#histogram').html('');      \n");
      out.write("      $('#mainInfo').append(solr.createSimpleText('Schema Information'));\n");
      out.write("      //Make sure the uniqueKeyField and defaultSearchFields come first\n");
      out.write("      $.each({'Unique Key':'uniqueKeyField', 'Default Search Field':'defaultSearchField'}, function(text, prop) {\n");
      out.write("          if (solr.schemaInfo[prop] != undefined) {\n");
      out.write("            $('#mainInfo').append(solr.createNameValueText(text, function(p) {\n");
      out.write("              p.appendChild(solr.createLink(solr.schemaInfo[prop], solr.schemaInfo[prop]));\n");
      out.write("              return p;\n");
      out.write("            }));\n");
      out.write("          } \n");
      out.write("      });\n");
      out.write("      $.each(solr.schemaInfo, function(i, item) {\n");
      out.write("        if (i == 'uniqueKeyField' || i == 'defaultSearchField') {\n");
      out.write("          //noop; we took care of this above\n");
      out.write("        } else {\n");
      out.write("          $('#mainInfo').append(solr.createNameValueText(i, item));\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("      //Close all menus when we display schema home\n");
      out.write("      solr.toggleMenus(undefined, ['fields', 'types', 'dynFields']);\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    // display a dynamic field in the main content panel\n");
      out.write("    displayDynamicField: function(dynamicPattern) {\n");
      out.write("      var df = solr.schemaDynamicFields[dynamicPattern];\n");
      out.write("      $('#mainInfo').html('');\n");
      out.write("      $('#topTerms').html('');\n");
      out.write("      $('#histogram').html('');\n");
      out.write("      $('#mainInfo').append(solr.createSimpleText('Dynamic Field: ' + dynamicPattern));\n");
      out.write("      $('#mainInfo').append(solr.createNameValueText('Fields', function(p) {\n");
      out.write("        if (df.fields != undefined) {\n");
      out.write("          $.each(df.fields, function(i, item) {\n");
      out.write("            p.appendChild(solr.createLink(item, item));\n");
      out.write("          });\n");
      out.write("        } else {\n");
      out.write("          p.appendChild(document.createTextNode(' None currently in index'));\n");
      out.write("        }\n");
      out.write("        return p;\n");
      out.write("      }));\n");
      out.write("      var ft = solr.schemaTypes[df.type];\n");
      out.write("      $('#mainInfo').append(solr.createNameValueText('Field Type', function(p) {\n");
      out.write("        p.appendChild(solr.createLink(df.type, df.type, solr.displayFieldType));\n");
      out.write("        return p;\n");
      out.write("      }));\n");
      out.write("      if (df.flags != undefined) {\n");
      out.write("        $('#mainInfo').append(solr.createNameValueText('Properties', solr.createTextFromFlags(df.flags, df.type)));\n");
      out.write("      }\n");
      out.write("      solr.displayAnalyzer(ft.indexAnalyzer, 'Index Analyzer', true);\n");
      out.write("      solr.displayAnalyzer(ft.queryAnalyzer, 'Query Analyzer', true);\n");
      out.write("\n");
      out.write("      solr.toggleMenus('dynFields', ['fields', 'types'], dynamicPattern);\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    // display a field type in the main area\n");
      out.write("    displayFieldType: function(typeName) {\n");
      out.write("      var ft = solr.schemaTypes[typeName];\n");
      out.write("      $('#mainInfo').html('');\n");
      out.write("      $('#topTerms').html('');\n");
      out.write("      $('#histogram').html('');\n");
      out.write("\t\t\t$('#mainInfo').append(solr.createSimpleText('Field Type: ' + typeName));\n");
      out.write("        $('#mainInfo').append(solr.createNameValueText('Fields', function(p) {\n");
      out.write("          if (ft.fields != undefined) {\n");
      out.write("            $.each(ft.fields, function(i, item) {\n");
      out.write("              if (solr.schemaFields[item] != undefined) {\n");
      out.write("                p.appendChild(solr.createLink(item, item));\n");
      out.write("              } else {\n");
      out.write("                p.appendChild(solr.createLink(item, item, solr.displayDynamicField));\n");
      out.write("              }\n");
      out.write("              p.appendChild(document.createTextNode(' '));\n");
      out.write("            });\n");
      out.write("          } else {\n");
      out.write("            p.appendChild(document.createTextNode('No fields in index'));\n");
      out.write("          }\n");
      out.write("          return p;\n");
      out.write("        }));\n");
      out.write("      $('#mainInfo').append(solr.createNameValueText('Tokenized', ft.tokenized));\n");
      out.write("      $('#mainInfo').append(solr.createNameValueText('Class Name', ft.className));\n");
      out.write("\n");
      out.write("      solr.displayAnalyzer(ft.indexAnalyzer, 'Index Analyzer');\n");
      out.write("      solr.displayAnalyzer(ft.queryAnalyzer, 'Query Analyzer');\n");
      out.write("      solr.toggleMenus('types', ['fields', 'dynFields'], typeName);\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    //Displays information about an Analyzer in the main content area\n");
      out.write("    displayAnalyzer: function(analyzer, type, shouldCollapse) {\n");
      out.write("      var tid = type.replace(' ', '');\n");
      out.write("      var collapse = shouldCollapse && (analyzer.charFilters != undefined || analyzer.tokenizer != undefined || analyzer.filters != undefined);\n");
      out.write("      $('#mainInfo').append(solr.createNameValueText(type, function(p) {\n");
      out.write("        p.appendChild(document.createTextNode(analyzer.className + ' '));\n");
      out.write("        if (collapse) {\n");
      out.write("          p.appendChild(solr.createLink(type, 'Details', function() {\n");
      out.write("            $('#'+tid).toggle(\"slow\");\n");
      out.write("          }));\n");
      out.write("        }\n");
      out.write("        return p;\n");
      out.write("      }));\n");
      out.write("      var adiv = document.createElement('div');\n");
      out.write("      adiv.id=tid;\n");
      out.write("      adiv.className='analyzer';\n");
      out.write("      if (collapse) {\n");
      out.write("        adiv.style.display='none';\n");
      out.write("      }\n");
      out.write("      if (analyzer.charFilters != undefined) {\n");
      out.write("        adiv.appendChild(solr.createNameValueText('Char Filters', ''));\n");
      out.write("        var f = document.createElement('ol');\n");
      out.write("        $.each(analyzer.charFilters, function(i, item) {\n");
      out.write("          var fil = document.createElement('li');\n");
      out.write("          var filterText = item.className;\n");
      out.write("          if (item.args != undefined) {\n");
      out.write("            filterText += ' args:{'\n");
      out.write("            $.each(item.args, function(fi, fitem) {\n");
      out.write("              filterText += fi + ': ' + fitem + ' ';\n");
      out.write("            });\n");
      out.write("            filterText +='}';\n");
      out.write("            fil.innerHTML = filterText;\n");
      out.write("            f.appendChild(fil);\n");
      out.write("          }\n");
      out.write("        });\n");
      out.write("        adiv.appendChild(f);\n");
      out.write("      }\n");
      out.write("      if (analyzer.tokenizer != undefined) {\n");
      out.write("        adiv.appendChild(solr.createNameValueText(\"Tokenizer Class\", analyzer.tokenizer.className));\n");
      out.write("      }\n");
      out.write("      if (analyzer.filters != undefined) {\n");
      out.write("        adiv.appendChild(solr.createNameValueText('Filters', ''));\n");
      out.write("        var f = document.createElement('ol');\n");
      out.write("        $.each(analyzer.filters, function(i, item) {\n");
      out.write("          var fil = document.createElement('li');\n");
      out.write("          var filterText = item.className;\n");
      out.write("          if (item.args != undefined) {\n");
      out.write("            filterText += ' args:{'\n");
      out.write("            $.each(item.args, function(fi, fitem) {\n");
      out.write("              filterText += fi + ': ' + fitem + ' ';\n");
      out.write("            });\n");
      out.write("            filterText +='}';\n");
      out.write("            fil.innerHTML = filterText;\n");
      out.write("            f.appendChild(fil);\n");
      out.write("          }\n");
      out.write("        });\n");
      out.write("        adiv.appendChild(f);\n");
      out.write("      }\n");
      out.write("      $('#mainInfo').append(adiv);\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    // display information about a Field in the main content area\n");
      out.write("    // and its TopTerms and Histogram in related divs\n");
      out.write("\t\tdisplayField: function(fieldName) {\n");
      out.write("      var field = solr.schemaFields[fieldName];\n");
      out.write("      var isDynamic = field.dynamicBase != undefined ? true : false;\n");
      out.write("      var ft;\n");
      out.write("      var ftName;\n");
      out.write("      $('#mainInfo').html('');  \n");
      out.write("      $('#topTerms').html('');\n");
      out.write("      $('#histogram').html('');\n");
      out.write("      $('#mainInfo').append(solr.createSimpleText('Field: ' + fieldName));\n");
      out.write("      \n");
      out.write("      //For regular fields, we take their properties; for dynamicFields,\n");
      out.write("      // we take them from their dynamicField definitions\n");
      out.write("      if (isDynamic) {\n");
      out.write("        ftName = solr.schemaDynamicFields[field.dynamicBase].type\n");
      out.write("        $('#mainInfo').append(solr.createNameValueText('Dynamically Created From Pattern', function(p) {\n");
      out.write("          p.appendChild(solr.createLink(field.dynamicBase, field.dynamicBase, solr.displayDynamicField));\n");
      out.write("          return p;\n");
      out.write("        }));\n");
      out.write("      } else {\n");
      out.write("        ftName = field.type;\n");
      out.write("      }\t\t\t\n");
      out.write("      ft = solr.schemaTypes[field.type];\n");
      out.write("      $('#mainInfo').append(solr.createNameValueText('Field Type', function(p) {\n");
      out.write("        p.appendChild(solr.createLink(ftName, ftName, solr.displayFieldType));\n");
      out.write("        return p;\n");
      out.write("      }));\n");
      out.write("\t\t\tif (solr.schemaFlags != '') {\n");
      out.write("        $.each({'flags':'Properties', 'schema':'Schema', 'index':'Index'}, function(prop, text) {\n");
      out.write("          if (field[prop] != undefined) {\n");
      out.write("            $('#mainInfo').append(solr.createNameValueText(text, solr.createTextFromFlags(field[prop], ft)));\n");
      out.write("          }\n");
      out.write("        });\n");
      out.write("      }    \n");
      out.write("      $.each({'copySources':'Copied From', 'copyDests':'Copied Into'}, function(prop, text) {\n");
      out.write("        if (field[prop] != undefined && field[prop] != '') {\n");
      out.write("          $('#mainInfo').append(solr.createNameValueText(text, function(p) {\n");
      out.write("            $.each(field[prop], function(i, item) {\n");
      out.write("              p.appendChild(solr.createLink(item, item));\n");
      out.write("              p.appendChild(document.createTextNode(' '));\n");
      out.write("            });\n");
      out.write("            return p;\n");
      out.write("          }));\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("      if (field.positionIncrementGap != undefined) {\n");
      out.write("        $('#mainInfo').append(solr.createNameValueText('Position Increment Gap', field.positionIncrementGap));\n");
      out.write("      }\n");
      out.write("      solr.displayAnalyzer(ft.indexAnalyzer, 'Index Analyzer', true);\n");
      out.write("      solr.displayAnalyzer(ft.queryAnalyzer, 'Query Analyzer', true);\n");
      out.write("      if (field.docs != undefined) {\n");
      out.write("        $('#mainInfo').append(solr.createNameValueText('Docs', field.docs));\n");
      out.write("      }\n");
      out.write("      if (field.distinct != undefined) {\n");
      out.write("        $('#mainInfo').append(solr.createNameValueText('Distinct', field.distinct));\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      if (field.topTerms != undefined) {\n");
      out.write("        solr.displayTopTerms(field.topTerms, fieldName);\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      if (field.histogram != undefined) {\n");
      out.write("        solr.drawHistogram(field.histogram);\n");
      out.write("      }\n");
      out.write("      solr.toggleMenus('fields', ['types', 'dynFields'], fieldName);\n");
      out.write("\t\t},\t\n");
      out.write("\n");
      out.write("    //utility method to create a single sentence list of properties from a flag set\n");
      out.write("    // or pass it on, if the flags are (unstored field)\n");
      out.write("\t\tcreateTextFromFlags: function(fieldFlags, fieldType) {\n");
      out.write("\t\t\tvar value;\n");
      out.write("      if (fieldFlags != '(unstored field)') {\n");
      out.write("        var value = '';      \n");
      out.write("        for (var i=0;i<fieldFlags.length;i++) {\n");
      out.write("          if (fieldFlags.charAt(i) != '-') {\n");
      out.write("            value += solr.schemaFlags[fieldFlags.charAt(i)];\n");
      out.write("          value += ', ';\n");
      out.write("          }\n");
      out.write("        }\n");
      out.write("        value = value.substring(0, value.length-2);\n");
      out.write("\t\t\t} else {\n");
      out.write("      value = fieldFlags;\n");
      out.write("      }\n");
      out.write("\t\t\treturn value;\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("    //Store the currently highlighted menu item, as otherwise we\n");
      out.write("    // must traverse all li menu items, which is very slow on schemas with\n");
      out.write("    // large number of fields\n");
      out.write("    // for example $('#menu ul li').siblings().removeClass('selected');\n");
      out.write("    currentlyHighlightedMenuId: undefined,\n");
      out.write("    \n");
      out.write("    //add a highlight to the currently selected menu item, and remove\n");
      out.write("    // the highlights from all other menu items\n");
      out.write("    highlightMenuItem: function(idToSelect) {\n");
      out.write("      if (solr.currentlyHighlightedMenuId != undefined) {\n");
      out.write("        $('#'+solr.currentlyHighlightedMenuId).removeClass('selected');\n");
      out.write("      }\n");
      out.write("      $('#'+idToSelect).addClass('selected');\n");
      out.write("      solr.currentlyHighlightedMenuId = idToSelect;\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    //Opens one menu group, close the others, and optionally highlight one\n");
      out.write("    // item, which should be in the opened menu\n");
      out.write("    toggleMenus: function(idToShow, idsToHide, idToSelect) {\n");
      out.write("      if (idToSelect != undefined) {\n");
      out.write("        solr.highlightMenuItem(idToShow + idToSelect);\n");
      out.write("      }\n");
      out.write("      $('#'+idToShow).show(\"slow\");\n");
      out.write("      $.each(idsToHide, function(i, idToHide) {\n");
      out.write("        $('#'+idToHide).hide(\"slow\");\n");
      out.write("      });\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    //A utility method to create a paragraph, which takes two arguments;\n");
      out.write("    // an opening text, and either text or a callback function to follow\n");
      out.write("    // any callback function must return the node passed into it\n");
      out.write("    createNameValueText: function(openingText, func) {\n");
      out.write("      var p = document.createElement('p');\n");
      out.write("      p.appendChild(solr.createSimpleText(openingText + ': ', 'b'));\n");
      out.write("      return solr.applyFuncToNode(p, func);\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    //utility method to create an HTML text element node\n");
      out.write("    // with the literal text to place, and an optional function to apply\n");
      out.write("    // any callback function must return the node passed into it \n");
      out.write("    createSimpleText: function(text, n, func) {\n");
      out.write("      if (n == undefined) {\n");
      out.write("        n = 'h2';\n");
      out.write("      }\n");
      out.write("      var no= document.createElement(n);\n");
      out.write("      no.appendChild(document.createTextNode(text));\n");
      out.write("      return solr.applyFuncToNode(no, func);\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    //Utility method that applies a function or a string to append\n");
      out.write("    // an additional child to a node\n");
      out.write("    applyFuncToNode: function(no, func) {\n");
      out.write("      if ($.isFunction(func)) {\n");
      out.write("        no = func(no);\n");
      out.write("      } else {\n");
      out.write("        // if it is not a function, append it as a string\n");
      out.write("        if (func != undefined) {\n");
      out.write("          no.appendChild(document.createTextNode(' ' + func));\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("      return no;\n");
      out.write("    },\n");
      out.write("        \n");
      out.write("    //show a table of top terms for a given field\n");
      out.write("    displayTopTerms: function(topTerms, fieldName) {\n");
      out.write("        $('#topTerms').html('');\n");
      out.write("        var tbl = document.createElement('table');\n");
      out.write("        tbl.className='topTerms';\n");
      out.write("        var thead= document.createElement('thead');\n");
      out.write("        var headerRow = document.createElement('tr');\n");
      out.write("        $.each(['term', 'frequency'], function() {\n");
      out.write("          var cell = document.createElement('th');\n");
      out.write("          cell.innerHTML= this;\n");
      out.write("          headerRow.appendChild(cell);\n");
      out.write("        });\n");
      out.write("        thead.appendChild(headerRow);\n");
      out.write("        tbl.appendChild(thead);\n");
      out.write("        var tbody = document.createElement('tbody');\n");
      out.write("        \n");
      out.write("        var numTerms = 0;\n");
      out.write("        $.each(topTerms, function(term, count) {\n");
      out.write("          var c1 = $('<td>').text(term);\n");
      out.write("          var c2 = $('<td>').text(count);\n");
      out.write("          var row = $('<tr>').append(c1).append(c2);\n");
      out.write("          tbody.appendChild(row.get(0));\n");
      out.write("          numTerms++;\n");
      out.write("        });\n");
      out.write("        tbl.appendChild(tbody);\n");
      out.write("        \n");
      out.write("        //create a header along with an input widget so the user\n");
      out.write("        // can request a different number of Top Terms\n");
      out.write("        var h2 = document.createElement('h2');\n");
      out.write("        h2.appendChild(document.createTextNode('Top   '));\n");
      out.write("        var termsGetter = document.createElement('input');\n");
      out.write("        termsGetter.type='text';\n");
      out.write("        termsGetter.size=5;\n");
      out.write("        termsGetter.value=numTerms;\n");
      out.write("        \n");
      out.write("        termsGetter.onchange=function() {\n");
      out.write("            solr.getTopTerms(fieldName, this.value, solr.displayTopTerms);\n");
      out.write("        }\n");
      out.write("        h2.appendChild(termsGetter);\n");
      out.write("        h2.appendChild(document.createTextNode(' Terms'));\n");
      out.write("        $('#topTerms').append(h2);\n");
      out.write("        \n");
      out.write("        document.getElementById('topTerms').appendChild(tbl);\n");
      out.write("        $('#topTerms').append(tbl);\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    //draws a histogram, taking a map of values and an optional total height and width for the table\n");
      out.write("    drawHistogram: function(histogram, totalHeightArg, totalWidthArg) {\n");
      out.write("      $('#histogram').html('');\n");
      out.write("      $('#histogram').append(solr.createSimpleText('Histogram'));\n");
      out.write("      var max = 0;\n");
      out.write("      var bars =0;\n");
      out.write("      //find the # of columns and max value in the histogram \n");
      out.write("      // so we can create an appropriately scaled chart\n");
      out.write("      $.each(histogram, function(i, item) {\n");
      out.write("        if (item > max) max = item;\n");
      out.write("        bars += 1;\n");
      out.write("      });\n");
      out.write("      if (max ==0) {\n");
      out.write("        $('#histogram').append(solr.createNameValueText('No histogram available'));\n");
      out.write("      } else {\n");
      out.write("        var totalHeight = totalHeightArg == undefined ? 208 : totalHeightArg;\n");
      out.write("        var totalWidth = totalWidthArg == undefined ? 160 : totalWidthArg;\n");
      out.write("        var tbl = document.createElement('table');\n");
      out.write("        tbl.style.width=totalWidth+'px';\n");
      out.write("        tbl.className = 'histogram';\n");
      out.write("        var h = document.createElement('tbody');\n");
      out.write("        var r = document.createElement('tr');\n");
      out.write("        var r2 = document.createElement('tr');\n");
      out.write("        $.each(histogram, function(i, item) {\n");
      out.write("          var c = document.createElement('td');\n");
      out.write("          c.innerHTML=item+'<div style=\"width:'+totalWidth/bars+'px;height:'+(item*totalHeight/max)+'px;background:blue\">&nbsp</div>';\n");
      out.write("          r.appendChild(c);\n");
      out.write("          var c2 = document.createElement('td');\n");
      out.write("          c2.innerHTML='' + i;\n");
      out.write("          r2.appendChild(c2);\n");
      out.write("        });\n");
      out.write("        h.appendChild(r);\n");
      out.write("        h.appendChild(r2);\n");
      out.write("        tbl.appendChild(h);\n");
      out.write("        $('#histogram').append(tbl);\n");
      out.write("      }\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    //dynamically creates a link to be appended\n");
      out.write("    createLink: function(idToDisplay, linkText, linkFunction) {\n");
      out.write("      var link = document.createElement('a');\n");
      out.write("      if (!$.isFunction(linkFunction)) {\n");
      out.write("        linkFunction = solr.displayField\n");
      out.write("      }\n");
      out.write("      link.onclick=function() {\n");
      out.write("        linkFunction(idToDisplay);\n");
      out.write("        return false;\n");
      out.write("      };\n");
      out.write("      link.href='#';\n");
      out.write("      link.innerHTML=linkText;\n");
      out.write("      return link;\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    //Creates a menu header that can expand or collapse its children\n");
      out.write("    createMenuHeader: function(text, idToShow, idsToHide) {\n");
      out.write("      var head = document.createElement('h3');\n");
      out.write("      var a = document.createElement('a');\n");
      out.write("      a.onclick=function() {\n");
      out.write("        solr.toggleMenus(idToShow, idsToHide);\n");
      out.write("        return false;\n");
      out.write("      };\n");
      out.write("      a.href='#';\n");
      out.write("      a.innerHTML=text;\n");
      out.write("      head.appendChild(a);\n");
      out.write("      return head;\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    //Creates an element in a menu (e.g. each field in a list of fields)\n");
      out.write("    createMenuItem: function(tagName, text, link, type, func) {\n");
      out.write("        var fieldEle = document.createElement('li');\n");
      out.write("        fieldEle.id=type+text;\n");
      out.write("        var funct = func == undefined ? undefined : func;\n");
      out.write("        fieldEle.appendChild(solr.createLink(text, link, funct));\n");
      out.write("        return fieldEle;\n");
      out.write("    },\n");
      out.write("    \n");
      out.write("    //populates the menu div\n");
      out.write("    createMenu: function(menuId) {\n");
      out.write("      var m = $('#'+menuId);\n");
      out.write("      var home = document.createElement('h2');\n");
      out.write("      home.appendChild(solr.createLink('Home', 'Home', solr.displaySchemaInfo));\n");
      out.write("      m.append(home);\n");
      out.write("      m.append(solr.createMenuHeader('Fields', 'fields', ['types', 'dynFields']));\n");
      out.write("      var fields= document.createElement('ul');\n");
      out.write("      fields.style.display='none';\n");
      out.write("      fields.id = 'fields';\n");
      out.write("      $.each(solr.schemaFields, function(i, item) {\n");
      out.write("        fields.appendChild(solr.createMenuItem('li', i, i, fields.id));\n");
      out.write("      });\n");
      out.write("      m.append(fields);\n");
      out.write("      m.append(solr.createMenuHeader('Dynamic Fields', 'dynFields', ['fields', 'types']));\n");
      out.write("      var dyns = document.createElement('ul');\n");
      out.write("      dyns.style.display = 'none';\n");
      out.write("      dyns.id = 'dynFields';\n");
      out.write("      $.each(solr.schemaDynamicFields, function(i, item) {\n");
      out.write("        dyns.appendChild(solr.createMenuItem('li', i,i, dyns.id, solr.displayDynamicField));\n");
      out.write("      });\n");
      out.write("      m.append(dyns);\n");
      out.write("      m.append(solr.createMenuHeader('Field Types', 'types', ['fields', 'dynFields']));\n");
      out.write("      var types = document.createElement('ul');\n");
      out.write("      types.style.display='none';\n");
      out.write("      types.id='types';\n");
      out.write("      $.each(this.schemaTypes, function(i, item) {\n");
      out.write("        types.appendChild(solr.createMenuItem('li', i, i,types.id, solr.displayFieldType));\n");
      out.write("      });\n");
      out.write("      m.append(types);\n");
      out.write("    }\n");
      out.write("   };\n");
      out.write("   \n");
      out.write("\twindow[libName] = solr;\n");
      out.write("})(jQuery, 'solr');\n");
      out.write("$(document).ready(function() {\n");
      out.write("  solr.init();\n");
      out.write("});\n");
      out.write("    \n");
      out.write("$(window).unload( function() {\n");
      out.write("  solr = null;\n");
      out.write("  $('#mainInfo').html('');\n");
      out.write("  $('#menu').html('');\n");
      out.write("  $('#topTerms').html('');\n");
      out.write("  $('#histogram').html('');\n");
      out.write("});\n");
      out.write("  \n");
      out.write("</script>\n");
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");

request.setCharacterEncoding("UTF-8");

      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

  // 
  SolrCore  core = (SolrCore) request.getAttribute("org.apache.solr.SolrCore");
  if (core == null) {
    response.sendError( 404, "missing core name in path" );
    return;
  }
    
  SolrConfig solrConfig = core.getSolrConfig();
  int port = request.getServerPort();
  IndexSchema schema = core.getSchema();

  // enabled/disabled is purely from the point of a load-balancer
  // and has no effect on local server function.  If there is no healthcheck
  // configured, don't put any status on the admin pages.
  String enabledStatus = null;
  String enabledFile = solrConfig.get("admin/healthcheck/text()",null);
  boolean isEnabled = false;
  if (enabledFile!=null) {
    isEnabled = new File(enabledFile).exists();
  }

  String collectionName = schema!=null ? schema.getName():"unknown";

  String defaultSearch = "";
  { 
    StringWriter tmp = new StringWriter();
    XML.escapeCharData
      (solrConfig.get("admin/defaultQuery/text()", ""), tmp);
    defaultSearch = tmp.toString();
  }

  String solrImplVersion = "";
  String solrSpecVersion = "";
  String luceneImplVersion = "";
  String luceneSpecVersion = "";

  { 
    Package p;
    StringWriter tmp;

    p = SolrCore.class.getPackage();

    tmp = new StringWriter();
    solrImplVersion = p.getImplementationVersion();
    if (null != solrImplVersion) {
      XML.escapeCharData(solrImplVersion, tmp);
      solrImplVersion = tmp.toString();
    }
    tmp = new StringWriter();
    solrSpecVersion = p.getSpecificationVersion() ;
    if (null != solrSpecVersion) {
      XML.escapeCharData(solrSpecVersion, tmp);
      solrSpecVersion = tmp.toString();
    }
  
    p = LucenePackage.class.getPackage();

    tmp = new StringWriter();
    luceneImplVersion = p.getImplementationVersion();
    if (null != luceneImplVersion) {
      XML.escapeCharData(luceneImplVersion, tmp);
      luceneImplVersion = tmp.toString();
    }
    tmp = new StringWriter();
    luceneSpecVersion = p.getSpecificationVersion() ;
    if (null != luceneSpecVersion) {
      XML.escapeCharData(luceneSpecVersion, tmp);
      luceneSpecVersion = tmp.toString();
    }
  }
  
  String cwd=System.getProperty("user.dir");
  String solrHome= solrConfig.getInstanceDir();
  
  boolean cachingEnabled = !solrConfig.getHttpCachingConfig().isNever304(); 

      out.write('\n');
      out.write("\n");
      out.write("<script>\n");
      out.write("var host_name=\"");
      out.print( hostname );
      out.write("\"\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"solr-admin.css\">\n");
      out.write("<link rel=\"icon\" href=\"favicon.ico\" type=\"image/ico\"></link>\n");
      out.write("<link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/ico\"></link>\n");
      out.write("<title>Solr admin page</title>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("<a href=\".\"><img border=\"0\" align=\"right\" height=\"78\" width=\"142\" src=\"solr_small.png\" alt=\"Solr\"></a>\n");
      out.write("<h1>Solr Admin (");
      out.print( collectionName );
      out.write(')');
      out.write('\n');
      out.print( enabledStatus==null ? "" : (isEnabled ? " - Enabled" : " - Disabled") );
      out.write(" </h1>\n");
      out.write("\n");
      out.print( hostname );
      out.write(':');
      out.print( port );
      out.write("<br/>\n");
      out.write("cwd=");
      out.print( cwd );
      out.write("  SolrHome=");
      out.print( solrHome );
      out.write("\n");
      out.write("<br/>\n");
String cachingStatus = " HTTP caching is ";  
      out.write('\n');
      out.print( cachingEnabled ? cachingStatus + " ON": cachingStatus + " OFF" );
      out.write('\n');
      out.write("\n");
      out.write("<div id=\"schemaTop\">\n");
      out.write("<h2>Schema Browser | See <a href=\"file/?file=schema.xml\">Raw Schema.xml</a></h2>\n");
      out.write("</div>\n");
      out.write("<div id=\"menu\"></div>\n");
      out.write("<div id=\"content\">\n");
      out.write("<div id=\"mainInfo\"><h2>Please wait...loading and parsing Schema Information from LukeRequestHandler</h2><p>If it does not load or your browser is not javascript or ajax-capable, you may wish to examine your schema using the <a href=\"luke?wt=xslt&tr=luke.xsl\">Server side transformed LukeRequestHandler</a> or the raw <a href=\"file/?file=schema.xml\">schema.xml</a> instead.</div>\n");
      out.write("<div id=\"topTerms\"></div>\n");
      out.write("<div id=\"histogram\"></div>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
